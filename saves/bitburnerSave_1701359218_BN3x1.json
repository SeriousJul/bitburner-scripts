{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":18,\"max\":18},\"skills\":{\"hacking\":181,\"strength\":82,\"defense\":82,\"dexterity\":91,\"agility\":91,\"charisma\":20,\"intelligence\":0},\"exp\":{\"hacking\":232793.9707400834,\"strength\":4285.098000000147,\"defense\":4285.098000000147,\"dexterity\":5493.063999999958,\"agility\":5493.063999999958,\"charisma\":276.65999999999974,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.16,\"hacking_speed\":1.16,\"hacking_money\":1.16,\"hacking_grow\":1.16,\"hacking\":1.16,\"strength\":1.16,\"defense\":1.16,\"dexterity\":1.16,\"agility\":1.16,\"charisma\":1.4384,\"hacking_exp\":1.16,\"strength_exp\":1.16,\"defense_exp\":1.16,\"dexterity_exp\":1.16,\"agility_exp\":1.16,\"charisma_exp\":1.16,\"company_rep\":1.16,\"faction_rep\":1.16,\"crime_money\":1.4384,\"crime_success\":1.4384,\"hacknet_node_money\":1.16,\"hacknet_node_purchase_cost\":0.8620689655172414,\"hacknet_node_ram_cost\":0.8620689655172414,\"hacknet_node_core_cost\":0.8620689655172414,\"hacknet_node_level_cost\":0.8620689655172414,\"work_money\":1.16,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":3,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"SeriousCorp\",\"divisions\":{\"ctor\":\"JSONMap\",\"data\":[[\"SeriousTobacco\",{\"ctor\":\"Division\",\"data\":{\"name\":\"SeriousTobacco\",\"type\":\"Tobacco\",\"researchPoints\":1246.0281288969493,\"researched\":{\"ctor\":\"JSONSet\",\"data\":[]},\"requiredMaterials\":{\"Plants\":1},\"producedMaterials\":[],\"products\":{\"ctor\":\"JSONMap\",\"data\":[[\"1\",{\"ctor\":\"Product\",\"data\":{\"name\":\"1\",\"demand\":19.00359999999935,\"competition\":6.99639999999989,\"markup\":16.41090393005159,\"productionCost\":14880.240260514642,\"finished\":true,\"developmentProgress\":100,\"creationCity\":\"Sector-12\",\"designInvestment\":10000,\"advertisingInvestment\":10000,\"creationJobFactors\":{\"Operations\":254.12908619116982,\"Engineer\":529.0532099947109,\"Business\":95.77127521866913,\"Management\":298.06271295695205,\"Research & Development\":300.0857087346327,\"total\":1477.1019930961343,\"Intern\":0,\"Unassigned\":0},\"rating\":106.92584812197045,\"stats\":{\"quality\":118.61392166984453,\"performance\":129.85079372668415,\"durability\":97.62129518342184,\"reliability\":80.29379904454879,\"aesthetics\":70.66986717368542,\"features\":106.61312901272268},\"cityData\":{\"Aevum\":{\"stored\":12.810712317922457,\"productionAmount\":1.2810712317922457,\"actualSellAmount\":1.2829284832966241,\"effectiveRating\":20.68099109056144,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\"},\"Chongqing\":{\"stored\":12.741906516233195,\"productionAmount\":1.2741906516233195,\"actualSellAmount\":1.2760619904104415,\"effectiveRating\":20.68099109056144,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\"},\"Sector-12\":{\"stored\":13.123697675103475,\"productionAmount\":1.3123697675103476,\"actualSellAmount\":1.3142556017781535,\"effectiveRating\":20.68099109056144,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\"},\"New Tokyo\":{\"stored\":13.06070339906861,\"productionAmount\":1.306070339906861,\"actualSellAmount\":1.3079748259053638,\"effectiveRating\":20.68099109056144,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\"},\"Ishima\":{\"stored\":12.40419817693584,\"productionAmount\":1.240419817693584,\"actualSellAmount\":1.2422207262435045,\"effectiveRating\":20.68099109056144,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\"},\"Volhaven\":{\"stored\":12.21434449074408,\"productionAmount\":1.221434449074408,\"actualSellAmount\":1.2231851053523235,\"effectiveRating\":20.68099109056144,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\"}},\"size\":0.05,\"requiredMaterials\":{\"Plants\":1},\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":{\"Aevum\":15268.681699322222,\"Chongqing\":14501.723514897287,\"Sector-12\":14338.875870091126,\"New Tokyo\":15628.037896191221,\"Ishima\":14998.279895042951,\"Volhaven\":14880.240260514642},\"maxSellAmount\":73.52489270551006}}],[\"2\",{\"ctor\":\"Product\",\"data\":{\"name\":\"2\",\"demand\":33.92697955047488,\"competition\":13.098800000000065,\"markup\":16.05145627744135,\"productionCost\":14880.240260514642,\"finished\":true,\"developmentProgress\":100,\"creationCity\":\"Sector-12\",\"designInvestment\":1000000,\"advertisingInvestment\":1000000,\"creationJobFactors\":{\"Operations\":269.83374506732,\"Engineer\":421.0140191889079,\"Business\":145.3793572525201,\"Management\":214.44793693049823,\"Research & Development\":285.6294744458056,\"total\":1336.304532885052,\"Intern\":null,\"Unassigned\":null},\"rating\":109.7060548832423,\"stats\":{\"quality\":118.25815820243868,\"performance\":127.74329983490297,\"durability\":108.12929185867935,\"reliability\":88.46401631551163,\"aesthetics\":80.56207477833655,\"features\":111.14981019209381},\"cityData\":{\"Aevum\":{\"stored\":12.810712317922457,\"productionAmount\":1.2810712317922457,\"actualSellAmount\":1.2829284832966241,\"effectiveRating\":20.9481316477859,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\"},\"Chongqing\":{\"stored\":12.741906516233195,\"productionAmount\":1.2741906516233195,\"actualSellAmount\":1.2760619904104415,\"effectiveRating\":20.9481316477859,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\"},\"Sector-12\":{\"stored\":13.123697675103475,\"productionAmount\":1.3123697675103476,\"actualSellAmount\":1.3142556017781535,\"effectiveRating\":20.9481316477859,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\"},\"New Tokyo\":{\"stored\":13.06070339906861,\"productionAmount\":1.306070339906861,\"actualSellAmount\":1.3079748259053638,\"effectiveRating\":20.9481316477859,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\"},\"Ishima\":{\"stored\":12.40419817693584,\"productionAmount\":1.240419817693584,\"actualSellAmount\":1.2422207262435045,\"effectiveRating\":20.9481316477859,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\"},\"Volhaven\":{\"stored\":12.21434449074408,\"productionAmount\":1.221434449074408,\"actualSellAmount\":1.2231851053523235,\"effectiveRating\":20.9481316477859,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\"}},\"size\":0.05,\"requiredMaterials\":{\"Plants\":1},\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":{\"Aevum\":15268.681699322222,\"Chongqing\":14501.723514897287,\"Sector-12\":14338.875870091126,\"New Tokyo\":15628.037896191221,\"Ishima\":14998.279895042951,\"Volhaven\":14880.240260514642},\"maxSellAmount\":123.67477433522836}}]]},\"makesProducts\":true,\"awareness\":3.0149999999999997,\"popularity\":0.9711000000000043,\"startingCost\":20000000000,\"realEstateFactor\":0.15,\"researchFactor\":0.75,\"hardwareFactor\":0.15,\"robotFactor\":0.2,\"aiCoreFactor\":0.15,\"advertisingFactor\":0.2,\"productionMult\":6.052467497817939,\"lastCycleRevenue\":228424.43060716643,\"lastCycleExpenses\":83849.96423163581,\"thisCycleRevenue\":0,\"thisCycleExpenses\":778519.0391285759,\"state\":\"EXPORT\",\"newInd\":false,\"warehouses\":{\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"city\":\"Sector-12\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":600.0843224129565,\"quality\":1,\"demand\":73.60041420941228,\"demandRange\":[20,90],\"competition\":63.299998590478566,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":3,\"actualSellAmount\":0,\"productionAmount\":-2.6247395350206952,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2867.7751740182252,\"averagePrice\":2887.2808569122826,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":3189.137621726099,\"maxSellPerCycle\":0.06138575874767561,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":187.6776580336654,\"quality\":1,\"demand\":88.94935189420067,\"demandRange\":[80,90],\"competition\":86.07604822262749,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8086.301285800596,\"averagePrice\":7689.624371811937,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":7677.283619734238,\"maxSellPerCycle\":0.4019787111510889,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":10,\"quality\":1,\"demand\":97.95220719401988,\"demandRange\":[80,99],\"competition\":98.6028273768485,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":81331.36491755862,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":76005.84836337282,\"maxSellPerCycle\":0.7407945820563474,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":10,\"quality\":1,\"demand\":90.15083657691653,\"demandRange\":[80,99],\"competition\":97.92862893392619,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":12995.594164467859,\"averagePrice\":15221.839035437206,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":14047.234828283927,\"maxSellPerCycle\":1.1663746590774005,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":10,\"quality\":1,\"demand\":54.59252323144648,\"demandRange\":[5,99],\"competition\":65.17407392742696,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":68309.82657732099,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":100,\"sizeUsed\":48.627245370178095,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":2.6247395350206952}},\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"city\":\"Aevum\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":893.86457443063,\"quality\":1,\"demand\":68.81562870798956,\"demandRange\":[20,90],\"competition\":43.32579349994742,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":3,\"actualSellAmount\":0,\"productionAmount\":-2.5621424635844914,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3053.7363398644447,\"averagePrice\":3064.592542146342,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":10,\"quality\":1,\"demand\":82.52598975416923,\"demandRange\":[80,90],\"competition\":81.20260255094075,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7711.693821704701,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":10,\"quality\":1,\"demand\":86.81188433322728,\"demandRange\":[80,99],\"competition\":93.6499738536269,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":72300.17231912771,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":10,\"quality\":1,\"demand\":81.57109631895763,\"demandRange\":[80,99],\"competition\":98.01318632808217,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":13295.572896091795,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":10,\"quality\":1,\"demand\":89.90092868224657,\"demandRange\":[5,99],\"competition\":35.322552875838305,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":85226.22577359765,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":100,\"sizeUsed\":52.62429995332374,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":2.5621424635844914}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"city\":\"Chongqing\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":1043.8888081665132,\"quality\":1,\"demand\":66.55279155599864,\"demandRange\":[20,90],\"competition\":58.03435985091989,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":3,\"actualSellAmount\":0,\"productionAmount\":-2.548381303246639,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2890.8213261204255,\"averagePrice\":2913.865708389149,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":81.80673746728992,\"demandRange\":[80,90],\"competition\":82.04306082046278,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7823.927660846287,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":96.17185208322971,\"demandRange\":[80,99],\"competition\":84.04974404433294,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":79764.36871899688,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":91.83608229568057,\"demandRange\":[80,99],\"competition\":81.34759125641075,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":15501.938121626075,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":45.3894577184846,\"demandRange\":[5,99],\"competition\":58.384708169869704,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":69202.91762811634,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":100,\"sizeUsed\":53.468631059948976,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":2.548381303246639}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"city\":\"New Tokyo\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":962.1054357790631,\"quality\":1,\"demand\":82.08320461464977,\"demandRange\":[20,90],\"competition\":48.84945401530497,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":3,\"actualSellAmount\":0,\"productionAmount\":-2.612140679813722,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3136.91938978624,\"averagePrice\":3127.6389774018476,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":88.59450332353359,\"demandRange\":[80,90],\"competition\":74.9995890727674,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8176.62415981316,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":91.6380557185179,\"demandRange\":[80,99],\"competition\":85.71895986421427,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":75177.53441214081,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":81.7022670794328,\"demandRange\":[80,99],\"competition\":86.06258539638688,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14655.35326128687,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":58.696932224579214,\"demandRange\":[5,99],\"competition\":67.90499443002513,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":83922.04410118981,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":100,\"sizeUsed\":49.41134212886003,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":2.612140679813722}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"city\":\"Ishima\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":1130.611913607102,\"quality\":1,\"demand\":66.65768648048025,\"demandRange\":[20,90],\"competition\":52.49309456541905,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":3,\"actualSellAmount\":0,\"productionAmount\":-2.480839635387168,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2997.812992561466,\"averagePrice\":2974.2155251231393,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[80,90],\"competition\":84.86453596426595,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7829.636131696513,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":87.78513737548428,\"demandRange\":[80,99],\"competition\":82.73313676250217,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":76605.1726100444,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":91.59130215017848,\"demandRange\":[80,99],\"competition\":81.05931815667951,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":15909.08423937142,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":68.70198201255236,\"demandRange\":[5,99],\"competition\":50.72814014778129,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":84060.7658687329,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":100,\"sizeUsed\":57.77101549804868,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":2.480839635387168}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"city\":\"Volhaven\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":1178.7699238108894,\"quality\":1,\"demand\":74.39954835864987,\"demandRange\":[20,90],\"competition\":45.890695686758725,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":3,\"actualSellAmount\":0,\"productionAmount\":-2.442868898148816,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2982.0808152683567,\"averagePrice\":2996.0410115865807,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80.34856403345742,\"demandRange\":[80,90],\"competition\":79.17879097493756,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8104.690895067376,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":93.77399003553963,\"demandRange\":[80,99],\"competition\":90.42643072135789,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":74398.12167037386,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":92.83588565318296,\"demandRange\":[80,99],\"competition\":91.09704036378696,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":15817.499675205245,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":53.677335666197095,\"demandRange\":[5,99],\"competition\":59.1660889267853,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":78352.8608607628,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":100,\"sizeUsed\":60.15993063961888,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":2.442868898148816}}},\"offices\":{\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Sector-12\",\"size\":9,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":26.882965147408438,\"avgMorale\":28.01488346258773,\"avgIntelligence\":80.9,\"avgCharisma\":70.6,\"avgCreativity\":71.8,\"avgEfficiency\":78.6,\"totalExperience\":721.4630000000193,\"numEmployees\":9,\"totalSalary\":10315.689000000057,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":169.00971683798332,\"Operations\":37.69570411933391,\"Engineer\":43.19972046007552,\"Business\":21.545539131864196,\"Management\":21.89649451311598,\"Research & Development\":44.67225861359374,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":2,\"Management\":1,\"Research & Development\":2,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":2,\"Management\":1,\"Research & Development\":2,\"Intern\":0,\"Unassigned\":0}}},\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Aevum\",\"size\":9,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":27.09136597323149,\"avgMorale\":27.191014068458323,\"avgIntelligence\":81.7,\"avgCharisma\":72.4,\"avgCreativity\":71.6,\"avgEfficiency\":74.2,\"totalExperience\":642.8820000000206,\"numEmployees\":9,\"totalSalary\":10025.946000000062,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":158.8810553646919,\"Operations\":35.01867020521121,\"Engineer\":39.820935753186696,\"Business\":20.743192224044805,\"Management\":20.809489978242873,\"Research & Development\":42.488767204006315,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":2,\"Management\":1,\"Research & Development\":2,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":2,\"Management\":1,\"Research & Development\":2,\"Intern\":0,\"Unassigned\":0}}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Chongqing\",\"size\":9,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":26.421330930134676,\"avgMorale\":27.630616010525216,\"avgIntelligence\":79.9,\"avgCharisma\":78,\"avgCreativity\":71.8,\"avgEfficiency\":70.5,\"totalExperience\":633.2090000000115,\"numEmployees\":9,\"totalSalary\":10005.027000000035,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":156.16792945224762,\"Operations\":33.94624778309177,\"Engineer\":38.50727155924022,\"Business\":21.191281429880572,\"Management\":21.175950639242803,\"Research & Development\":41.34717804079226,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":2,\"Management\":1,\"Research & Development\":2,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":2,\"Management\":1,\"Research & Development\":2,\"Intern\":0,\"Unassigned\":0}}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"New Tokyo\",\"size\":9,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":27.744316091288336,\"avgMorale\":27.632570161156597,\"avgIntelligence\":77.7,\"avgCharisma\":81.6,\"avgCreativity\":69.4,\"avgEfficiency\":77.7,\"totalExperience\":617.1445000000115,\"numEmployees\":9,\"totalSalary\":10124.233500000035,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":165.41368735378052,\"Operations\":36.147641810162106,\"Engineer\":40.84960991047714,\"Business\":22.534171760380257,\"Management\":23.00259293133038,\"Research & Development\":42.87967094143063,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":2,\"Management\":1,\"Research & Development\":2,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":2,\"Management\":1,\"Research & Development\":2,\"Intern\":0,\"Unassigned\":0}}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Ishima\",\"size\":9,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":26.096847507114227,\"avgMorale\":25.65903067184478,\"avgIntelligence\":74.8,\"avgCharisma\":70,\"avgCreativity\":65.7,\"avgEfficiency\":78.2,\"totalExperience\":681.1280000000115,\"numEmployees\":9,\"totalSalary\":9838.284000000034,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":143.1938871263438,\"Operations\":31.95571564609672,\"Engineer\":36.63106068563103,\"Business\":18.4494245440597,\"Management\":18.987798871800994,\"Research & Development\":37.16988737875538,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":2,\"Management\":1,\"Research & Development\":2,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":2,\"Management\":1,\"Research & Development\":2,\"Intern\":0,\"Unassigned\":0}}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Volhaven\",\"size\":9,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":26.26425466933409,\"avgMorale\":24.61283308131019,\"avgIntelligence\":70.7,\"avgCharisma\":68.4,\"avgCreativity\":73.9,\"avgEfficiency\":75.1,\"totalExperience\":691.0950000000115,\"numEmployees\":9,\"totalSalary\":9851.985000000037,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":137.09584286209963,\"Operations\":30.78314856531693,\"Engineer\":34.62611304839573,\"Business\":17.463407163019667,\"Management\":18.160913458779333,\"Research & Development\":36.06226062658796,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":2,\"Management\":1,\"Research & Development\":2,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":2,\"Management\":1,\"Research & Development\":2,\"Intern\":0,\"Unassigned\":0}}}},\"numAdVerts\":1}}]]},\"maxDivisions\":20,\"funds\":30126303594.11373,\"revenue\":228424.43060716643,\"expenses\":83849.96423163581,\"fundingRound\":0,\"public\":false,\"totalShares\":1500000000,\"numShares\":1000000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendRate\":0,\"dividendTax\":0.15,\"investorShares\":500000000,\"issuedShares\":0,\"sharePrice\":66.36404480988156,\"storedCycles\":5116,\"unlocks\":{\"ctor\":\"JSONSet\",\"data\":[\"Warehouse API\",\"Office API\"]},\"upgrades\":{\"Smart Factories\":{\"level\":0,\"value\":1},\"Smart Storage\":{\"level\":0,\"value\":1},\"DreamSense\":{\"level\":0,\"value\":0},\"Wilson Analytics\":{\"level\":0,\"value\":1},\"Nuoptimal Nootropic Injector Implants\":{\"level\":0,\"value\":1},\"Speech Processor Implants\":{\"level\":0,\"value\":1},\"Neural Accelerators\":{\"level\":0,\"value\":1},\"FocusWires\":{\"level\":0,\"value\":1},\"ABC SalesBots\":{\"level\":0,\"value\":1},\"Project Insight\":{\"level\":0,\"value\":1}},\"previousTotalAssets\":50143709974.100975,\"totalAssets\":50145235480.74505,\"cycleValuation\":74905000000,\"valuationsList\":[75870000000,75693000000,75556000000,75474000000,75363000000,75234000000,75155000000,75076000000,74978000000,74905000000],\"valuation\":75330400000,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":4}},\"seedFunded\":true}},\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Slum Snakes\",\"Netburners\",\"CyberSec\"],\"factionInvitations\":[\"Sector-12\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":101,\"moneyGainRatePerSecond\":55.897589409649385,\"onlineTimeSeconds\":27916.000000009437,\"ram\":8,\"totalMoneyGenerated\":1415275.5061410596,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":101,\"moneyGainRatePerSecond\":55.897589409649385,\"onlineTimeSeconds\":27705.000000009146,\"ram\":8,\"totalMoneyGenerated\":1410692.6048882534,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":101,\"moneyGainRatePerSecond\":55.897589409649385,\"onlineTimeSeconds\":27645.000000008942,\"ram\":8,\"totalMoneyGenerated\":1406680.6386048372,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":101,\"moneyGainRatePerSecond\":55.897589409649385,\"onlineTimeSeconds\":27585.00000000868,\"ram\":8,\"totalMoneyGenerated\":1398626.8524898838,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":101,\"moneyGainRatePerSecond\":55.897589409649385,\"onlineTimeSeconds\":27525.000000008407,\"ram\":8,\"totalMoneyGenerated\":1391744.941104037,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":101,\"moneyGainRatePerSecond\":55.897589409649385,\"onlineTimeSeconds\":27465.00000000817,\"ram\":8,\"totalMoneyGenerated\":1388617.946155767,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":101,\"moneyGainRatePerSecond\":55.897589409649385,\"onlineTimeSeconds\":27405.000000007887,\"ram\":8,\"totalMoneyGenerated\":1384536.7994765083,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":101,\"moneyGainRatePerSecond\":55.897589409649385,\"onlineTimeSeconds\":27345.000000007607,\"ram\":8,\"totalMoneyGenerated\":1380207.913320316,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":101,\"moneyGainRatePerSecond\":55.897589409649385,\"onlineTimeSeconds\":27285.00000000735,\"ram\":8,\"totalMoneyGenerated\":1375776.5162471808,\"name\":\"hacknet-node-8\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-3762.792500000015,\"numPeopleKilled\":1201,\"location\":\"Travel Agency\",\"money\":691527686.9609985,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":675000000,\"corporation\":0,\"crime\":29887434.7999999,\"gang\":0,\"hacking\":2514947.5629555485,\"hacknet\":12552159.718427107,\"hacknet_expenses\":-7603620.507061734,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":691526573.9609985,\"work\":0,\"servers\":-20624347.612364803,\"other\":-200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":675000000,\"corporation\":0,\"crime\":29887434.7999999,\"gang\":0,\"hacking\":2514947.5629555485,\"hacknet\":12552159.718427107,\"hacknet_expenses\":-7603620.507061734,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":691526573.9609985,\"work\":0,\"servers\":-20624347.612364803,\"other\":-200000,\"augmentations\":0}},\"playtimeSinceLastAug\":28014000,\"playtimeSinceLastBitnode\":28014000,\"lastAugReset\":1701331203714,\"lastNodeReset\":1701331203714,\"purchasedServers\":[\"node-0\",\"node-1\",\"node-2\",\"node-3\",\"node-4\",\"node-5\",\"node-6\",\"node-7\",\"node-8\",\"node-9\",\"node-10\",\"node-11\",\"node-12\",\"node-13\",\"node-14\",\"node-15\",\"node-16\",\"node-17\",\"node-18\",\"node-19\",\"node-20\",\"node-21\",\"node-22\",\"node-23\",\"node-24\"],\"scriptProdSinceLastAug\":2502962.969629671,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,1],[2,1]]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1700338719175},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1700339619175},{\"ID\":\"WORKOUT\",\"unlockedOn\":1700342079172},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1700345744715},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1700346077358},{\"ID\":\"TOR\",\"unlockedOn\":1700347817357},{\"ID\":\"TRAVEL\",\"unlockedOn\":1700348057357},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1700379458941},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1700384318934},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1700409222036},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1700415118310},{\"ID\":\"FROZE\",\"unlockedOn\":1700415885902},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1700419154037},{\"ID\":\"NITESEC\",\"unlockedOn\":1700424074038},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1700426054031},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1700429256501},{\"ID\":\"4S\",\"unlockedOn\":1700500248691},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1700500968683},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1700599162805},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1700655655173},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1700664198439},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1700689338435},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1700775178880},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1700847111216},{\"ID\":\"DONATION\",\"unlockedOn\":1700848851164},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1700869971216},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1700985627342},{\"ID\":\"SF1.1\",\"unlockedOn\":1701071007305},{\"ID\":\"GANG\",\"unlockedOn\":1701122018887},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1701206940124},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1701245393333},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1701270534441},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1701270834453},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1701275155165},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1701286692126},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1701286812133},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1701330737824},{\"ID\":\"SF2.1\",\"unlockedOn\":1701331218627},{\"ID\":\"CORPORATION\",\"unlockedOn\":1701332532638}],\"terminalCommandHistory\":[\"run bot.js -g\",\" buy BruteSSH.exe ;buy FTPCrack.exe ; buy relaySMTP.exe ;buy HTTPWorm.exe ; buy SQLInject.exe\",\"ps\",\"kill 1; run bot.js -u --uh -g -b 1\",\"ps\",\"run kill bot.js\",\"run kill.js bot.js \",\"run bot.js -g\",\"run to-pwn.js \",\" home;connect joesguns;connect nectar-net;connect neo-net;connect johnson-ortho;connect rothman-uni;connect rho-construction;connect snap-fitness;connect deltaone;connect icarus;connect taiyang-digital;connect applied-energetics;connect fulcrumtech;connect .;connect b-and-a;connect The-Cave;connect w0r1d_d43m0n;backdoor; \",\"ls\",\"run bot.js -u --uh -g -b 1\",\"mem bot.js \",\"free\",\"ps\",\"kill 1\",\"run bot.js -u --uh -g -b 1\",\"run to-pwn.js \",\"  home;connect foodnstuff;backdoor; \",\"  home;connect n00dles;backdoor; \",\"home\",\"ls\",\"run kill.js bot.js \",\"run bot.js -u --uh -g -b 0\",\"ls\",\"run kill.js bot.js \",\"run bot.js -u --uh -g -b 1\",\"run find-contracts.js \",\"run to-pwn.js \",\"  home;connect sigma-cosmetics;backdoor; \",\"  home;connect joesguns;backdoor; \",\"  home;connect iron-gym;connect nectar-net;backdoor;\",\"  home;connect hong-fang-tea;backdoor; \",\"  home;connect harakiri-sushi;backdoor; \",\"  home;connect n00dles;connect CSEC;connect neo-net;backdoor; \",\"  home;connect n00dles;connect CSEC;backdoor; \",\"home\",\"run to-pwn.js \",\"  home;connect harakiri-sushi;connect zer0;backdoor; \",\"  home;connect hong-fang-tea;connect max-hardware;backdoor; \",\"  home;connect iron-gym;backdoor; \",\"  home;connect n00dles;connect CSEC;connect phantasy;backdoor; \",\"home\",\"ps\",\"kill bot.js -u --uh -g -b 1; run bot.js \",\"ls\",\"run find-contracts.js \",\"run to-pwn.js \",\"run get-karma.js \",\"run find-contracts.js \"],\"lastUpdate\":1701359217865,\"lastSave\":1701359186467,\"totalPlaytime\":1021224200,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":60676,\"factionWorkType\":\"hacking\",\"factionName\":\"CyberSec\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"183c0fbbe8b548\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"51.2.7.6\",\"isConnectedTo\":true,\"maxRam\":64,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"foodnstuff.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nconst hostname = 'foodnstuff';\\nexport async function main(ns) {\\n  while (true) {\\n    for (let i = 0; i < 5; i++)\\n      await ns.hack(hostname);\\n\\n    await ns.grow(hostname);\\n    for (let i = 0; i < 3; i++)\\n      await ns.weaken(hostname);\\n  }\\n}\",\"filename\":\"foodnstuff.js\",\"server\":\"home\"}}],[\"deploy_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help || args._.length < 1) {\\n\\t\\tns.tprint(\\\"This script deploys hack.js on a server with maximum threads possible.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} HOST`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n  const host = args._[0];\\n  ns.run(\\\"deploy.js\\\", {}, host, \\\"hack.js\\\", host);\\n}\",\"filename\":\"deploy_hack.js\",\"server\":\"home\"}}],[\"template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await template(ns, args, flags);\\r\\n}\\r\\nexport async function template(ns, { host }, { d: depth }) {\\r\\n    console.log(\\\"template\\\");\\r\\n}\\r\\n\",\"filename\":\"template.js\",\"server\":\"home\"}}],[\"weakenall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nconst file = \\\"lib/weaken.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const { d: depth } = flags;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        await deploy(ns, { ...args, host, script: file }, { ...flags });\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"weakenall.js\",\"server\":\"home\"}}],[\"to-pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await toPwn(ns, flags);\\r\\n}\\r\\nexport async function toPwn(ns, { d: depth }) {\\r\\n    const serversToPwn = [];\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host == \\\"home\\\") {\\r\\n            return;\\r\\n        }\\r\\n        const server = ns.getServer(host);\\r\\n        if (!server.requiredHackingSkill) {\\r\\n            return;\\r\\n        }\\r\\n        if (ns.getHackingLevel() < server.requiredHackingSkill) {\\r\\n            return;\\r\\n        }\\r\\n        if (!server.backdoorInstalled && server.hasAdminRights) {\\r\\n            serversToPwn.push({ server, nodes: acc.nodes });\\r\\n        }\\r\\n    }, { excludes: ns.getPurchasedServers() });\\r\\n    serversToPwn\\r\\n        .sort(({ server: serverA }, { server: serverB }) => {\\r\\n        return ((serverB.requiredHackingSkill || 0) -\\r\\n            (serverA.requiredHackingSkill || 0));\\r\\n    })\\r\\n        .forEach((server) => {\\r\\n        ns.tprintf(generateConnect(server.nodes, server.server.hostname));\\r\\n    });\\r\\n}\\r\\nexport function generateConnect(nodes, host) {\\r\\n    return (\\\" home;\\\" +\\r\\n        nodes\\r\\n            .slice(1)\\r\\n            .concat([host])\\r\\n            .map((node) => `connect ${node};`)\\r\\n            .join(\\\"\\\") +\\r\\n        \\\"backdoor; \\\");\\r\\n}\\r\\n\",\"filename\":\"to-pwn.js\",\"server\":\"home\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"home\"}}],[\"trade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await trade(ns, args, flags);\\r\\n}\\r\\nexport async function trade(ns, {}, {}) {\\r\\n    const stock = ns.stock;\\r\\n    const fee = stock.getConstants().StockMarketCommission;\\r\\n    for (;;) {\\r\\n        //TODO\\r\\n        ns.sleep(stock.getConstants().msPerStockUpdate);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"trade.js\",\"server\":\"home\"}}],[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"home\"}}],[\"bot.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { buy } from \\\"/buy\\\";\\r\\nimport { deployall } from \\\"/deployall\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { hasFormulas, validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { ps } from \\\"/ps\\\";\\r\\nimport { upgradeServers } from \\\"./upgrade-servers\\\";\\r\\nimport { maxServers } from \\\"/lib/maxServers\\\";\\r\\nimport { pwn } from \\\"/pwn\\\";\\r\\nimport { killall } from \\\"/killall\\\";\\r\\nimport { ThreadCounts } from \\\"/lib/misc\\\";\\r\\nimport { upgradeHacknet } from \\\"/upgrade-hacknet\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //use home in worker pool\\r\\n    w: false,\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n    //prompt\\r\\n    p: false,\\r\\n    //upgrade nodes\\r\\n    u: false,\\r\\n    //upgrade hacknet nodes\\r\\n    uh: false,\\r\\n    //manage gang\\r\\n    g: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await bot(ns, flags);\\r\\n}\\r\\nconst library = {\\r\\n    specializedHack: \\\"lib/specialized-hack.js\\\",\\r\\n    specializedGrow: \\\"lib/specialized-grow.js\\\",\\r\\n    specializedWeaken: \\\"lib/specialized-weaken.js\\\",\\r\\n};\\r\\nexport async function bot(ns, { w, u, uh, g, ...flags }) {\\r\\n    for (;;) {\\r\\n        /**\\r\\n         * Early game getting the 25 servers\\r\\n         */\\r\\n        await buy(ns, { pool: maxServers, \\\"min-ram\\\": 2, ram: 2 });\\r\\n        /**\\r\\n         * Upgrade\\r\\n         */\\r\\n        if (u)\\r\\n            await upgradeServers(ns, { ...flags });\\r\\n        if (uh)\\r\\n            await upgradeHacknet(ns, { ...flags });\\r\\n        // if (g) await manageGang(ns, { ...flags });\\r\\n        await pwn(ns, { d: defaultDepth, p: false, dl: false });\\r\\n        await walkAllHackableServer(ns, async (data) => {\\r\\n            if (!data.weaken.inProgress && data.weaken.shouldPerform(data)) {\\r\\n                const weakenThreadsCounts = weakenThreads(ns, data);\\r\\n                return await deployall(ns, { script: library.specializedWeaken, target: data.server.hostname }, {\\r\\n                    d: defaultDepth,\\r\\n                    w,\\r\\n                    x: weakenThreadsCounts.threads,\\r\\n                    xh: weakenThreadsCounts.homeThreads,\\r\\n                });\\r\\n            }\\r\\n            return true;\\r\\n        }, async (data) => {\\r\\n            if (!data.grow.inProgress && data.grow.shouldPerform(data)) {\\r\\n                const growThreadsCounts = growThreads(ns, data);\\r\\n                return await deployall(ns, { script: library.specializedGrow, target: data.server.hostname }, {\\r\\n                    d: defaultDepth,\\r\\n                    w,\\r\\n                    x: growThreadsCounts.threads,\\r\\n                    xh: growThreadsCounts.homeThreads,\\r\\n                });\\r\\n            }\\r\\n            return true;\\r\\n        }, async (data) => {\\r\\n            if (!data.hack.inProgress && data.hack.shouldPerform(data)) {\\r\\n                const hackThreadsCounts = hackThreads(ns, data);\\r\\n                //For some reason, it return -1 in some case, I need to understand those\\r\\n                if (hackThreadsCounts.threads >= 0) {\\r\\n                    // await ns.sleep(1);\\r\\n                    return await deployall(ns, { script: library.specializedHack, target: data.server.hostname }, {\\r\\n                        d: defaultDepth,\\r\\n                        w,\\r\\n                        x: hackThreadsCounts.threads,\\r\\n                        xh: hackThreadsCounts.homeThreads,\\r\\n                    });\\r\\n                }\\r\\n                else {\\r\\n                    //Print all kill all workers\\r\\n                    ns.tprint(ns.sprintf(\\\"Could not hackAnalyse %s: %s %s\\\", data.server.hostname, hackThreads, JSON.stringify(data.server)));\\r\\n                    killall(ns, { d: defaultDepth });\\r\\n                    ns.exit();\\r\\n                }\\r\\n            }\\r\\n            return true;\\r\\n        });\\r\\n        if (flags.p && !(await ns.prompt(\\\"Continue?\\\", { type: \\\"boolean\\\" }))) {\\r\\n            ns.exit();\\r\\n        }\\r\\n        await ns.sleep(1e3);\\r\\n    }\\r\\n}\\r\\nasync function walkAllHackableServer(ns, ...callbacks) {\\r\\n    const servers = await allHackableServersSorted(ns, \\\"money-desc\\\");\\r\\n    let shouldContinue = true;\\r\\n    while (servers.length) {\\r\\n        const server = servers.pop();\\r\\n        if (!server)\\r\\n            break;\\r\\n        if (!shouldContinue)\\r\\n            break;\\r\\n        const { hostname } = server;\\r\\n        const processes = (await ps(ns, { d: defaultDepth, p: false })).filter((process) => process.args?.[0] === hostname);\\r\\n        for (const callback of callbacks) {\\r\\n            shouldContinue = await callback({\\r\\n                server,\\r\\n                processes,\\r\\n                weaken: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedWeaken),\\r\\n                    serverMinSecurity: ns.getServerMinSecurityLevel(hostname),\\r\\n                    serverSecurity: ns.getServerSecurityLevel(hostname),\\r\\n                    shouldPerform: (data) => data.weaken.serverSecurity > data.weaken.serverMinSecurity,\\r\\n                },\\r\\n                grow: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedGrow),\\r\\n                    maxMoney: ns.getServerMaxMoney(hostname),\\r\\n                    money: ns.getServerMoneyAvailable(hostname),\\r\\n                    shouldPerform: (data) => data.grow.money < data.grow.maxMoney,\\r\\n                },\\r\\n                hack: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedHack),\\r\\n                    hackChance: ns.hackAnalyzeChance(hostname),\\r\\n                    shouldPerform: (data) => !!data.grow.money && data.hack.hackChance > 0,\\r\\n                },\\r\\n            });\\r\\n            if (!shouldContinue)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\nasync function allHackableServersSorted(ns, order) {\\r\\n    const hosts = [];\\r\\n    await walkDeepFirst(ns, defaultDepth, async (host) => {\\r\\n        hosts.push(host);\\r\\n    });\\r\\n    return hosts\\r\\n        .map(ns.getServer)\\r\\n        .filter((server) => server.hasAdminRights)\\r\\n        .filter((server) => (server.requiredHackingSkill || 0) <= ns.getHackingLevel())\\r\\n        .filter((server) => !!server.moneyMax)\\r\\n        .sort(({ moneyMax: moneyMaxA }, { moneyMax: moneyMaxB }) => order === \\\"money-asc\\\"\\r\\n        ? (moneyMaxB || 0) - (moneyMaxA || 0)\\r\\n        : (moneyMaxA || 0) - (moneyMaxB || 0));\\r\\n}\\r\\nfunction hackThreads(ns, data) {\\r\\n    return new ThreadCounts(Math.ceil(ns.hackAnalyzeThreads(data.server.hostname, data.grow.money * 0.4)), Math.ceil(ns.hackAnalyzeThreads(data.server.hostname, data.grow.money * 0.4)));\\r\\n}\\r\\nfunction weakenThreads(ns, data) {\\r\\n    return new ThreadCounts(getOptimalThreadsToWeaken(ns, data, getHomeCpuCores(ns)), getOptimalThreadsToWeaken(ns, data));\\r\\n}\\r\\nfunction getOptimalThreadsToWeaken(ns, data, cpuCores) {\\r\\n    const { serverSecurity, serverMinSecurity } = data.weaken;\\r\\n    const target = serverSecurity - serverMinSecurity;\\r\\n    let lowerBound = 0, upperBound = 100e3;\\r\\n    let threadCount = 0;\\r\\n    while (lowerBound !== upperBound) {\\r\\n        threadCount = Math.floor((upperBound - lowerBound) / 2 + lowerBound);\\r\\n        const actual = ns.weakenAnalyze(threadCount, cpuCores);\\r\\n        if (actual >= target && actual <= target + 1) {\\r\\n            break;\\r\\n        }\\r\\n        if (actual > target) {\\r\\n            upperBound = threadCount;\\r\\n            continue;\\r\\n        }\\r\\n        if (actual < target) {\\r\\n            lowerBound = threadCount;\\r\\n            continue;\\r\\n        }\\r\\n    }\\r\\n    return threadCount;\\r\\n}\\r\\nfunction growThreads(ns, data) {\\r\\n    const formulasEnabled = hasFormulas(ns);\\r\\n    const cpuCores = getHomeCpuCores(ns);\\r\\n    if (formulasEnabled) {\\r\\n        return new ThreadCounts(ns.formulas.hacking.growThreads(data.server, ns.getPlayer(), data.grow.maxMoney, cpuCores), ns.formulas.hacking.growThreads(data.server, ns.getPlayer(), data.grow.maxMoney));\\r\\n    }\\r\\n    return new ThreadCounts(data.grow.money\\r\\n        ? Math.ceil(ns.growthAnalyze(data.server.hostname, data.grow.maxMoney / data.grow.money, cpuCores))\\r\\n        : 100, data.grow.money\\r\\n        ? Math.ceil(ns.growthAnalyze(data.server.hostname, data.grow.maxMoney / data.grow.money))\\r\\n        : 100);\\r\\n}\\r\\nfunction getHomeCpuCores(ns) {\\r\\n    return ns.getServer(\\\"home\\\").cpuCores;\\r\\n}\\r\\n\",\"filename\":\"bot.js\",\"server\":\"home\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"home\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"home\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"home\"}}],[\"test-contract.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { solve } from \\\"/contracts/solve\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    await template(ns);\\r\\n}\\r\\nconst contractType = \\\"Unique Paths in a Grid I\\\";\\r\\nexport async function template(ns) {\\r\\n    if (!ns\\r\\n        .ls(\\\"home\\\")\\r\\n        .filter((file) => file.endsWith(\\\".cct\\\"))\\r\\n        .map((script) => ns.codingcontract.getContractType(script))\\r\\n        .find((type) => type === contractType))\\r\\n        ns.codingcontract.createDummyContract(contractType);\\r\\n    ns.ls(\\\"home\\\")\\r\\n        .filter((file) => file.endsWith(\\\".cct\\\"))\\r\\n        .forEach((contract) => {\\r\\n        solve(ns, { host: \\\"home\\\", script: contract });\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"test-contract.js\",\"server\":\"home\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"home\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"home\"}}],[\"buy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { maxServers } from \\\"/lib/maxServers\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    pool: maxServers,\\r\\n    \\\"min-ram\\\": 8,\\r\\n    ram: 128,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await buy(ns, flags);\\r\\n}\\r\\nexport async function buy(ns, { pool, \\\"min-ram\\\": minRam, ram: initialRam }) {\\r\\n    const purchase = (ram = initialRam, index = ns.getPurchasedServers().length) => {\\r\\n        if (ram < minRam) {\\r\\n            return;\\r\\n        }\\r\\n        if (ns.getPurchasedServers().length >= pool) {\\r\\n            return;\\r\\n        }\\r\\n        const newHost = ns.purchaseServer(\\\"node-\\\" + index, ram);\\r\\n        if (newHost) {\\r\\n            ns.toast(ns.sprintf(\\\"Purchased %s with %sGB \\\", newHost, ram), \\\"info\\\");\\r\\n            purchase(ram, index + 1);\\r\\n        }\\r\\n        else {\\r\\n            purchase(ram / 2, index);\\r\\n        }\\r\\n    };\\r\\n    purchase();\\r\\n}\\r\\n\",\"filename\":\"buy.js\",\"server\":\"home\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"home\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"home\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"home\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"home\"}}],[\"contracts/solve.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { lineHeader } from \\\"/lib/misc\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    script: \\\"contract-XX.cct\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await solve(ns, args);\\r\\n}\\r\\nexport async function solve(ns, { host, script }) {\\r\\n    const contractDefinition = types[ns.codingcontract.getContractType(script, host)];\\r\\n    if (contractDefinition.solvable) {\\r\\n        if (!contractDefinition.solve(ns, script, host, ns.codingcontract.getData(script, host))) {\\r\\n            const errorMessage = ns.sprintf(\\\"Failed to solve %s on %s\\\", script, host);\\r\\n            ns.toast(errorMessage, \\\"error\\\");\\r\\n            ns.tprint(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction attemp(ns, script, host, data, solution) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(\\\"%s: %s (%s)\\\", host, script, ns.codingcontract.getContractType(script, host));\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    const reward = ns.codingcontract.attempt(solution, script, host);\\r\\n    if (reward) {\\r\\n        const message = `Contract solved successfully! Reward: ${reward}`;\\r\\n        ns.toast(message, \\\"success\\\");\\r\\n        ns.tprint(message);\\r\\n        return true;\\r\\n    }\\r\\n    else {\\r\\n        const message = \\\"Failed to solve contract\\\";\\r\\n        ns.toast(message, \\\"error\\\");\\r\\n        ns.tprint(message);\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\nconst types = {\\r\\n    \\\"Find Largest Prime Factor\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, primeFactor(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Subarray with Maximum Sum\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, findMaxSubArraySum(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Total Ways to Sum\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, countCompose(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Total Ways to Sum II\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, countComposeRestricted(data[0], data[1]));\\r\\n        },\\r\\n    },\\r\\n    \\\"Spiralize Matrix\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Array Jumping Game\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Array Jumping Game II\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, countJumps(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Merge Overlapping Intervals\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Generate IP Addresses\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, parseIp(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Algorithmic Stock Trader I\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, maxTxProfit(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Algorithmic Stock Trader II\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Algorithmic Stock Trader III\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            const prices = data;\\r\\n            let max = maxTxProfit(prices);\\r\\n            for (let i = 1; i < prices.length - 1; i++) {\\r\\n                max = Math.max(max, maxTxProfit(prices.slice(0, i + 1)) +\\r\\n                    maxTxProfit(prices.slice(i + 1, prices.length)));\\r\\n            }\\r\\n            return attemp(ns, script, host, data, max);\\r\\n        },\\r\\n    },\\r\\n    \\\"Algorithmic Stock Trader IV\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Minimum Path Sum in a Triangle\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, TriangleMinSum(data, 0, 0));\\r\\n        },\\r\\n    },\\r\\n    \\\"Unique Paths in a Grid I\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, walkDownFirst(createAndFillTwoDArray(data[0], data[1], () => 0), 0, 0));\\r\\n        },\\r\\n    },\\r\\n    \\\"Unique Paths in a Grid II\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, walkDownFirst(data, 0, 0));\\r\\n        },\\r\\n    },\\r\\n    \\\"Shortest Path in a Grid\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Sanitize Parentheses in Expression\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            let solutions = [];\\r\\n            let depth = 1;\\r\\n            do {\\r\\n                solutions = parenthesisSolutions(data, new Set(), depth++);\\r\\n            } while (!solutions.length);\\r\\n            solutions = [...new Set(solutions)];\\r\\n            return attemp(ns, script, host, data, solutions);\\r\\n        },\\r\\n    },\\r\\n    \\\"Find All Valid Math Expressions\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"HammingCodes: Integer to Encoded Binary\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, HammingEncode(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"HammingCodes: Encoded Binary to Integer\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Proper 2-Coloring of a Graph\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, \\r\\n            // tryColorGraph(toMapOfVertice((data as any)[1] as number[][]), [])\\r\\n            tryColorGraphV2(data[0], toMapOfVertice(data[1])));\\r\\n        },\\r\\n    },\\r\\n    \\\"Compression I: RLE Compression\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Compression II: LZ Decompression\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Compression III: LZ Compression\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Encryption I: Caesar Cipher\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            const [text, rotation] = data;\\r\\n            return attemp(ns, script, host, data, CaesarCipher(text, rotation));\\r\\n        },\\r\\n    },\\r\\n    \\\"Encryption II: Vigenère Cipher\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n};\\r\\nfunction createAndFillTwoDArray(rows, cols, valueProvider) {\\r\\n    return Array.from({ length: rows }, () => Array.from({ length: cols }, valueProvider));\\r\\n}\\r\\nfunction countJumps(data) {\\r\\n    const n = data.length;\\r\\n    let reach = 0;\\r\\n    let jumps = 0;\\r\\n    let lastJump = -1;\\r\\n    while (reach < n - 1) {\\r\\n        let jumpedFrom = -1;\\r\\n        for (let i = reach; i > lastJump; i--) {\\r\\n            if (i + data[i] > reach) {\\r\\n                reach = i + data[i];\\r\\n                jumpedFrom = i;\\r\\n            }\\r\\n        }\\r\\n        if (jumpedFrom === -1) {\\r\\n            jumps = 0;\\r\\n            break;\\r\\n        }\\r\\n        lastJump = jumpedFrom;\\r\\n        jumps++;\\r\\n    }\\r\\n    return jumps;\\r\\n}\\r\\nfunction countComposeRestricted(integer, dataset) {\\r\\n    const composition = new Array(integer + 1).fill(0);\\r\\n    composition[0] = 1;\\r\\n    for (let i = 0; i < dataset.length; i++) {\\r\\n        for (let j = dataset[i]; j <= integer; j++) {\\r\\n            composition[j] += composition[j - dataset[i]];\\r\\n        }\\r\\n    }\\r\\n    return composition[integer];\\r\\n}\\r\\nfunction countCompose(integer) {\\r\\n    const composition = new Array(integer + 1).fill(0);\\r\\n    composition[0] = 1;\\r\\n    for (let i = 1; i < integer; i++) {\\r\\n        for (let j = i; j <= integer; j++) {\\r\\n            composition[j] = composition[j] + composition[j - i];\\r\\n        }\\r\\n    }\\r\\n    return composition[integer];\\r\\n}\\r\\nfunction isFinished(data, i, j) {\\r\\n    return data.length === i + 1 && data[i].length === j + 1;\\r\\n}\\r\\nfunction canMoveRight(data, i, j) {\\r\\n    return data[i].length > j + 1 && data[i][j + 1] !== 1;\\r\\n}\\r\\nfunction canMoveDown(data, i, j) {\\r\\n    return data.length > i + 1 && data[i + 1][j] !== 1;\\r\\n}\\r\\nfunction walkDownFirst(data, i, j) {\\r\\n    if (isFinished(data, i, j)) {\\r\\n        return 1;\\r\\n    }\\r\\n    let count = 0;\\r\\n    if (canMoveDown(data, i, j)) {\\r\\n        count += walkDownFirst(data, i + 1, j);\\r\\n    }\\r\\n    if (canMoveRight(data, i, j)) {\\r\\n        count += walkDownFirst(data, i, j + 1);\\r\\n    }\\r\\n    return count;\\r\\n}\\r\\nfunction maxTxProfit(prices) {\\r\\n    let max = 0;\\r\\n    for (let i = 0; i < prices.length - 1; i++) {\\r\\n        for (let j = i; j < prices.length; j++) {\\r\\n            max = Math.max(max, prices[j] - prices[i]);\\r\\n        }\\r\\n    }\\r\\n    return max;\\r\\n}\\r\\nfunction isValidIp(ip) {\\r\\n    const splitted = ip.split(\\\".\\\").filter((value) => !!value);\\r\\n    if (splitted.length != 4)\\r\\n        return false;\\r\\n    return !splitted.find((value) => ((Number.parseInt(value) != 0 || value.length > 1) &&\\r\\n        value.startsWith(\\\"0\\\")) ||\\r\\n        Number.parseInt(value) > 255);\\r\\n}\\r\\nfunction parseIp(ip) {\\r\\n    const validIps = [];\\r\\n    for (let i = 1; i < 4; i++) {\\r\\n        for (let j = 1; j < 4; j++) {\\r\\n            for (let k = 1; k < 4; k++) {\\r\\n                const a1 = ip.substring(0, i);\\r\\n                const a2 = ip.substring(i, i + j);\\r\\n                const a3 = ip.substring(i + j, i + j + k);\\r\\n                const a4 = ip.substring(i + j + k, ip.length);\\r\\n                const candidate = `${a1}.${a2}.${a3}.${a4}`;\\r\\n                if (isValidIp(candidate))\\r\\n                    validIps.push(candidate);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return validIps;\\r\\n}\\r\\nfunction primeFactor(integer) {\\r\\n    for (let i = 2; i < Math.sqrt(integer) + 1; i++) {\\r\\n        const factor = integer / i;\\r\\n        if (Number.isInteger(factor)) {\\r\\n            return primeFactor(factor);\\r\\n        }\\r\\n    }\\r\\n    return integer;\\r\\n}\\r\\nfunction sumArray(array) {\\r\\n    return array.reduce((acc, value) => acc + value, 0);\\r\\n}\\r\\nfunction findMaxSubArraySum(array) {\\r\\n    let currentMax = sumArray(array);\\r\\n    for (let i = 0; i < array.length - 1; i++) {\\r\\n        for (let j = array.length; j > i; j--) {\\r\\n            currentMax = Math.max(sumArray(array.slice(i, j)), currentMax);\\r\\n        }\\r\\n    }\\r\\n    return currentMax;\\r\\n}\\r\\nfunction tryColorGraphV2(count, data) {\\r\\n    const defaultColor = -1;\\r\\n    const tryColorIn = 1;\\r\\n    const solution = new Array(count).fill(defaultColor);\\r\\n    const checklist = [];\\r\\n    checklist.push({ vertix: 0, color: tryColorIn });\\r\\n    while (checklist.length) {\\r\\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\\r\\n        const { vertix, color } = checklist.pop();\\r\\n        solution[vertix] = color;\\r\\n        for (const neighbor of data[vertix] || []) {\\r\\n            if (solution[neighbor] === color)\\r\\n                return [];\\r\\n            if (solution[neighbor] === defaultColor)\\r\\n                checklist.push({ vertix: neighbor, color: (color + 1) % 2 });\\r\\n        }\\r\\n        if (!checklist.length) {\\r\\n            const vertixToPush = solution\\r\\n                .map((value, index) => ({ value, index }))\\r\\n                .find(({ value }) => value === defaultColor)?.index;\\r\\n            if (vertixToPush != undefined)\\r\\n                checklist.push({ vertix: vertixToPush, color: tryColorIn });\\r\\n        }\\r\\n    }\\r\\n    return solution;\\r\\n}\\r\\nfunction tryColorGraph(data, acc, vertix = 0, color = 0) {\\r\\n    //Bugged, need to figure it out. Cleaning of acc does not bubble up\\r\\n    if (acc[vertix] !== undefined && acc[vertix] !== color) {\\r\\n        return [];\\r\\n    }\\r\\n    acc[vertix] = color;\\r\\n    if (data[vertix] === undefined) {\\r\\n        return acc;\\r\\n    }\\r\\n    for (const neighbor of data[vertix]) {\\r\\n        const result = tryColorGraph(data, acc, neighbor, (color + 1) % 2);\\r\\n        if (!result.length) {\\r\\n            delete acc[vertix];\\r\\n            return [];\\r\\n        }\\r\\n    }\\r\\n    return acc;\\r\\n}\\r\\nfunction toMapOfVertice(data) {\\r\\n    return data.reduce((acc, [n1, n2]) => {\\r\\n        acc[n1] = acc[n1] || [];\\r\\n        acc[n2] = acc[n2] || [];\\r\\n        acc[n1] = acc[n1].concat([n2]);\\r\\n        acc[n2] = acc[n2].concat([n1]);\\r\\n        return acc;\\r\\n    }, {});\\r\\n}\\r\\nfunction isValidParenthesis(text) {\\r\\n    let opened = 0;\\r\\n    for (const char of [...text]) {\\r\\n        if (char === \\\"(\\\")\\r\\n            opened++;\\r\\n        if (char === \\\")\\\")\\r\\n            opened--;\\r\\n        if (opened < 0)\\r\\n            return false;\\r\\n    }\\r\\n    return opened === 0;\\r\\n}\\r\\nfunction parenthesisSolutions(text, acc, depth) {\\r\\n    if (depth === 0)\\r\\n        return [];\\r\\n    if (acc.has(text)) {\\r\\n        return [];\\r\\n    }\\r\\n    acc.add(text);\\r\\n    if (isValidParenthesis(text) || !text) {\\r\\n        return [text || \\\"\\\"];\\r\\n    }\\r\\n    if (text.startsWith(\\\")\\\")) {\\r\\n        return parenthesisSolutions(text.substring(1), acc, depth - 1);\\r\\n    }\\r\\n    return [...text]\\r\\n        .map((value, index) => {\\r\\n        return parenthesisSolutions([...text]\\r\\n            .slice(0, index)\\r\\n            .concat([...text].slice(index + 1, text.length))\\r\\n            .join(\\\"\\\"), acc, depth - 1);\\r\\n    })\\r\\n        .reduce((acc, value) => {\\r\\n        return acc.concat(value);\\r\\n    }, []);\\r\\n}\\r\\nfunction TriangleMinSum(triangle, i, j) {\\r\\n    if (i >= triangle.length || j >= triangle[i].length) {\\r\\n        return 0;\\r\\n    }\\r\\n    const value = triangle[i][j];\\r\\n    const left = value + TriangleMinSum(triangle, i + 1, j);\\r\\n    const right = value + TriangleMinSum(triangle, i + 1, j + 1);\\r\\n    return Math.min(left, right);\\r\\n}\\r\\nfunction CaesarCipher(text, rotation) {\\r\\n    // A: 65 .... Z: 90\\r\\n    const AcharCode = \\\"A\\\".charCodeAt(0);\\r\\n    const spaceCode = \\\" \\\".charCodeAt(0);\\r\\n    return [...text]\\r\\n        .map((char) => (char === \\\" \\\" ? spaceCode : char.charCodeAt(0) - rotation))\\r\\n        .map((charCode) => charCode === spaceCode\\r\\n        ? spaceCode\\r\\n        : charCode < AcharCode\\r\\n            ? charCode + 26\\r\\n            : charCode)\\r\\n        .map((charCode) => String.fromCharCode(charCode))\\r\\n        .join(\\\"\\\");\\r\\n}\\r\\n//Shamefully stolen from https://github.com/bitburner-official/bitburner-src/blob/6a76e1a9ab58d9b6f103c90793307c61a668334f/src/utils/HammingCodeTools.ts could not figure it out myself\\r\\nfunction HammingEncode(data) {\\r\\n    const enc = [0];\\r\\n    const data_bits = data.toString(2).split(\\\"\\\").reverse();\\r\\n    data_bits.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    let k = data_bits.length;\\r\\n    /* NOTE: writing the data like this flips the endianness, this is what the\\r\\n     * original implementation by Hedrauta did so I'm keeping it like it was. */\\r\\n    for (let i = 1; k > 0; i++) {\\r\\n        if ((i & (i - 1)) != 0) {\\r\\n            enc[i] = data_bits[--k];\\r\\n        }\\r\\n        else {\\r\\n            enc[i] = 0;\\r\\n        }\\r\\n    }\\r\\n    let parity = 0;\\r\\n    /* Figure out the subsection parities */\\r\\n    for (let i = 0; i < enc.length; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity ^= i;\\r\\n        }\\r\\n    }\\r\\n    parity = parity.toString(2).split(\\\"\\\").reverse();\\r\\n    parity.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    /* Set the parity bits accordingly */\\r\\n    for (let i = 0; i < parity.length; i++) {\\r\\n        enc[2 ** i] = parity[i] ? 1 : 0;\\r\\n    }\\r\\n    parity = 0;\\r\\n    /* Figure out the overall parity for the entire block */\\r\\n    for (let i = 0; i < enc.length; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity++;\\r\\n        }\\r\\n    }\\r\\n    /* Finally set the overall parity bit */\\r\\n    enc[0] = parity % 2 == 0 ? 0 : 1;\\r\\n    return enc.join(\\\"\\\");\\r\\n}\\r\\nfunction HammingEncodeProperly(data) {\\r\\n    /* How many bits do we need?\\r\\n     * n = 2^m\\r\\n     * k = 2^m - m - 1\\r\\n     * where k is the number of data bits, m the number\\r\\n     * of parity bits and n the number of total bits. */\\r\\n    let m = 1;\\r\\n    while (2 ** (2 ** m - m - 1) - 1 < data) {\\r\\n        m++;\\r\\n    }\\r\\n    const n = 2 ** m;\\r\\n    const k = 2 ** m - m - 1;\\r\\n    const enc = [0];\\r\\n    const data_bits = data.toString(2).split(\\\"\\\").reverse();\\r\\n    data_bits.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    /* Flip endianness as in the original implementation by Hedrauta\\r\\n     * and write the data back to front\\r\\n     * XXX why do we do this? */\\r\\n    for (let i = 1, j = k; i < n; i++) {\\r\\n        if ((i & (i - 1)) != 0) {\\r\\n            enc[i] = data_bits[--j] ? data_bits[j] : 0;\\r\\n        }\\r\\n    }\\r\\n    let parity = 0;\\r\\n    /* Figure out the subsection parities */\\r\\n    for (let i = 0; i < n; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity ^= i;\\r\\n        }\\r\\n    }\\r\\n    parity = parity.toString(2).split(\\\"\\\").reverse();\\r\\n    parity.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    /* Set the parity bits accordingly */\\r\\n    for (let i = 0; i < m; i++) {\\r\\n        enc[2 ** i] = parity[i] ? 1 : 0;\\r\\n    }\\r\\n    parity = 0;\\r\\n    /* Figure out the overall parity for the entire block */\\r\\n    for (let i = 0; i < n; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity++;\\r\\n        }\\r\\n    }\\r\\n    /* Finally set the overall parity bit */\\r\\n    enc[0] = parity % 2 == 0 ? 0 : 1;\\r\\n    return enc.join(\\\"\\\");\\r\\n}\\r\\nfunction HammingDecode(data) {\\r\\n    let err = 0;\\r\\n    const bits = [];\\r\\n    /* TODO why not just work with an array of digits from the start? */\\r\\n    for (const i in data.split(\\\"\\\")) {\\r\\n        const bit = parseInt(data[i]);\\r\\n        bits[i] = bit;\\r\\n        if (bit) {\\r\\n            err ^= +i;\\r\\n        }\\r\\n    }\\r\\n    /* If err != 0 then it spells out the index of the bit that was flipped */\\r\\n    if (err) {\\r\\n        /* Flip to correct */\\r\\n        bits[err] = bits[err] ? 0 : 1;\\r\\n    }\\r\\n    /* Now we have to read the message, bit 0 is unused (it's the overall parity bit\\r\\n     * which we don't care about). Each bit at an index that is a power of 2 is\\r\\n     * a parity bit and not part of the actual message. */\\r\\n    let ans = \\\"\\\";\\r\\n    for (let i = 1; i < bits.length; i++) {\\r\\n        /* i is not a power of two so it's not a parity bit */\\r\\n        if ((i & (i - 1)) != 0) {\\r\\n            ans += bits[i];\\r\\n        }\\r\\n    }\\r\\n    /* TODO to avoid ambiguity about endianness why not let the player return the extracted (and corrected)\\r\\n     * data bits, rather than guessing at how to convert it to a decimal string? */\\r\\n    return parseInt(ans, 2);\\r\\n}\\r\\n\",\"filename\":\"contracts/solve.js\",\"server\":\"home\"}}],[\"deployall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy as _deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { ThreadCounts } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/specialized-hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n    // max home threads\\r\\n    xh: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deployall(ns, args, flags);\\r\\n}\\r\\nexport async function deployall(ns, { script, ...args }, { d: depth, x: maxThreads, xh: maxHomeThreads, ...flags }, ...scriptArgs) {\\r\\n    const threadRemaining = new ThreadCounts(maxHomeThreads, maxThreads);\\r\\n    if (!threadRemaining.isEmpty())\\r\\n        await walkDeepFirst(ns, depth, async (host) => {\\r\\n            if (threadRemaining.isEmpty()) {\\r\\n                return;\\r\\n            }\\r\\n            const startedThreads = await _deploy(ns, { ...args, host, script }, { ...flags, x: threadRemaining.getThreadCount(host) }, ...scriptArgs);\\r\\n            threadRemaining.removeThreads(startedThreads, host);\\r\\n        });\\r\\n    return threadRemaining.isEmpty();\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return [...data.servers, ...data.scripts];\\r\\n}\\r\\n\",\"filename\":\"deployall.js\",\"server\":\"home\"}}],[\"ps.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n    //print\\r\\n    p: true,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await ps(ns, flags);\\r\\n}\\r\\nexport async function ps(ns, { d: depth, p: print }) {\\r\\n    const processes = [];\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        processes.push(...ns.ps(host).map((process) => ({ ...process, host })));\\r\\n    });\\r\\n    const linePattern = \\\"%s %s %s %s\\\";\\r\\n    const fileNamePadding = 20;\\r\\n    const threadPadding = 4;\\r\\n    const argsPadding = 30;\\r\\n    const hostsPadding = 30;\\r\\n    if (print) {\\r\\n        ns.tprintf(linePattern, \\\"Filename\\\".padEnd(fileNamePadding), \\\"T\\\".padEnd(threadPadding), \\\"...Args\\\".padEnd(argsPadding), \\\"...hosts\\\".padEnd(hostsPadding));\\r\\n        ns.tprintf(\\\"-\\\".padStart(fileNamePadding + threadPadding + argsPadding + hostsPadding, \\\"-\\\"));\\r\\n    }\\r\\n    const consolidated = processes.reduce((acc, { host, ...process }) => {\\r\\n        const accProcess = acc.find((accProcess) => process.filename === accProcess.filename &&\\r\\n            process.args.join() === accProcess.args.join());\\r\\n        if (!accProcess)\\r\\n            acc.push({ ...process, hosts: [host] });\\r\\n        else {\\r\\n            accProcess.hosts.push(host);\\r\\n            accProcess.threads += process.threads;\\r\\n        }\\r\\n        return acc;\\r\\n    }, []);\\r\\n    if (print)\\r\\n        consolidated.forEach((process) => {\\r\\n            ns.tprintf(linePattern, process.filename.padEnd(fileNamePadding), process.threads.toString().padEnd(threadPadding), `[${process.args.join(\\\"] [\\\")}]`.padEnd(argsPadding), `[${process.hosts.join(\\\"] [\\\")}]`.padEnd(hostsPadding));\\r\\n        });\\r\\n    return consolidated;\\r\\n}\\r\\n\",\"filename\":\"ps.js\",\"server\":\"home\"}}],[\"pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { analyze } from \\\"/lib/analyze\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { getAvailableExes } from \\\"/lib/getAvailableExes\\\";\\r\\nimport { scpExtensions } from \\\"/lib/misc\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    dl: false,\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    //print\\r\\n    p: true,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await pwn(ns, flags);\\r\\n}\\r\\nexport async function pwn(ns, { d: depth, p: print, dl }) {\\r\\n    const availablesPwn = getAvailableExes(ns);\\r\\n    const run = (name, cmd, host) => print ? ns.tprintf(\\\"%s:\\\\t\\\\t\\\\t%s\\\", name, cmd(host)) : cmd(host);\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        ns.printf(\\\"%s\\\", host);\\r\\n        /**Gain root access */\\r\\n        if (!ns.hasRootAccess(host) &&\\r\\n            ns.getServerNumPortsRequired(host) < availablesPwn.length) {\\r\\n            availablesPwn.forEach((availablePwn) => run(availablePwn.name, availablePwn.fn, host));\\r\\n        }\\r\\n        /** download all files located on server that does not already exist */\\r\\n        if (dl)\\r\\n            ns.ls(host)\\r\\n                .filter((file) => !ns.fileExists(file))\\r\\n                .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension))\\r\\n                .length)\\r\\n                .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n                .forEach((file) => ns.scp(file, \\\"home\\\", host));\\r\\n        if (print)\\r\\n            analyze(ns, acc.nodes.concat([host]).join(\\\" -> \\\"), host);\\r\\n    }, { excludes: ns.getPurchasedServers() });\\r\\n}\\r\\n\",\"filename\":\"pwn.js\",\"server\":\"home\"}}],[\"killall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await killall(ns, flags);\\r\\n}\\r\\nexport async function killall(ns, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        ns.killall(host);\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"killall.js\",\"server\":\"home\"}}],[\"find-contracts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { newLine } from \\\"/lib/misc\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { generateConnect } from \\\"/to-pwn\\\";\\r\\nimport { solve } from \\\"/contracts/solve\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await findContract(ns, flags);\\r\\n}\\r\\nexport async function findContract(ns, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        const contracts = ns.ls(host).filter((file) => file.endsWith(\\\".cct\\\"));\\r\\n        if (contracts.length) {\\r\\n            ns.tprintf(generateConnect(acc.nodes, host));\\r\\n            ns.tprintf(contracts\\r\\n                .map((contract) => `${contract} (${ns.codingcontract.getContractType(contract, host)})`)\\r\\n                .join(\\\", \\\"));\\r\\n            ns.tprintf(newLine);\\r\\n            for (const script of contracts) {\\r\\n                await solve(ns, { host, script });\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"find-contracts.js\",\"server\":\"home\"}}],[\"growall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nconst file = \\\"lib/grow.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const { d: depth } = flags;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        await deploy(ns, { ...args, host, script: file }, { ...flags });\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"growall.js\",\"server\":\"home\"}}],[\"hackall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n    //hack chance threshold\\r\\n    c: 0.9,\\r\\n};\\r\\nconst file = \\\"lib/hack.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const { d: depth, x: maxThreads, c } = flags;\\r\\n    let threadRemaining = maxThreads;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        if (threadRemaining === 0) {\\r\\n            return;\\r\\n        }\\r\\n        if (threadRemaining < 0) {\\r\\n            throw new Error();\\r\\n        }\\r\\n        const startedThreads = await deploy(ns, { ...args, host, script: file }, { ...flags, x: threadRemaining }, \\\"-c\\\", c);\\r\\n        threadRemaining = threadRemaining - startedThreads;\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"hackall.js\",\"server\":\"home\"}}],[\"kill.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    script: \\\"lib/weaken.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const depth = flags.d;\\r\\n    const { script } = args;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        ns.ps(host)\\r\\n            .filter((process) => process.filename === script)\\r\\n            .forEach((process) => ns.kill(process.pid));\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.scripts;\\r\\n}\\r\\n\",\"filename\":\"kill.js\",\"server\":\"home\"}}],[\"scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n    m: true,\\r\\n    s: true,\\r\\n};\\r\\nconst indent = 1;\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await scan(ns, flags);\\r\\n}\\r\\nexport async function scan(ns, { d: depth, m: moneyEnabled, s: securityEnabled }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        const padding = \\\"\\\".padEnd(acc.depth * indent);\\r\\n        const paddingInverted = \\\"\\\".padEnd((30 - acc.depth) * indent);\\r\\n        const server = ns.getServer(host);\\r\\n        ns.tprintf(\\\"%s┣ %s\\\", padding, host);\\r\\n        const money = server.moneyAvailable || 0;\\r\\n        const maxMoney = server.moneyMax || 0;\\r\\n        if (moneyEnabled && maxMoney) {\\r\\n            const line = \\\"%s┃%sm_avail=%-10s\\\\tm_max=%-10s\\\\tm_ratio=%-10s\\\";\\r\\n            ns.tprintf(line, padding, paddingInverted, ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        }\\r\\n        if (securityEnabled) {\\r\\n            const line = \\\"%s┃%sminSec=%-10s\\\\tsecurity=%-.10s\\\\tmin_hack=%-10s\\\";\\r\\n            ns.tprintf(line, padding, paddingInverted, server.minDifficulty, server.hackDifficulty?.toFixed(2).padEnd(10), server.requiredHackingSkill);\\r\\n        }\\r\\n    }, {\\r\\n        excludes: ns.getPurchasedServers(),\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"scan.js\",\"server\":\"home\"}}],[\"shrinkall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nconst file = \\\"lib/shrink.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const { d: depth } = flags;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        await deploy(ns, { ...args, host, script: file }, { ...flags });\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"shrinkall.js\",\"server\":\"home\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"home\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"home\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"home\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"home\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"home\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"home\"}}],[\"contracts/contract-134441.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-134441.cct\\\";\\r\\nconst host = \\\"zer0\\\";\\r\\nconst prices = [\\r\\n    109, 134, 48, 16, 63, 186, 178, 81, 140, 156, 177, 91, 61, 13, 46, 102, 51,\\r\\n    149, 111, 160, 57, 78, 142, 188, 195, 178, 173, 133, 49, 129, 117, 44, 61,\\r\\n    104, 58, 97, 88, 24, 104,\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const calc = (prices) => {\\r\\n        let max = 0;\\r\\n        for (let i = 0; i < prices.length - 1; i++) {\\r\\n            for (let j = i; j < prices.length; j++) {\\r\\n                max = Math.max(max, prices[j] - prices[i]);\\r\\n            }\\r\\n        }\\r\\n        return max;\\r\\n    };\\r\\n    let max = calc(prices);\\r\\n    for (let i = 1; i < prices.length - 1; i++) {\\r\\n        max = Math.max(max, calc(prices.slice(0, i + 1)) + calc(prices.slice(i + 1, prices.length)));\\r\\n    }\\r\\n    ns.tprintf(\\\"solution: %s\\\", max);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(max, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-134441.js\",\"server\":\"home\"}}],[\"contracts/contract-2410.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-2410.cct\\\";\\r\\nconst host = \\\"foodnstuff\\\";\\r\\nconst data = 14806590036;\\r\\nconst data2 = \\\"pppdpdddpd\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    const controlBitIndexes = [...data2]\\r\\n        .map((value, index) => (value === \\\"p\\\" ? index + 1 : -1))\\r\\n        .filter((value) => value > 0);\\r\\n    const solution = HammingEncode(data);\\r\\n    // setConfig({pow:4}).encode()\\r\\n    ns.tprintf(\\\"debug: %s\\\", controlBitIndexes);\\r\\n    ns.tprintf(\\\"debug: %s\\\", \\\"8 -> 1000 -> 11110000\\\");\\r\\n    ns.tprintf(\\\"debug: %s\\\", HammingEncode(8));\\r\\n    ns.tprintf(\\\"debug: %s\\\", \\\"21 -> 10101 -> 1001101011\\\");\\r\\n    ns.tprintf(\\\"debug: %s\\\", HammingEncode(21));\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\nfunction HammingEncode(data) {\\r\\n    const enc = [0];\\r\\n    const data_bits = data.toString(2).split(\\\"\\\").reverse();\\r\\n    data_bits.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    let k = data_bits.length;\\r\\n    /* NOTE: writing the data like this flips the endianness, this is what the\\r\\n     * original implementation by Hedrauta did so I'm keeping it like it was. */\\r\\n    for (let i = 1; k > 0; i++) {\\r\\n        if ((i & (i - 1)) != 0) {\\r\\n            enc[i] = data_bits[--k];\\r\\n        }\\r\\n        else {\\r\\n            enc[i] = 0;\\r\\n        }\\r\\n    }\\r\\n    let parity = 0;\\r\\n    /* Figure out the subsection parities */\\r\\n    for (let i = 0; i < enc.length; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity ^= i;\\r\\n        }\\r\\n    }\\r\\n    parity = parity.toString(2).split(\\\"\\\").reverse();\\r\\n    parity.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    /* Set the parity bits accordingly */\\r\\n    for (let i = 0; i < parity.length; i++) {\\r\\n        enc[2 ** i] = parity[i] ? 1 : 0;\\r\\n    }\\r\\n    parity = 0;\\r\\n    /* Figure out the overall parity for the entire block */\\r\\n    for (let i = 0; i < enc.length; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity++;\\r\\n        }\\r\\n    }\\r\\n    /* Finally set the overall parity bit */\\r\\n    enc[0] = parity % 2 == 0 ? 0 : 1;\\r\\n    return enc.join(\\\"\\\");\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-2410.js\",\"server\":\"home\"}}],[\"contracts/contract-40081.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-40081.cct\\\";\\r\\nconst host = \\\"joesguns\\\";\\r\\nconst data = [\\\"ARRAY QUEUE MACRO VIRUS CACHE\\\", 8];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = cipher(data[0], data[1]);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\nfunction cipher(text, rotation) {\\r\\n    // A: 65 .... Z: 90\\r\\n    const AcharCode = \\\"A\\\".charCodeAt(0);\\r\\n    const spaceCode = \\\" \\\".charCodeAt(0);\\r\\n    return [...text]\\r\\n        .map((char) => (char === \\\" \\\" ? spaceCode : char.charCodeAt(0) - rotation))\\r\\n        .map((charCode) => charCode === spaceCode\\r\\n        ? spaceCode\\r\\n        : charCode < AcharCode\\r\\n            ? charCode + 26\\r\\n            : charCode)\\r\\n        .map((charCode) => String.fromCharCode(charCode))\\r\\n        .join(\\\"\\\");\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-40081.js\",\"server\":\"home\"}}],[\"contracts/template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-XX.cct\\\";\\r\\nconst host = \\\"zer0\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const data = ns.codingcontract.getData(name, host);\\r\\n    const solution = 0;\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/template.js\",\"server\":\"home\"}}],[\"contracts/contract-634177.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-634177.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = [\\r\\n    [6],\\r\\n    [6, 4],\\r\\n    [2, 4, 3],\\r\\n    [4, 2, 3, 3], //\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction minBranch(triangle, i, j) {\\r\\n    if (i >= triangle.length || j >= triangle[i].length) {\\r\\n        return 0;\\r\\n    }\\r\\n    const value = triangle[i][j];\\r\\n    const left = value + minBranch(triangle, i + 1, j);\\r\\n    const right = value + minBranch(triangle, i + 1, j + 1);\\r\\n    return Math.min(left, right);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = minBranch(data, 0, 0);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-634177.js\",\"server\":\"home\"}}],[\"contracts/contract-276203.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-276203.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = \\\"((()(((aa()))()\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction isValid(text) {\\r\\n    let opened = 0;\\r\\n    for (const char of [...text]) {\\r\\n        if (char === \\\"(\\\")\\r\\n            opened++;\\r\\n        if (char === \\\")\\\")\\r\\n            opened--;\\r\\n        if (opened < 0)\\r\\n            return false;\\r\\n    }\\r\\n    return opened === 0;\\r\\n}\\r\\nfunction parenthesisSolutions(text, depth) {\\r\\n    if (depth === 0)\\r\\n        return [];\\r\\n    if (isValid(text) || !text) {\\r\\n        return [text || \\\"\\\"];\\r\\n    }\\r\\n    if (text.length < 2) {\\r\\n        return [\\\"\\\"];\\r\\n    }\\r\\n    return [...text]\\r\\n        .map((value, index) => parenthesisSolutions([...text]\\r\\n        .slice(0, index)\\r\\n        .concat([...text].slice(index + 1, text.length))\\r\\n        .join(\\\"\\\"), depth - 1))\\r\\n        .reduce((acc, value) => {\\r\\n        return acc.concat(value);\\r\\n    }, []);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    let solutions = [];\\r\\n    let depth = 1;\\r\\n    do {\\r\\n        solutions = parenthesisSolutions(data, depth++);\\r\\n    } while (!solutions.length);\\r\\n    solutions = [...new Set(solutions)];\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solutions);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solutions, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-276203.js\",\"server\":\"home\"}}],[\"contracts/contract-57834.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-57834.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = [\\r\\n    12,\\r\\n    [\\r\\n        [1, 8],\\r\\n        [3, 10],\\r\\n        [3, 6],\\r\\n        [3, 9],\\r\\n        [0, 1],\\r\\n        [9, 11],\\r\\n        [7, 10],\\r\\n        [0, 5],\\r\\n        [6, 7],\\r\\n        [2, 8],\\r\\n        [7, 8],\\r\\n        [0, 3],\\r\\n        [2, 6],\\r\\n        [1, 11],\\r\\n        [4, 9],\\r\\n        [1, 9],\\r\\n        [4, 10],\\r\\n        [7, 11],\\r\\n        [0, 7],\\r\\n        [3, 11],\\r\\n        [2, 11],\\r\\n        [7, 9],\\r\\n    ],\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction tryColor(data, acc, vertix = 0, color = 0) {\\r\\n    if (acc[vertix] !== undefined && acc[vertix] !== color) {\\r\\n        return [];\\r\\n    }\\r\\n    acc[vertix] = color;\\r\\n    if (data[vertix] === undefined) {\\r\\n        return acc;\\r\\n    }\\r\\n    for (const neighbor of data[vertix]) {\\r\\n        const result = tryColor(data, acc, neighbor, (color + 1) % 2);\\r\\n        if (!result.length) {\\r\\n            delete acc[vertix];\\r\\n            return [];\\r\\n        }\\r\\n    }\\r\\n    return acc;\\r\\n}\\r\\nfunction toMapOfVertice(data) {\\r\\n    return data.reduce((acc, [n1, n2]) => {\\r\\n        acc[n1] = acc[n1] || [];\\r\\n        acc[n2] = acc[n2] || [];\\r\\n        acc[n1] = acc[n1].concat([n2]);\\r\\n        acc[n2] = acc[n1].concat([n1]);\\r\\n        return acc;\\r\\n    }, {});\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = tryColor(toMapOfVertice(data[1]), []);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-57834.js\",\"server\":\"home\"}}],[\"upgrade-hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await upgradeHacknet(ns, flags);\\r\\n}\\r\\nexport async function upgradeHacknet(ns, { b: budgetRatio }) {\\r\\n    let budget = ns.getPlayer().money * budgetRatio;\\r\\n    const purchaseCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    if (budget >= purchaseCost &&\\r\\n        ns.hacknet.numNodes() < ns.hacknet.maxNumNodes()) {\\r\\n        ns.hacknet.purchaseNode();\\r\\n        budget -= purchaseCost;\\r\\n    }\\r\\n    while (budget) {\\r\\n        const server = getHackNodes(ns).shift();\\r\\n        if (!server)\\r\\n            return;\\r\\n        const upgradeCost = ns.hacknet.getLevelUpgradeCost(server.index, 10);\\r\\n        const ramCost = ns.hacknet.getRamUpgradeCost(server.index);\\r\\n        const cpuCost = ns.hacknet.getCoreUpgradeCost(server.index);\\r\\n        if (server.level < 100) {\\r\\n            if (budget < upgradeCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeLevel(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.ram < 64) {\\r\\n            if (budget < ramCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeRam(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.level < 140) {\\r\\n            if (budget < upgradeCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeLevel(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.cores < 5) {\\r\\n            if (budget < cpuCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeCores(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.level < 200) {\\r\\n            if (budget < upgradeCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeLevel(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.cores < 16) {\\r\\n            if (budget < cpuCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeCores(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n}\\r\\nfunction upgradeLevel(ns, server) {\\r\\n    const upgradeCost = ns.hacknet.getLevelUpgradeCost(server.index, 10);\\r\\n    if (ns.hacknet.upgradeLevel(server.index, 10)) {\\r\\n        ns.print(ns.sprintf(\\\"Upgraded %s to lvl %s\\\", server.index, server.level + 1));\\r\\n        return upgradeCost;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\nfunction upgradeRam(ns, server) {\\r\\n    const upgradeCost = ns.hacknet.getRamUpgradeCost(server.index);\\r\\n    if (ns.hacknet.upgradeRam(server.index)) {\\r\\n        ns.print(ns.sprintf(\\\"Upgraded %s to ram %s\\\", server.index, server.ram * 2));\\r\\n        return upgradeCost;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\nfunction upgradeCores(ns, server) {\\r\\n    const upgradeCost = ns.hacknet.getCoreUpgradeCost(server.index);\\r\\n    if (ns.hacknet.upgradeCore(server.index)) {\\r\\n        ns.print(ns.sprintf(\\\"Upgraded %s to cores %s\\\", server.index, server.cores + 1));\\r\\n        return upgradeCost;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\nfunction getHackNodes(ns) {\\r\\n    return new Array(ns.hacknet.numNodes())\\r\\n        .fill(0)\\r\\n        .map((_value, index) => index)\\r\\n        .map((index) => ({ ...ns.hacknet.getNodeStats(index), index }))\\r\\n        .sort((a, b) => a.production - b.production);\\r\\n}\\r\\n\",\"filename\":\"upgrade-hacknet.js\",\"server\":\"home\"}}],[\"contracts/contract-937534.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-937534.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = [\\r\\n    -4, -9, 0, 5, 5, 5, 6, 5, 7, -2, -2, -4, -6, 3, 5, -3, -1, 5, 10, -5, 0,\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction sumArray(array) {\\r\\n    return array.reduce((acc, value) => acc + value, 0);\\r\\n}\\r\\nfunction findMaxSubArraySum(array) {\\r\\n    let currentMax = sumArray(array);\\r\\n    for (let i = 0; i < array.length - 1; i++) {\\r\\n        for (let j = array.length - 1; j > i; j--) {\\r\\n            currentMax = Math.max(sumArray(array.slice(i, j)), currentMax);\\r\\n        }\\r\\n    }\\r\\n    return currentMax;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = findMaxSubArraySum(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-937534.js\",\"server\":\"home\"}}],[\"contracts/contract-169947.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-169947.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = 172413088;\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction primeFactor(integer) {\\r\\n    for (let i = 2; i < Math.sqrt(integer) + 1; i++) {\\r\\n        const factor = integer / i;\\r\\n        if (Number.isInteger(factor)) {\\r\\n            return primeFactor(factor);\\r\\n        }\\r\\n    }\\r\\n    return integer;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = primeFactor(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-169947.js\",\"server\":\"home\"}}],[\"contracts/contract-324759.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-324759.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = \\\"9716412766\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction isValidIp(ip) {\\r\\n    const splitted = ip.split(\\\".\\\").filter((value) => !!value);\\r\\n    if (splitted.length != 4)\\r\\n        return false;\\r\\n    return !splitted.find((value) => ((Number.parseInt(value) != 0 || value.length > 1) &&\\r\\n        value.startsWith(\\\"0\\\")) ||\\r\\n        Number.parseInt(value) > 255);\\r\\n}\\r\\nfunction parseIp(ip) {\\r\\n    const validIps = [];\\r\\n    for (let i = 1; i < 4; i++) {\\r\\n        for (let j = 1; j < 4; j++) {\\r\\n            for (let k = 1; k < 4; k++) {\\r\\n                const a1 = ip.substring(0, i);\\r\\n                const a2 = ip.substring(i, i + j);\\r\\n                const a3 = ip.substring(i + j, i + j + k);\\r\\n                const a4 = ip.substring(i + j + k, ip.length);\\r\\n                const candidate = `${a1}.${a2}.${a3}.${a4}`;\\r\\n                if (isValidIp(candidate))\\r\\n                    validIps.push(candidate);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return validIps;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = parseIp(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"127001: %s\\\", parseIp(\\\"127001\\\"));\\r\\n    ns.tprintf(\\\"255255255255: %s\\\", parseIp(\\\"255255255255\\\"));\\r\\n    ns.tprintf(\\\"1000: %s\\\", parseIp(\\\"1000\\\"));\\r\\n    ns.tprintf(\\\"1001: %s\\\", parseIp(\\\"1001\\\"));\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-324759.js\",\"server\":\"home\"}}],[\"contracts/contract-145349.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-145349.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = [\\r\\n    122, 188, 140, 50, 103, 126, 104, 136, 24, 58, 32, 30, 96, 147, 129, 134, 84, 100, 52, 24, 133, 158, 59, 25, 162, 48, 38, 190, 101, 12, 106, 190, 88, 125, 123, 142, 109\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction maxTxProfit(prices) {\\r\\n    let max = 0;\\r\\n    for (let i = 0; i < prices.length - 1; i++) {\\r\\n        for (let j = i; j < prices.length; j++) {\\r\\n            max = Math.max(max, prices[j] - prices[i]);\\r\\n        }\\r\\n    }\\r\\n    return max;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = maxTxProfit(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-145349.js\",\"server\":\"home\"}}],[\"contracts/contract-507056.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-507056.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction isFinished(data, i, j) {\\r\\n    return data.length === i + 1 && data[i].length === j + 1;\\r\\n}\\r\\nfunction canMoveRight(data, i, j) {\\r\\n    return data[i].length > j + 1 && data[i][j + 1] !== 1;\\r\\n}\\r\\nfunction canMoveDown(data, i, j) {\\r\\n    return data.length > i + 1 && data[i + 1][j] !== 1;\\r\\n}\\r\\nfunction walkDownFirst(data, i, j) {\\r\\n    if (isFinished(data, i, j)) {\\r\\n        return 1;\\r\\n    }\\r\\n    let count = 0;\\r\\n    if (canMoveDown(data, i, j)) {\\r\\n        count += walkDownFirst(data, i + 1, j);\\r\\n    }\\r\\n    if (canMoveRight(data, i, j)) {\\r\\n        count += walkDownFirst(data, i, j + 1);\\r\\n    }\\r\\n    return count;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const data = ns.codingcontract.getData(name, host);\\r\\n    const solution = walkDownFirst(data, 0, 0);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-507056.js\",\"server\":\"home\"}}],[\"upgrade-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { upgrade } from \\\"/lib/upgrade\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n    //prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await upgradeServers(ns, flags);\\r\\n}\\r\\nexport async function upgradeServers(ns, { b: budgetRatio, ...flags }) {\\r\\n    let budget = ns.getPlayer().money * budgetRatio;\\r\\n    while (budget) {\\r\\n        const server = ns\\r\\n            .getPurchasedServers()\\r\\n            .map((host) => ({ host, ram: ns.getServerMaxRam(host) }))\\r\\n            .sort(({ ram: ramA }, { ram: ramB }) => {\\r\\n            return ramA - ramB;\\r\\n        })\\r\\n            .shift();\\r\\n        if (!server)\\r\\n            return;\\r\\n        const price = await upgrade(ns, { host: server.host }, { ...flags, b: budget });\\r\\n        budget -= price;\\r\\n        if (!price) {\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"upgrade-servers.js\",\"server\":\"home\"}}],[\"gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { getGangMembers, upgradeGang } from \\\"/upgrade-gang\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await manageGang(ns, flags);\\r\\n}\\r\\nexport async function manageGang(ns, { b }) {\\r\\n    // let budget = ns.getPlayer().money * budgetRatio;\\r\\n    if (ns.gang.canRecruitMember()) {\\r\\n        ns.gang.recruitMember(`guy-${ns.gang.getMemberNames().length}`);\\r\\n    }\\r\\n    const gangInfo = ns.gang.getGangInformation();\\r\\n    const { wantedPenalty } = gangInfo;\\r\\n    for (const gangMember of getGangMembers(ns)) {\\r\\n        if (gangMember.agi_exp < 2000 ||\\r\\n            gangMember.def_exp < 2000 ||\\r\\n            gangMember.str_exp < 2000 ||\\r\\n            gangMember.dex_exp < 2000) {\\r\\n            ns.gang.setMemberTask(gangMember.name, \\\"Train Combat\\\");\\r\\n        }\\r\\n        else if (gangMember.hack_exp < 2000) {\\r\\n            ns.gang.setMemberTask(gangMember.name, \\\"Train Hacking\\\");\\r\\n        }\\r\\n        else if (gangMember.cha_exp < 2000) {\\r\\n            ns.gang.setMemberTask(gangMember.name, \\\"Train Charisma\\\");\\r\\n            // } else if (\\r\\n            //   gangMember.task === \\\"Vigilante Justice\\\" &&\\r\\n            //   wantedPenalty < 0.98 &&\\r\\n            //   gangInfo.wantedLevel > 50\\r\\n            // ) {\\r\\n            //   continue;\\r\\n            // } else if (wantedPenalty < 0.8 && gangInfo.wantedLevel > 100) {\\r\\n            //   ns.gang.setMemberTask(gangMember.name, \\\"Vigilante Justice\\\");\\r\\n        }\\r\\n        else {\\r\\n            const mostProfitTask = ns.gang\\r\\n                .getTaskNames()\\r\\n                .map((taskName) => ns.gang.getTaskStats(taskName))\\r\\n                .map((task) => {\\r\\n                return {\\r\\n                    ...task,\\r\\n                    moneyGain: calculateMoneyGain(gangInfo, gangMember, task),\\r\\n                };\\r\\n            })\\r\\n                .sort(({ moneyGain: A }, { moneyGain: B }) => B - A)\\r\\n                .find(() => true)?.name;\\r\\n            const mostRespectTask = ns.gang\\r\\n                .getTaskNames()\\r\\n                .map((taskName) => ns.gang.getTaskStats(taskName))\\r\\n                .map((task) => {\\r\\n                return {\\r\\n                    ...task,\\r\\n                    respectGain: calculateRespectGain(gangInfo, gangMember, task),\\r\\n                };\\r\\n            })\\r\\n                .sort(({ respectGain: A }, { respectGain: B }) => B - A)\\r\\n                .find(() => true)?.name;\\r\\n            ns.gang.setMemberTask(gangMember.name, \\\"Territory Warfare\\\" || mostProfitTask || mostRespectTask || \\\"Mug People\\\");\\r\\n        }\\r\\n    }\\r\\n    await upgradeGang(ns, { b });\\r\\n}\\r\\nfunction calculateMoneyGain(gang, member, task) {\\r\\n    if (task.baseMoney === 0)\\r\\n        return 0;\\r\\n    let statWeight = (task.hackWeight / 100) * member.hack +\\r\\n        (task.strWeight / 100) * member.str +\\r\\n        (task.defWeight / 100) * member.def +\\r\\n        (task.dexWeight / 100) * member.dex +\\r\\n        (task.agiWeight / 100) * member.agi +\\r\\n        (task.chaWeight / 100) * member.cha;\\r\\n    statWeight -= 3.2 * task.difficulty;\\r\\n    if (statWeight <= 0)\\r\\n        return 0;\\r\\n    const territoryMult = Math.max(0.005, Math.pow(gang.territory * 100, task.territory.money) / 100);\\r\\n    if (isNaN(territoryMult) || territoryMult <= 0)\\r\\n        return 0;\\r\\n    const respectMult = calculateWantedPenalty(gang);\\r\\n    const territoryPenalty = 0.2 * gang.territory + 0.8;\\r\\n    return Math.pow(5 * task.baseMoney * statWeight * territoryMult * respectMult, territoryPenalty);\\r\\n}\\r\\nfunction calculateWantedPenalty(gang) {\\r\\n    return gang.respect / (gang.respect + gang.wantedLevel);\\r\\n}\\r\\nfunction calculateRespectGain(gang, member, task) {\\r\\n    if (task.baseRespect === 0)\\r\\n        return 0;\\r\\n    let statWeight = (task.hackWeight / 100) * member.hack +\\r\\n        (task.strWeight / 100) * member.str +\\r\\n        (task.defWeight / 100) * member.def +\\r\\n        (task.dexWeight / 100) * member.dex +\\r\\n        (task.agiWeight / 100) * member.agi +\\r\\n        (task.chaWeight / 100) * member.cha;\\r\\n    statWeight -= 4 * task.difficulty;\\r\\n    if (statWeight <= 0)\\r\\n        return 0;\\r\\n    const territoryMult = Math.max(0.005, Math.pow(gang.territory * 100, task.territory.respect) / 100);\\r\\n    const territoryPenalty = 0.2 * gang.territory + 0.8;\\r\\n    if (isNaN(territoryMult) || territoryMult <= 0)\\r\\n        return 0;\\r\\n    const respectMult = calculateWantedPenalty(gang);\\r\\n    return Math.pow(11 * task.baseRespect * statWeight * territoryMult * respectMult, territoryPenalty);\\r\\n}\\r\\nfunction calculateWantedLevelGain(gang, member, task) {\\r\\n    if (task.baseWanted === 0)\\r\\n        return 0;\\r\\n    let statWeight = (task.hackWeight / 100) * member.hack +\\r\\n        (task.strWeight / 100) * member.str +\\r\\n        (task.defWeight / 100) * member.def +\\r\\n        (task.dexWeight / 100) * member.dex +\\r\\n        (task.agiWeight / 100) * member.agi +\\r\\n        (task.chaWeight / 100) * member.cha;\\r\\n    statWeight -= 3.5 * task.difficulty;\\r\\n    if (statWeight <= 0)\\r\\n        return 0;\\r\\n    const territoryMult = Math.max(0.005, Math.pow(gang.territory * 100, task.territory.wanted) / 100);\\r\\n    if (isNaN(territoryMult) || territoryMult <= 0)\\r\\n        return 0;\\r\\n    if (task.baseWanted < 0) {\\r\\n        return 0.4 * task.baseWanted * statWeight * territoryMult;\\r\\n    }\\r\\n    const calc = (7 * task.baseWanted) / Math.pow(3 * statWeight * territoryMult, 0.8);\\r\\n    // Put an arbitrary cap on this to prevent wanted level from rising too fast if the\\r\\n    // denominator is very small. Might want to rethink formula later\\r\\n    return Math.min(100, calc);\\r\\n}\\r\\n\",\"filename\":\"gang.js\",\"server\":\"home\"}}],[\"upgrade-stats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await template(ns, args, flags);\\r\\n}\\r\\nexport async function template(ns, { host }, { d: depth }) {\\r\\n    ns.stock.getForecast();\\r\\n}\\r\\n\",\"filename\":\"upgrade-stats.js\",\"server\":\"home\"}}],[\"contracts/contract-916421.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-916421.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction countCompose(integer) {\\r\\n    const composition = new Array(integer + 1).fill(0);\\r\\n    composition[0] = 1;\\r\\n    for (let i = 1; i < integer; i++) {\\r\\n        for (let j = i; j <= integer; j++) {\\r\\n            composition[j] = composition[j] + composition[j - i];\\r\\n        }\\r\\n    }\\r\\n    return composition[integer];\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const data = ns.codingcontract.getData(name, host);\\r\\n    const solution = countCompose(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"2: %s\\\", countCompose(2));\\r\\n    ns.tprintf(\\\"3: %s\\\", countCompose(3));\\r\\n    ns.tprintf(\\\"4: %s\\\", countCompose(4));\\r\\n    ns.tprintf(\\\"5: %s\\\", countCompose(5));\\r\\n    ns.tprintf(\\\"6: %s\\\", countCompose(6));\\r\\n    ns.tprintf(\\\"7: %s\\\", countCompose(7));\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-916421.js\",\"server\":\"home\"}}],[\"upgrade-gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await upgradeGang(ns, flags);\\r\\n}\\r\\nexport async function upgradeGang(ns, { b: budgetRatio }) {\\r\\n    let budget = ns.getPlayer().money * budgetRatio;\\r\\n    getEquipments(ns).forEach((equipment) => {\\r\\n        if (budget >= equipment.cost) {\\r\\n            for (const gangMember of getGangMembers(ns)) {\\r\\n                if (ns.gang.purchaseEquipment(gangMember.name, equipment.name)) {\\r\\n                    budget -= equipment.cost;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function getEquipments(ns) {\\r\\n    return ns.gang\\r\\n        .getEquipmentNames()\\r\\n        .map((equipmentName) => ({\\r\\n        name: equipmentName,\\r\\n        cost: ns.gang.getEquipmentCost(equipmentName),\\r\\n        stats: ns.gang.getEquipmentStats(equipmentName),\\r\\n        type: ns.gang.getEquipmentType(equipmentName),\\r\\n    }))\\r\\n        .sort(({ cost: a }, { cost: b }) => a - b);\\r\\n}\\r\\nexport function getGangMembers(ns) {\\r\\n    return ns.gang\\r\\n        .getMemberNames()\\r\\n        .map((name) => ns.gang.getMemberInformation(name));\\r\\n}\\r\\n\",\"filename\":\"upgrade-gang.js\",\"server\":\"home\"}}],[\"restart-script.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    script: \\\"bot.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await restart(ns, args);\\r\\n}\\r\\nexport async function restart(ns, { script }) {\\r\\n    const processes = ns.ps();\\r\\n    const process = processes.find((process) => process.filename === script);\\r\\n    if (!process) {\\r\\n        ns.toast(\\\"Process not found!\\\", \\\"error\\\");\\r\\n        return;\\r\\n    }\\r\\n    ns.kill(process.pid);\\r\\n    ns.spawn(script, {\\r\\n        spawnDelay: 1,\\r\\n    }, ...process.args);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.scripts;\\r\\n}\\r\\n\",\"filename\":\"restart-script.js\",\"server\":\"home\"}}],[\"contracts/contract-936260.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-936260.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const data = ns.codingcontract.getData(name, host);\\r\\n    const solution = 0;\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-936260.js\",\"server\":\"home\"}}],[\"get-karma.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    await template(ns);\\r\\n}\\r\\nexport async function template(ns) {\\r\\n    ns.tprint(\\\"Your karma is: \\\" + ns.heart.break());\\r\\n}\\r\\n\",\"filename\":\"get-karma.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"node-0\",\"node-1\",\"node-2\",\"node-3\",\"node-4\",\"node-5\",\"node-6\",\"node-7\",\"node-8\",\"node-9\",\"node-10\",\"node-11\",\"node-12\",\"node-13\",\"node-14\",\"node-15\",\"node-16\",\"node-17\",\"node-18\",\"node-19\",\"node-20\",\"node-21\",\"node-22\",\"node-23\",\"node-24\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"bot.js\",\"offlineExpGained\":29.529995904166626,\"offlineMoneyMade\":0,\"offlineRunningTime\":91.781,\"onlineExpGained\":165474.0000000009,\"onlineMoneyMade\":2044635.5532912798,\"onlineRunningTime\":19049.610000004694,\"ramUsage\":24.75,\"server\":\"home\",\"scriptKey\":\"bot.js*[]\",\"title\":\"bot.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":285.20999999999293,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-weaken.js silver-helix\",\"threads\":4,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"98.1.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":12706496475.400002,\"moneyMax\":63532482377,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1152,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-7434.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,0,1,3,10,9,10,10,2,3,0,0,0,4,1,0,10,0,0],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"8.0.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":8015929244.6,\"moneyMax\":40079646223,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1145,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"54.5.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":5772138828.8,\"moneyMax\":28860694144,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":990,\"serverGrowth\":66,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"50.2.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":4154316202.4,\"moneyMax\":20771581012,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1109,\"serverGrowth\":79,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"67.9.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":7209428804.400001,\"moneyMax\":36047144022,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1051,\"serverGrowth\":95,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"82.3.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":4668106281.8,\"moneyMax\":23340531409,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1170,\"serverGrowth\":64,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"59.7.8.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":3328960789.2000003,\"moneyMax\":16644803946,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1033,\"serverGrowth\":98,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"4.6.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":4393013119.400001,\"moneyMax\":21965065597,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":958,\"serverGrowth\":82,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"9.1.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":5871700310.6,\"moneyMax\":29358501553,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1019,\"serverGrowth\":96,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"93.1.6.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":343703418,\"moneyMax\":1718517090,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":965,\"serverGrowth\":82,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"64.8.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1314,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"58.7.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":212990053.20000002,\"moneyMax\":1064950266,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1014,\"serverGrowth\":70,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"0.3.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":166489350,\"moneyMax\":832446750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1004,\"serverGrowth\":62,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"16.5.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":146461703.4,\"moneyMax\":732308517,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":902,\"serverGrowth\":75,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-430500-Netburners.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":12337716117,\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"18.1.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":139915378.4,\"moneyMax\":699576892,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":822,\"serverGrowth\":77,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"48.1.3.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":157666342.20000002,\"moneyMax\":788331711,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":805,\"serverGrowth\":69,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-848402-CyberSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[8,6],[9,3,7],[8,8,1,2],[2,1,4,2,3]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"76.2.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":185343396.20000002,\"moneyMax\":926716981,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":873,\"serverGrowth\":88,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"25.7.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":238944799.8,\"moneyMax\":1194723999,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":861,\"serverGrowth\":85,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"45.7.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":169777913.20000002,\"moneyMax\":848889566,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":802,\"serverGrowth\":76,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"87.7.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":102194737,\"moneyMax\":510973685,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":78,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"75.1.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":167432729.60000002,\"moneyMax\":837163648,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":892,\"serverGrowth\":75,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"95.9.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":169688095.8,\"moneyMax\":848440479,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":873,\"serverGrowth\":83,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"89.3.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":235702603.20000002,\"moneyMax\":1178513016,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":62,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"28.2.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":191716686.4,\"moneyMax\":958583432,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":938,\"serverGrowth\":68,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-951486.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[11,125,190,70,83,32,188]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"17.4.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":214264438.60000002,\"moneyMax\":1071322193,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":796,\"serverGrowth\":72,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"59.2.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":148756405.20000002,\"moneyMax\":743782026,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":840,\"serverGrowth\":73,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"94.3.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":152355436.8,\"moneyMax\":761777184,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":72,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"21.0.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":276938304.2,\"moneyMax\":1384691521,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":63,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"88.9.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":345012957.8,\"moneyMax\":1725064789,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":826,\"serverGrowth\":85,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"56.9.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":235947440.4,\"moneyMax\":1179737202,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":823,\"serverGrowth\":69,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"81.2.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":275244898.8,\"moneyMax\":1376224494,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":79,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"48.2.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":215434203.60000002,\"moneyMax\":1077171018,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":776,\"serverGrowth\":80,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"69.2.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":158587870.6,\"moneyMax\":792939353,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":687,\"serverGrowth\":55,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"17.9.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":111470168.4,\"moneyMax\":557350842,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":522,\"serverGrowth\":55,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"4.8.2.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":142733243.8,\"moneyMax\":713666219,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":555,\"serverGrowth\":56,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"7.3.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":65166483.2,\"moneyMax\":325832416,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":438,\"serverGrowth\":40,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"94.1.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":43630277.2,\"moneyMax\":218151386,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":376,\"serverGrowth\":35,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"59.3.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":184201034.4,\"moneyMax\":921005172,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":762,\"serverGrowth\":79,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"31.6.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":43371917,\"moneyMax\":216859585,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":454,\"serverGrowth\":53,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"60.2.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":90750765.60000001,\"moneyMax\":453753828,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":574,\"serverGrowth\":63,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"34.7.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":89200390.60000001,\"moneyMax\":446001953,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":439,\"serverGrowth\":37,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"70.2.5.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"the-hub\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"the-hub\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"the-hub\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"the-hub\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"the-hub\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"the-hub\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"the-hub\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"the-hub\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"the-hub\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"the-hub\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"the-hub\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"the-hub\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"the-hub\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"the-hub\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"the-hub\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"the-hub\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":39189267,\"moneyMax\":195946335,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":324,\"serverGrowth\":45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"the-hub\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":4,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-518250-CyberSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[3,8],[3,5,5],[4,5,8,1],[3,1,2,8,6],[4,4,2,3,2,8],[9,8,7,5,8,5,4],[4,8,4,8,3,9,9,2],[7,9,3,8,6,8,3,3,9],[9,9,6,9,9,8,8,8,6,6]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-651548.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[28,21,43,50,36,49],[28,4,29,49,7,21],[36,47,40,28,46,30],[45,2,42,49,37,27],[47,41,49,41,29,18],[7,16,32,50,38,30],[36,42,40,34,25,48],[38,34,50,31,14,20],[7,24,4,8,33,8],[8,23,15,33,25,12],[6,8,34,17,4,44],[7,33,44,10,35,30]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"74.5.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":46317730.2,\"moneyMax\":231588651,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":370,\"serverGrowth\":60,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"84.8.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":388,\"serverGrowth\":62,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"76.0.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"johnson-ortho\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"johnson-ortho\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"johnson-ortho\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"johnson-ortho\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"johnson-ortho\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"johnson-ortho\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"johnson-ortho\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"johnson-ortho\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"johnson-ortho\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"johnson-ortho\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"johnson-ortho\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"johnson-ortho\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"johnson-ortho\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"johnson-ortho\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"johnson-ortho\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"johnson-ortho\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":14594586.600000001,\"moneyMax\":72972933,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":250,\"serverGrowth\":63,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-437685-CyberSec.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"274297829173\",-79],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"7.6.9.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"n00dles\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"n00dles\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"n00dles\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"n00dles\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"n00dles\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"n00dles\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"n00dles\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"n00dles\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"n00dles\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"n00dles\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"n00dles\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"n00dles\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"n00dles\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"n00dles\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"n00dles\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"n00dles\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":14000,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":285.20999999999293,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-weaken.js silver-helix\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"25.8.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"foodnstuff\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"foodnstuff\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"foodnstuff\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"foodnstuff\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"foodnstuff\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"foodnstuff\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"foodnstuff\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"foodnstuff\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"foodnstuff\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"foodnstuff\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"foodnstuff\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"foodnstuff\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"foodnstuff\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"foodnstuff\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"foodnstuff\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"foodnstuff\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":7.200000000000003,\"minDifficulty\":3,\"moneyAvailable\":400000,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":9,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"37.8.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":7.695999999999999,\"minDifficulty\":3,\"moneyAvailable\":461619.15223730763,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"64.3.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"joesguns\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"joesguns\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"joesguns\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"joesguns\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"joesguns\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"joesguns\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"joesguns\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"joesguns\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"joesguns\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"joesguns\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"joesguns\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"joesguns\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"joesguns\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"joesguns\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"joesguns\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"joesguns\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":10.488000000000003,\"minDifficulty\":5,\"moneyAvailable\":500193.4623629468,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"57.9.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"zer0\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"zer0\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"zer0\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"zer0\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"zer0\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"zer0\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"zer0\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"zer0\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"zer0\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"zer0\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"zer0\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"zer0\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"zer0\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"zer0\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"zer0\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"zer0\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":18,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"4.5.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"nectar-net\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"nectar-net\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"nectar-net\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"nectar-net\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"nectar-net\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"nectar-net\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"nectar-net\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"nectar-net\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"nectar-net\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"nectar-net\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"nectar-net\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"nectar-net\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"nectar-net\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"nectar-net\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"nectar-net\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"nectar-net\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":17.04399999999999,\"minDifficulty\":7,\"moneyAvailable\":545803.9155093759,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"89.2.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"neo-net\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"neo-net\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"neo-net\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"neo-net\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"neo-net\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"neo-net\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"neo-net\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"neo-net\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"neo-net\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"neo-net\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"neo-net\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"neo-net\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"neo-net\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"neo-net\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"neo-net\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"neo-net\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":285.20999999999293,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-weaken.js silver-helix\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":16,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"49.0.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"silver-helix\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"silver-helix\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"silver-helix\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"silver-helix\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"silver-helix\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"silver-helix\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"silver-helix\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"silver-helix\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"silver-helix\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"silver-helix\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"silver-helix\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"silver-helix\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"silver-helix\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"silver-helix\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"silver-helix\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"silver-helix\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":11.181999999999961,\"minDifficulty\":10,\"moneyAvailable\":32272531.331775025,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":36,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"47.2.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":13.698000000000006,\"minDifficulty\":5,\"moneyAvailable\":596831.7950524838,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"31.7.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.26799999999999,\"minDifficulty\":5,\"moneyAvailable\":628526.216251877,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"36.1.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"phantasy\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"phantasy\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"phantasy\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"phantasy\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"phantasy\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"phantasy\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"phantasy\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"phantasy\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"phantasy\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"phantasy\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"phantasy\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"phantasy\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"phantasy\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"phantasy\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"phantasy\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"phantasy\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":12495548.206441306,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"phantasy\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":18,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"27.2.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"max-hardware\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"max-hardware\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"max-hardware\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"max-hardware\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"max-hardware\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"max-hardware\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"max-hardware\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"max-hardware\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"max-hardware\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"max-hardware\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"max-hardware\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"max-hardware\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"max-hardware\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"max-hardware\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"max-hardware\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"max-hardware\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":2034077.9961560194,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":18,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"93.2.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"omega-net\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"omega-net\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"omega-net\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"omega-net\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"omega-net\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"omega-net\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"omega-net\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"omega-net\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"omega-net\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"omega-net\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"omega-net\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"omega-net\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"omega-net\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"omega-net\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"omega-net\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"omega-net\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":31,\"minDifficulty\":10,\"moneyAvailable\":13972902.8,\"moneyMax\":69864514,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":197,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":18,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"16.7.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"crush-fitness\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"crush-fitness\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"crush-fitness\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"crush-fitness\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"crush-fitness\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"crush-fitness\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"crush-fitness\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"crush-fitness\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"crush-fitness\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"crush-fitness\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"crush-fitness\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"crush-fitness\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"crush-fitness\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"crush-fitness\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"crush-fitness\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"crush-fitness\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":11147974.600000001,\"moneyMax\":55739873,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":234,\"serverGrowth\":29,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"81.8.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"iron-gym\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"iron-gym\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"iron-gym\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"iron-gym\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"iron-gym\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"iron-gym\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"iron-gym\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"iron-gym\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"iron-gym\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"iron-gym\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"iron-gym\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"iron-gym\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"iron-gym\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"iron-gym\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"iron-gym\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"iron-gym\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":3815796.779718846,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":18,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"40.1.1.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"syscore\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":499,\"serverGrowth\":26,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"1.0.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1012,\"serverGrowth\":58,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"37.2.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":708,\"serverGrowth\":51,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"14.8.6.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":533,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"90.2.5.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":351,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"46.2.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"avmnite-02h\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"avmnite-02h\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"avmnite-02h\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"avmnite-02h\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"avmnite-02h\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"avmnite-02h\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"avmnite-02h\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"avmnite-02h\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"avmnite-02h\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"avmnite-02h\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"avmnite-02h\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"avmnite-02h\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"avmnite-02h\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"avmnite-02h\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"avmnite-02h\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"avmnite-02h\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":220,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":9,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"22.9.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":534,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"89.0.2.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"CSEC\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"CSEC\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"CSEC\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"CSEC\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"CSEC\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"CSEC\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"CSEC\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"CSEC\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"CSEC\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"CSEC\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"CSEC\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"CSEC\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"CSEC\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"CSEC\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"CSEC\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"CSEC\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"silver-helix\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":57,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":285.20999999999293,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-weaken.js silver-helix\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"30.5.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"20.8.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"26.6.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-0\",\"httpPortOpen\":false,\"ip\":\"42.3.1.0\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-0\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-0\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-0\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-0\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-0\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-0\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-0\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-0\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-0\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-0\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-0\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-0\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-0\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-0\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-0\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-0\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-1\",\"httpPortOpen\":false,\"ip\":\"6.6.1.4\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-1\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-1\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-1\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-1\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-1\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-1\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-1\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-1\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-1\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-1\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-1\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-1\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-1\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-1\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-1\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-1\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-2\",\"httpPortOpen\":false,\"ip\":\"96.4.7.2\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-2\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-2\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-2\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-2\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-2\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-2\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-2\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-2\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-2\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-2\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-2\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-2\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-2\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-2\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-2\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-2\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-2\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-3\",\"httpPortOpen\":false,\"ip\":\"88.5.5.3\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-3\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-3\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-3\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-3\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-3\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-3\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-3\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-3\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-3\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-3\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-3\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-3\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-3\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-3\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-3\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-3\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-3\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-4\",\"httpPortOpen\":false,\"ip\":\"31.6.1.7\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-4\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-4\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-4\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-4\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-4\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-4\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-4\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-4\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-4\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-4\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-4\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-4\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-4\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-4\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-4\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-4\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-4\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-5\",\"httpPortOpen\":false,\"ip\":\"67.5.1.3\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-5\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-5\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-5\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-5\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-5\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-5\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-5\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-5\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-5\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-5\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-5\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-5\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-5\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-5\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-5\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-5\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-5\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-6\",\"httpPortOpen\":false,\"ip\":\"82.8.9.1\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-6\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-6\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-6\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-6\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-6\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-6\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-6\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-6\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-6\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-6\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-6\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-6\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-6\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-6\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-6\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-6\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-6\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-7\",\"httpPortOpen\":false,\"ip\":\"63.8.7.9\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-7\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-7\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-7\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-7\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-7\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-7\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-7\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-7\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-7\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-7\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-7\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-7\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-7\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-7\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-7\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-7\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-7\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-8\",\"httpPortOpen\":false,\"ip\":\"50.0.0.1\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-8\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-8\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-8\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-8\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-8\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-8\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-8\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-8\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-8\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-8\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-8\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-8\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-8\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-8\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-8\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-8\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-8\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-9\",\"httpPortOpen\":false,\"ip\":\"92.8.2.7\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-9\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-9\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-9\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-9\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-9\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-9\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-9\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-9\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-9\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-9\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-9\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-9\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-9\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-9\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-9\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-9\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-9\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-10\",\"httpPortOpen\":false,\"ip\":\"5.3.3.1\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-10\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-10\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-10\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-10\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-10\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-10\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-10\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-10\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-10\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-10\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-10\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-10\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-10\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-10\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-10\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-10\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-10\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-11\",\"httpPortOpen\":false,\"ip\":\"63.6.7.5\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-11\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-11\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-11\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-11\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-11\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-11\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-11\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-11\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-11\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-11\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-11\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-11\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-11\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-11\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-11\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-11\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-11\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-12\",\"httpPortOpen\":false,\"ip\":\"98.0.9.4\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-12\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-12\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-12\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-12\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-12\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-12\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-12\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-12\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-12\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-12\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-12\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-12\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-12\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-12\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-12\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-12\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-12\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-13\",\"httpPortOpen\":false,\"ip\":\"56.8.4.5\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-13\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-13\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-13\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-13\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-13\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-13\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-13\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-13\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-13\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-13\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-13\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-13\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-13\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-13\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-13\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-13\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-13\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-14\",\"httpPortOpen\":false,\"ip\":\"72.8.9.9\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-14\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-14\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-14\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-14\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-14\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-14\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-14\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-14\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-14\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-14\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-14\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-14\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-14\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-14\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-14\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-14\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-14\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-15\",\"httpPortOpen\":false,\"ip\":\"99.7.3.1\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-15\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-15\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-15\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-15\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-15\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-15\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-15\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-15\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-15\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-15\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-15\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-15\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-15\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-15\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-15\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-15\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-15\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-16\",\"httpPortOpen\":false,\"ip\":\"77.4.2.8\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-16\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-16\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-16\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-16\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-16\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-16\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-16\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-16\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-16\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-16\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-16\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-16\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-16\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-16\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-16\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-16\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-16\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-17\",\"httpPortOpen\":false,\"ip\":\"80.0.9.6\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-17\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-17\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-17\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-17\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-17\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-17\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-17\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-17\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-17\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-17\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-17\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-17\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-17\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-17\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-17\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-17\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-17\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-18\",\"httpPortOpen\":false,\"ip\":\"54.0.1.0\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-18\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-18\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-18\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-18\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-18\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-18\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-18\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-18\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-18\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-18\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-18\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-18\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-18\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-18\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-18\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-18\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-18\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-19\",\"httpPortOpen\":false,\"ip\":\"15.6.5.2\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-19\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-19\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-19\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-19\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-19\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-19\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-19\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-19\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-19\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-19\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-19\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-19\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-19\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-19\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-19\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-19\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-19\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-20\",\"httpPortOpen\":false,\"ip\":\"28.7.1.6\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-20\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-20\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-20\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-20\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-20\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-20\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-20\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-20\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-20\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-20\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-20\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-20\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-20\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-20\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-20\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-20\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-20\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-21\",\"httpPortOpen\":false,\"ip\":\"31.4.7.2\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-21\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-21\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-21\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-21\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-21\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-21\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-21\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-21\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-21\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-21\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-21\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-21\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-21\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-21\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-21\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-21\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-21\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-22\",\"httpPortOpen\":false,\"ip\":\"47.4.3.8\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-22\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-22\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-22\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-22\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-22\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-22\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-22\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-22\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-22\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-22\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-22\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-22\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-22\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-22\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-22\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-22\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-22\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-23\",\"httpPortOpen\":false,\"ip\":\"1.9.3.2\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-23\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-23\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-23\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-23\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-23\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-23\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-23\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-23\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-23\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-23\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-23\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-23\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-23\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-23\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-23\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-23\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-23\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}},\"node-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-24\",\"httpPortOpen\":false,\"ip\":\"2.0.9.7\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-24\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-24\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-24\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-24\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-24\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-24\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-24\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-24\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-24\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-24\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-24\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-24\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-24\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-24\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-24\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-24\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-24\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":165.2099999999991,\"ramUsage\":1.75,\"server\":\"node-24\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":1,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":true,\"playerReputation\":908.3573333332735}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":true,\"playerReputation\":1032.361452307632}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":true,\"playerReputation\":11400.282978460864}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":40,\"MaxPortCapacity\":60,\"MaxTerminalCapacity\":250,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":0,\"opened\":false},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1701285710431","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}