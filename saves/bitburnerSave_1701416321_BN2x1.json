{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":1006,\"max\":1006},\"skills\":{\"hacking\":10431,\"strength\":12198,\"defense\":9962,\"dexterity\":3264,\"agility\":1485,\"charisma\":2287,\"intelligence\":0},\"exp\":{\"hacking\":35228795412.44387,\"strength\":3321.414497000987,\"defense\":3321.414497000987,\"dexterity\":3819.6266715514435,\"agility\":3321.414497000987,\"charisma\":551866.2014486438,\"intelligence\":0},\"mults\":{\"hacking_chance\":4.111561708064498,\"hacking_speed\":3.450012713334949,\"hacking_money\":21.78703179716408,\"hacking_grow\":12.467930647094834,\"hacking\":22.593065646066837,\"strength\":189.9055880075586,\"defense\":155.0875608592265,\"dexterity\":47.915576924101856,\"agility\":23.12886773960173,\"charisma\":10.253333030154629,\"hacking_exp\":26.46020983849969,\"strength_exp\":4.178931173881623,\"defense_exp\":4.178931173881623,\"dexterity_exp\":4.8057708499638645,\"agility_exp\":4.178931173881623,\"charisma_exp\":10.358358490012115,\"company_rep\":26.83415333463283,\"faction_rep\":4.061719089188514,\"crime_money\":5.26110353038005,\"crime_success\":2.8153062369926696,\"hacknet_node_money\":4.356057483701657,\"hacknet_node_purchase_cost\":0.4429238424811707,\"hacknet_node_ram_cost\":0.5789854150080663,\"hacknet_node_core_cost\":0.5789854150080663,\"hacknet_node_level_cost\":0.4921376027568564,\"work_money\":4.051293761808003,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":40,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"TITN-41 Gene-Modification Injection\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"OmniTek InfoLoad\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"The Red Pill\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"Graphene BrachiBlades Upgrade\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface NeuroNet Injector\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"ECorp HVMind Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Unstable Circadian Modulator\"},{\"level\":1,\"name\":\"SPTN-97 Gene Modification\"},{\"level\":1,\"name\":\"Xanipher\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"Photosynthetic Cells\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Neotra\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Graphene Bionic Arms Upgrade\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"QLink\"},{\"level\":1,\"name\":\"Hydroflame Left Arm\"},{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"Graphene Bone Lacings\"},{\"level\":41,\"name\":\"NeuroFlux Governor\"},{\"level\":42,\"name\":\"NeuroFlux Governor\"},{\"level\":43,\"name\":\"NeuroFlux Governor\"},{\"level\":44,\"name\":\"NeuroFlux Governor\"},{\"level\":45,\"name\":\"NeuroFlux Governor\"},{\"level\":46,\"name\":\"NeuroFlux Governor\"},{\"level\":47,\"name\":\"NeuroFlux Governor\"},{\"level\":48,\"name\":\"NeuroFlux Governor\"},{\"level\":49,\"name\":\"NeuroFlux Governor\"},{\"level\":50,\"name\":\"NeuroFlux Governor\"},{\"level\":51,\"name\":\"NeuroFlux Governor\"},{\"level\":52,\"name\":\"NeuroFlux Governor\"},{\"level\":53,\"name\":\"NeuroFlux Governor\"}],\"city\":\"Sector-12\",\"bitNodeN\":2,\"corporation\":null,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":4594469.914800099,\"hack\":15944,\"str\":141827,\"def\":53768,\"dex\":19431,\"agi\":4284,\"cha\":12340,\"hack_exp\":638462.0350336396,\"str_exp\":765586.5667271612,\"def_exp\":351544.57063670486,\"dex_exp\":795190.6890508692,\"agi_exp\":26514.843625966663,\"cha_exp\":611591.9565534043,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1898028.6657028296,\"str_asc_points\":864471.2430438165,\"def_asc_points\":551489.2902555272,\"dex_asc_points\":2779563.2011676724,\"agi_asc_points\":43177.007295553085,\"cha_asc_points\":2790815.5790272336,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"1\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":4581483.718011992,\"hack\":15757,\"str\":141293,\"def\":53618,\"dex\":19490,\"agi\":4285,\"cha\":12385,\"hack_exp\":631528.4806191678,\"str_exp\":762800.4539548397,\"def_exp\":350578.5722567204,\"dex_exp\":796859.1818302284,\"agi_exp\":26517.111183978082,\"cha_exp\":613172.7470554509,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1859469.3175466435,\"str_asc_points\":858836.8885140371,\"def_asc_points\":548875.5578889552,\"dex_asc_points\":2794769.38306043,\"agi_asc_points\":43184.39263462875,\"cha_asc_points\":2809209.5685803695,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"2\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":4402427.382192478,\"hack\":14356,\"str\":139936,\"def\":53178,\"dex\":18349,\"agi\":4250,\"cha\":11689,\"hack_exp\":581877.6947454475,\"str_exp\":756145.9992720098,\"def_exp\":347995.0730373621,\"dex_exp\":755425.4725022771,\"agi_exp\":26347.167247238325,\"cha_exp\":582657.4504431705,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1579803.4992443395,\"str_asc_points\":844441.567317293,\"def_asc_points\":541143.1057231647,\"dex_asc_points\":2513499.209572986,\"agi_asc_points\":42632.6425863596,\"cha_asc_points\":2538528.9453989584,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"3\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":4353478.119512659,\"hack\":14141,\"str\":138397,\"def\":52904,\"dex\":18059,\"agi\":4251,\"cha\":11573,\"hack_exp\":573908.3175408,\"str_exp\":748583.5021061336,\"def_exp\":346325.9934241536,\"dex_exp\":744508.3430245655,\"agi_exp\":26352.107223529038,\"cha_exp\":577269.8886101375,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1538848.3005703918,\"str_asc_points\":828258.4509853804,\"def_asc_points\":536368.4216823396,\"dex_asc_points\":2444466.102868183,\"agi_asc_points\":42648.630945585435,\"cha_asc_points\":2495311.856843682,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"4\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":2701828.181434805,\"hack\":14148,\"str\":146056,\"def\":54827,\"dex\":18071,\"agi\":4262,\"cha\":11312,\"hack_exp\":401812.4618495375,\"str_exp\":640060.7887388804,\"def_exp\":294360.8372699929,\"dex_exp\":530853.8810031409,\"agi_exp\":26390.339962418388,\"cha_exp\":383697.3395216885,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1709679.8790963537,\"str_asc_points\":963464.7058535151,\"def_asc_points\":605916.3438615008,\"dex_asc_points\":2692299.992265731,\"agi_asc_points\":42820.9371642188,\"cha_asc_points\":2687205.3362151682,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"5\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":2675635.5384666757,\"hack\":13748,\"str\":146429,\"def\":54732,\"dex\":17778,\"agi\":4271,\"cha\":11163,\"hack_exp\":391743.64321225166,\"str_exp\":641479.9396648047,\"def_exp\":294017.84011997626,\"dex_exp\":523113.2266104258,\"agi_exp\":26446.78296174946,\"cha_exp\":379118.7844139029,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1626638.9750360097,\"str_asc_points\":967787.927519503,\"def_asc_points\":604036.70073111,\"dex_asc_points\":2616731.3494810336,\"agi_asc_points\":42957.774507519454,\"cha_asc_points\":2626270.474480739,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"6\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":2617866.9725323403,\"hack\":13164,\"str\":144892,\"def\":54476,\"dex\":17204,\"agi\":3873,\"cha\":10701,\"hack_exp\":376921.068445516,\"str_exp\":637846.5290920073,\"def_exp\":293697.68090156524,\"dex_exp\":508406.5330711181,\"agi_exp\":24587.50447173125,\"cha_exp\":365117.4929929925,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1508784.505034517,\"str_asc_points\":949085.5647629194,\"def_asc_points\":598619.0712790588,\"dex_asc_points\":2470813.7719471436,\"agi_asc_points\":36639.82012216524,\"cha_asc_points\":2441102.471053755,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"7\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":2532999.745635947,\"hack\":12889,\"str\":155940,\"def\":59343,\"dex\":15922,\"agi\":2779,\"cha\":7372,\"hack_exp\":366971.9912959849,\"str_exp\":692198.9095563361,\"def_exp\":321745.5035605847,\"dex_exp\":473726.38298903074,\"agi_exp\":19246.79865934969,\"cha_exp\":263168.60452104785,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1458202.0144438623,\"str_asc_points\":1074528.4441207675,\"def_asc_points\":690386.2245327871,\"dex_asc_points\":2160390.7603440033,\"agi_asc_points\":21419.495810380045,\"cha_asc_points\":1283294.4640080656,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"8\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":1918180.7489610813,\"hack\":12700,\"str\":158758,\"def\":58735,\"dex\":14962,\"agi\":2321,\"cha\":7156,\"hack_exp\":299984.5054843341,\"str_exp\":678670.9917767413,\"def_exp\":305649.25972461834,\"dex_exp\":377652.1945761705,\"agi_exp\":16955.826605232603,\"cha_exp\":209001.40140367992,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1506858.930858951,\"str_asc_points\":1119841.2546306953,\"def_asc_points\":687211.726244623,\"dex_asc_points\":2040905.6090881096,\"agi_asc_points\":16010.548345921077,\"cha_asc_points\":1303781.1860709004,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"9\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":1420509.233847158,\"hack\":10198,\"str\":143205,\"def\":51413,\"dex\":10259,\"agi\":1919,\"cha\":5679,\"hack_exp\":230909.45065192558,\"str_exp\":702036.2231866397,\"def_exp\":307908.82447999844,\"dex_exp\":260121.14927586235,\"agi_exp\":14818.681512686166,\"cha_exp\":164972.8195971436,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1056656.9513688507,\"str_asc_points\":902645.8184995311,\"def_asc_points\":525351.1479029844,\"dex_asc_points\":1077779.9459466382,\"agi_asc_points\":11799.134488155314,\"cha_asc_points\":889548.0844117447,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"guy-9\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":1441384.4059389972,\"hack\":10148,\"str\":139390,\"def\":50076,\"dex\":10222,\"agi\":1890,\"cha\":5640,\"hack_exp\":232988.59731096917,\"str_exp\":670702.6681917112,\"def_exp\":294535.1438666748,\"dex_exp\":261488.08724695444,\"agi_exp\":14644.35738321541,\"cha_exp\":165070.7171098248,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1043163.4558255642,\"str_asc_points\":866112.6725661093,\"def_asc_points\":505362.3931616341,\"dex_asc_points\":1068306.9471096,\"agi_asc_points\":11523.161823308656,\"cha_asc_points\":877360.1961913091,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"guy-10\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":1303284.1845161598,\"hack\":9665,\"str\":140038,\"def\":50198,\"dex\":9882,\"agi\":1740,\"cha\":5383,\"hack_exp\":214606.88519401458,\"str_exp\":714821.8403201567,\"def_exp\":313001.8081623347,\"dex_exp\":247832.07108438504,\"agi_exp\":13831.83170562522,\"cha_exp\":155408.4646197167,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":972232.9823783285,\"str_asc_points\":858869.6757240307,\"def_asc_points\":498241.2573787231,\"dex_asc_points\":1015747.3019121194,\"agi_asc_points\":10100.079354176223,\"cha_asc_points\":816045.2507055893,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"guy-11\"}}],\"wanted\":77607.56471716377,\"respect\":34543549.14585057,\"isHackingGang\":false,\"respectGainRate\":0,\"wantedGainRate\":0,\"moneyGainRate\":0,\"storedCycles\":598187,\"storedTerritoryAndPowerCycles\":24,\"territoryClashChance\":1,\"territoryWarfareEngaged\":true,\"notifyMemberDeath\":true}},\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Illuminati\",\"Daedalus\",\"The Covenant\",\"MegaCorp\",\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"The Syndicate\",\"Silhouette\",\"Slum Snakes\",\"Netburners\",\"CyberSec\",\"Shadows of Anarchy\"],\"factionInvitations\":[\"Sector-12\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130443.19999999326,\"ram\":64,\"totalMoneyGenerated\":5211303689.51494,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130441.19999999326,\"ram\":64,\"totalMoneyGenerated\":5211223788.014677,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130440.19999999326,\"ram\":64,\"totalMoneyGenerated\":5211100130.930938,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130438.99999999326,\"ram\":64,\"totalMoneyGenerated\":5211054472.930788,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130437.99999999326,\"ram\":64,\"totalMoneyGenerated\":5210890104.130247,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130436.99999999326,\"ram\":64,\"totalMoneyGenerated\":5210843304.680094,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130435.99999999326,\"ram\":64,\"totalMoneyGenerated\":5210789009.708248,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130434.79999999327,\"ram\":64,\"totalMoneyGenerated\":5210751988.679793,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130433.79999999327,\"ram\":64,\"totalMoneyGenerated\":5210695353.73544,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130432.79999999327,\"ram\":64,\"totalMoneyGenerated\":5210683501.679568,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130431.79999999327,\"ram\":64,\"totalMoneyGenerated\":5210627855.991885,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130430.79999999327,\"ram\":64,\"totalMoneyGenerated\":5210599034.379291,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130429.59999999327,\"ram\":64,\"totalMoneyGenerated\":5210553756.862475,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130427.59999999327,\"ram\":64,\"totalMoneyGenerated\":5210489074.695596,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130425.39999999327,\"ram\":64,\"totalMoneyGenerated\":5210413738.995348,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130423.39999999327,\"ram\":64,\"totalMoneyGenerated\":5210344491.028454,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130421.19999999327,\"ram\":64,\"totalMoneyGenerated\":5210268774.8448715,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130418.99999999328,\"ram\":64,\"totalMoneyGenerated\":5210195341.561297,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130416.99999999328,\"ram\":64,\"totalMoneyGenerated\":5210074195.667565,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130414.59999999328,\"ram\":64,\"totalMoneyGenerated\":5210027833.773247,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130410.39999999329,\"ram\":64,\"totalMoneyGenerated\":5209908076.643686,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130409.19999999329,\"ram\":64,\"totalMoneyGenerated\":5209860516.226863,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130405.7999999933,\"ram\":64,\"totalMoneyGenerated\":5209743707.843146,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130362.59999999333,\"ram\":64,\"totalMoneyGenerated\":5208076810.354334,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130358.99999999334,\"ram\":64,\"totalMoneyGenerated\":5207937553.4538765,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130246.59999999344,\"ram\":64,\"totalMoneyGenerated\":5203447089.139117,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130239.39999999345,\"ram\":64,\"totalMoneyGenerated\":5203161726.638179,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130185.39999999349,\"ram\":64,\"totalMoneyGenerated\":5201004386.131088,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130039.59999999362,\"ram\":64,\"totalMoneyGenerated\":5195179566.761944,\"name\":\"hacknet-node-28\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":130010.39999999365,\"ram\":64,\"totalMoneyGenerated\":5194013004.858109,\"name\":\"hacknet-node-29\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":39950.75013120554,\"onlineTimeSeconds\":129706.19999999393,\"ram\":64,\"totalMoneyGenerated\":5181853137.9681425,\"name\":\"hacknet-node-30\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{\"MegaCorp\":\"Chief Executive Officer\"},\"karma\":-22737.749999999953,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":4184362011689.344,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-90816,\"codingcontract\":225000000,\"corporation\":0,\"crime\":0,\"gang\":218288995748.8866,\"hacking\":208192458853200.53,\"hacknet\":161437115017.87714,\"hacknet_expenses\":-107082033620.6408,\"hospitalization\":-77300000,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":4184361011689.344,\"work\":328838960.9917606,\"servers\":-42297269166936.805,\"other\":-280200000,\"augmentations\":-161983669000236.47}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2515936,\"codingcontract\":4875000000,\"corporation\":0,\"crime\":1545474793.130461,\"gang\":822413417621.1833,\"hacking\":216659652734070.44,\"hacknet\":231086609026.53333,\"hacknet_expenses\":-490668199179.6433,\"hospitalization\":-77300000,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":4596235862439.253,\"work\":328838960.9917606,\"servers\":-47880778954542.6,\"other\":-9135100000,\"augmentations\":-164743004142754.3}},\"playtimeSinceLastAug\":130607200,\"playtimeSinceLastBitnode\":345340000,\"lastAugReset\":1701285713861,\"lastNodeReset\":1701070980100,\"purchasedServers\":[\"node-0\",\"node-1\",\"node-2\",\"node-3\",\"node-4\",\"node-5\",\"node-6\",\"node-7\",\"node-8\",\"node-9\",\"node-10\",\"node-11\",\"node-12\",\"node-13\",\"node-14\",\"node-15\",\"node-16\",\"node-17\",\"node-18\",\"node-19\",\"node-20\",\"node-21\",\"node-22\",\"node-23\",\"node-24\"],\"scriptProdSinceLastAug\":17336548691316.027,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,1]]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1700338719175},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1700339619175},{\"ID\":\"WORKOUT\",\"unlockedOn\":1700342079172},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1700345744715},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1700346077358},{\"ID\":\"TOR\",\"unlockedOn\":1700347817357},{\"ID\":\"TRAVEL\",\"unlockedOn\":1700348057357},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1700379458941},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1700384318934},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1700409222036},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1700415118310},{\"ID\":\"FROZE\",\"unlockedOn\":1700415885902},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1700419154037},{\"ID\":\"NITESEC\",\"unlockedOn\":1700424074038},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1700426054031},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1700429256501},{\"ID\":\"4S\",\"unlockedOn\":1700500248691},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1700500968683},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1700599162805},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1700655655173},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1700664198439},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1700689338435},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1700775178880},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1700847111216},{\"ID\":\"DONATION\",\"unlockedOn\":1700848851164},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1700869971216},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1700985627342},{\"ID\":\"SF1.1\",\"unlockedOn\":1701071007305},{\"ID\":\"GANG\",\"unlockedOn\":1701122018887},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1701206940124},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1701245393333},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1701270534441},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1701270834453},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1701275155165},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1701286692126},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1701286812133}],\"terminalCommandHistory\":[\"  home;connect sigma-cosmetics;connect CSEC;connect silver-helix;connect the-hub;connect I.I.I.I;connect aevum-police;connect aerocorp;backdoor; \",\"  home;connect sigma-cosmetics;connect CSEC;connect silver-helix;connect the-hub;connect I.I.I.I;connect aevum-police;connect aerocorp;connect deltaone;connect solaris;connect nova-med;connect run4theh111z;connect stormtech;backdoor;\",\"  home;connect sigma-cosmetics;connect CSEC;connect silver-helix;connect the-hub;connect I.I.I.I;connect aevum-police;connect aerocorp;connect deltaone;backdoor; \",\"  home;connect sigma-cosmetics;connect CSEC;connect silver-helix;connect the-hub;connect I.I.I.I;connect aevum-police;connect galactic-cyber;backdoor; \",\"run to\",\"home\",\"run to-pwn.js \",\"  home;connect hong-fang-tea;backdoor; \",\"  home;connect harakiri-sushi;backdoor; \",\"  home;connect hong-fang-tea;connect max-hardware;backdoor; \",\"home;connect iron-gym;backdoor; \",\"  home;connect sigma-cosmetics;connect nectar-net;connect phantasy;backdoor; \",\"  home;connect sigma-cosmetics;connect CSEC;connect silver-helix;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect omega-net;backdoor; \",\"home\",\"run to-pwn.js \",\" home;connect sigma-cosmetics;connect CSEC;connect neo-net;connect crush-fitness;backdoor; \",\" home;connect sigma-cosmetics;connect nectar-net;connect phantasy;connect johnson-ortho;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect silver-helix;connect the-hub;backdoor; \",\" home;connect sigma-cosmetics;connect nectar-net;connect phantasy;connect computek;connect rothman-uni;backdoor; \",\" home;connect sigma-cosmetics;connect nectar-net;connect phantasy;connect computek;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect silver-helix;connect netlink;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect neo-net;connect crush-fitness;connect catalyst;backdoor; \",\" home;connect sigma-cosmetics;connect nectar-net;connect phantasy;connect johnson-ortho;connect summit-uni;backdoor; \",\"   home;connect sigma-cosmetics;connect CSEC;connect silver-helix;connect the-hub;connect I.I.I.I;connect aevum-police;backdoor; \",\" home;connect sigma-cosmetics;connect nectar-net;connect phantasy;connect computek;connect zb-institute;connect millenium-fitness;backdoor;\",\" home;connect sigma-cosmetics;connect CSEC;connect neo-net;connect crush-fitness;connect catalyst;connect rho-construction;backdoor; \",\" home;connect sigma-cosmetics;connect nectar-net;connect phantasy;connect johnson-ortho;connect syscore;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect neo-net;connect crush-fitness;connect catalyst;connect alpha-ent;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect neo-net;connect crush-fitness;connect catalyst;connect lexo-corp;backdoor; \",\" home;connect sigma-cosmetics;connect nectar-net;connect phantasy;connect computek;connect zb-institute;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect neo-net;connect crush-fitness;connect catalyst;connect rho-construction;connect snap-fitness;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect silver-helix;connect the-hub;connect I.I.I.I;connect aevum-police;connect global-pharm;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect neo-net;connect crush-fitness;connect catalyst;connect rho-construction;connect snap-fitness;connect unitalife;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect silver-helix;connect the-hub;connect I.I.I.I;connect aevum-police;connect aerocorp;connect deltaone;connect zeus-med;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect neo-net;connect crush-fitness;connect catalyst;connect rho-construction;connect snap-fitness;connect omnia;connect univ-energy;connect zb-def;backdoor; \",\"  home;connect sigma-cosmetics;connect CSEC;connect silver-helix;connect the-hub;connect I.I.I.I;connect aevum-police;connect aerocorp;connect deltaone;connect solaris;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect neo-net;connect crush-fitness;connect catalyst;connect rho-construction;connect snap-fitness;connect omnia;connect univ-energy;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect silver-helix;connect the-hub;connect I.I.I.I;connect aevum-police;connect aerocorp;connect deltaone;connect solaris;connect nova-med;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect neo-net;connect crush-fitness;connect catalyst;connect rho-construction;connect snap-fitness;connect omnia;connect icarus;connect infocomm;connect titan-labs;connect helios;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect neo-net;connect crush-fitness;connect catalyst;connect rho-construction;connect snap-fitness;connect omnia;connect icarus;connect infocomm;connect titan-labs;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect neo-net;connect crush-fitness;connect catalyst;connect rho-construction;connect snap-fitness;connect omnia;connect icarus;connect infocomm;connect microdyne;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect silver-helix;connect the-hub;connect I.I.I.I;connect aevum-police;connect aerocorp;connect deltaone;connect solaris;connect nova-med;connect run4theh111z;connect vitalife;backdoor; \",\" home;connect sigma-cosmetics;connect CSEC;connect neo-net;connect crush-fitness;connect catalyst;connect rho-construction;connect snap-fitness;connect omnia;backdoor; \",\"home\",\"run to-pwn.js \",\"run find-contracts.js \",\"ps\",\"kill bot.js -g; run bot.js -g\",\"run find-contracts.js \"],\"lastUpdate\":1701416321107,\"lastSave\":1701416272120,\"totalPlaytime\":1078327600,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":633369,\"factionWorkType\":\"hacking\",\"factionName\":\"Illuminati\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"183c0fbbe8b548\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":6,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"51.2.7.6\",\"isConnectedTo\":true,\"maxRam\":262144,\"messages\":[\"hackers-starting-handbook.lit\",\"truthgazer.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"foodnstuff.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nconst hostname = 'foodnstuff';\\nexport async function main(ns) {\\n  while (true) {\\n    for (let i = 0; i < 5; i++)\\n      await ns.hack(hostname);\\n\\n    await ns.grow(hostname);\\n    for (let i = 0; i < 3; i++)\\n      await ns.weaken(hostname);\\n  }\\n}\",\"filename\":\"foodnstuff.js\",\"server\":\"home\"}}],[\"deploy_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help || args._.length < 1) {\\n\\t\\tns.tprint(\\\"This script deploys hack.js on a server with maximum threads possible.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} HOST`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n  const host = args._[0];\\n  ns.run(\\\"deploy.js\\\", {}, host, \\\"hack.js\\\", host);\\n}\",\"filename\":\"deploy_hack.js\",\"server\":\"home\"}}],[\"template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await template(ns, args, flags);\\r\\n}\\r\\nexport async function template(ns, { host }, { d: depth }) {\\r\\n    console.log(\\\"template\\\");\\r\\n}\\r\\n\",\"filename\":\"template.js\",\"server\":\"home\"}}],[\"weakenall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nconst file = \\\"lib/weaken.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const { d: depth } = flags;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        await deploy(ns, { ...args, host, script: file }, { ...flags });\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"weakenall.js\",\"server\":\"home\"}}],[\"to-pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await toPwn(ns, flags);\\r\\n}\\r\\nexport async function toPwn(ns, { d: depth }) {\\r\\n    const serversToPwn = [];\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host == \\\"home\\\") {\\r\\n            return;\\r\\n        }\\r\\n        const server = ns.getServer(host);\\r\\n        if (!server.requiredHackingSkill) {\\r\\n            return;\\r\\n        }\\r\\n        if (ns.getHackingLevel() < server.requiredHackingSkill) {\\r\\n            return;\\r\\n        }\\r\\n        if (!server.backdoorInstalled && server.hasAdminRights) {\\r\\n            serversToPwn.push({ server, nodes: acc.nodes });\\r\\n        }\\r\\n    }, { excludes: ns.getPurchasedServers() });\\r\\n    serversToPwn\\r\\n        .sort(({ server: serverA }, { server: serverB }) => {\\r\\n        return ((serverB.requiredHackingSkill || 0) -\\r\\n            (serverA.requiredHackingSkill || 0));\\r\\n    })\\r\\n        .forEach((server) => {\\r\\n        ns.tprintf(generateConnect(server.nodes, server.server.hostname));\\r\\n    });\\r\\n}\\r\\nexport function generateConnect(nodes, host) {\\r\\n    return (\\\" home;\\\" +\\r\\n        nodes\\r\\n            .slice(1)\\r\\n            .concat([host])\\r\\n            .map((node) => `connect ${node};`)\\r\\n            .join(\\\"\\\") +\\r\\n        \\\"backdoor; \\\");\\r\\n}\\r\\n\",\"filename\":\"to-pwn.js\",\"server\":\"home\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"home\"}}],[\"trade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await trade(ns, args, flags);\\r\\n}\\r\\nexport async function trade(ns, {}, {}) {\\r\\n    const stock = ns.stock;\\r\\n    const fee = stock.getConstants().StockMarketCommission;\\r\\n    for (;;) {\\r\\n        //TODO\\r\\n        ns.sleep(stock.getConstants().msPerStockUpdate);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"trade.js\",\"server\":\"home\"}}],[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"home\"}}],[\"bot.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { buy } from \\\"/buy\\\";\\r\\nimport { deployall } from \\\"/deployall\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { hasFormulas, validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { ps } from \\\"/ps\\\";\\r\\nimport { upgradeServers } from \\\"./upgrade-servers\\\";\\r\\nimport { maxServers } from \\\"/lib/maxServers\\\";\\r\\nimport { pwn } from \\\"/pwn\\\";\\r\\nimport { killall } from \\\"/killall\\\";\\r\\nimport { ThreadCounts } from \\\"/lib/misc\\\";\\r\\nimport { upgradeHacknet } from \\\"/upgrade-hacknet\\\";\\r\\nimport { manageGang } from \\\"/gang\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //use home in worker pool\\r\\n    w: false,\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n    //prompt\\r\\n    p: false,\\r\\n    //upgrade nodes\\r\\n    u: false,\\r\\n    //upgrade hacknet nodes\\r\\n    uh: false,\\r\\n    //manage gang\\r\\n    g: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await bot(ns, flags);\\r\\n}\\r\\nconst library = {\\r\\n    specializedHack: \\\"lib/specialized-hack.js\\\",\\r\\n    specializedGrow: \\\"lib/specialized-grow.js\\\",\\r\\n    specializedWeaken: \\\"lib/specialized-weaken.js\\\",\\r\\n};\\r\\nexport async function bot(ns, { w, u, uh, g, ...flags }) {\\r\\n    for (;;) {\\r\\n        /**\\r\\n         * Early game getting the 25 servers\\r\\n         */\\r\\n        await buy(ns, { pool: maxServers, \\\"min-ram\\\": 2, ram: 2 });\\r\\n        /**\\r\\n         * Upgrade\\r\\n         */\\r\\n        if (u)\\r\\n            await upgradeServers(ns, { ...flags });\\r\\n        if (uh)\\r\\n            await upgradeHacknet(ns, { ...flags });\\r\\n        if (g)\\r\\n            await manageGang(ns, { ...flags });\\r\\n        await pwn(ns, { d: defaultDepth, p: false, dl: false });\\r\\n        await walkAllHackableServer(ns, async (data) => {\\r\\n            if (!data.weaken.inProgress && data.weaken.shouldPerform(data)) {\\r\\n                const weakenThreadsCounts = weakenThreads(ns, data);\\r\\n                return await deployall(ns, { script: library.specializedWeaken, target: data.server.hostname }, {\\r\\n                    d: defaultDepth,\\r\\n                    w,\\r\\n                    x: weakenThreadsCounts.threads,\\r\\n                    xh: weakenThreadsCounts.homeThreads,\\r\\n                });\\r\\n            }\\r\\n            return true;\\r\\n        }, async (data) => {\\r\\n            if (!data.grow.inProgress && data.grow.shouldPerform(data)) {\\r\\n                const growThreadsCounts = growThreads(ns, data);\\r\\n                return await deployall(ns, { script: library.specializedGrow, target: data.server.hostname }, {\\r\\n                    d: defaultDepth,\\r\\n                    w,\\r\\n                    x: growThreadsCounts.threads,\\r\\n                    xh: growThreadsCounts.homeThreads,\\r\\n                });\\r\\n            }\\r\\n            return true;\\r\\n        }, async (data) => {\\r\\n            if (!data.hack.inProgress && data.hack.shouldPerform(data)) {\\r\\n                const hackThreadsCounts = hackThreads(ns, data);\\r\\n                //For some reason, it return -1 in some case, I need to understand those\\r\\n                if (hackThreadsCounts.threads >= 0) {\\r\\n                    // await ns.sleep(1);\\r\\n                    return await deployall(ns, { script: library.specializedHack, target: data.server.hostname }, {\\r\\n                        d: defaultDepth,\\r\\n                        w,\\r\\n                        x: hackThreadsCounts.threads,\\r\\n                        xh: hackThreadsCounts.homeThreads,\\r\\n                    });\\r\\n                }\\r\\n                else {\\r\\n                    //Print all kill all workers\\r\\n                    ns.tprint(ns.sprintf(\\\"Could not hackAnalyse %s: %s %s\\\", data.server.hostname, hackThreads, JSON.stringify(data.server)));\\r\\n                    killall(ns, { d: defaultDepth });\\r\\n                    ns.exit();\\r\\n                }\\r\\n            }\\r\\n            return true;\\r\\n        });\\r\\n        if (flags.p && !(await ns.prompt(\\\"Continue?\\\", { type: \\\"boolean\\\" }))) {\\r\\n            ns.exit();\\r\\n        }\\r\\n        await ns.sleep(1e3);\\r\\n    }\\r\\n}\\r\\nasync function walkAllHackableServer(ns, ...callbacks) {\\r\\n    const servers = await allHackableServersSorted(ns, \\\"money-desc\\\");\\r\\n    let shouldContinue = true;\\r\\n    while (servers.length) {\\r\\n        const server = servers.pop();\\r\\n        if (!server)\\r\\n            break;\\r\\n        if (!shouldContinue)\\r\\n            break;\\r\\n        const { hostname } = server;\\r\\n        const processes = (await ps(ns, { d: defaultDepth, p: false })).filter((process) => process.args?.[0] === hostname);\\r\\n        for (const callback of callbacks) {\\r\\n            shouldContinue = await callback({\\r\\n                server,\\r\\n                processes,\\r\\n                weaken: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedWeaken),\\r\\n                    serverMinSecurity: ns.getServerMinSecurityLevel(hostname),\\r\\n                    serverSecurity: ns.getServerSecurityLevel(hostname),\\r\\n                    shouldPerform: (data) => data.weaken.serverSecurity > data.weaken.serverMinSecurity,\\r\\n                },\\r\\n                grow: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedGrow),\\r\\n                    maxMoney: ns.getServerMaxMoney(hostname),\\r\\n                    money: ns.getServerMoneyAvailable(hostname),\\r\\n                    shouldPerform: (data) => data.grow.money < data.grow.maxMoney,\\r\\n                },\\r\\n                hack: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedHack),\\r\\n                    hackChance: ns.hackAnalyzeChance(hostname),\\r\\n                    shouldPerform: (data) => !!data.grow.money && data.hack.hackChance > 0,\\r\\n                },\\r\\n            });\\r\\n            if (!shouldContinue)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\nasync function allHackableServersSorted(ns, order) {\\r\\n    const hosts = [];\\r\\n    await walkDeepFirst(ns, defaultDepth, async (host) => {\\r\\n        hosts.push(host);\\r\\n    });\\r\\n    return hosts\\r\\n        .map(ns.getServer)\\r\\n        .filter((server) => server.hasAdminRights)\\r\\n        .filter((server) => (server.requiredHackingSkill || 0) <= ns.getHackingLevel())\\r\\n        .filter((server) => !!server.moneyMax)\\r\\n        .sort(({ moneyMax: moneyMaxA }, { moneyMax: moneyMaxB }) => order === \\\"money-asc\\\"\\r\\n        ? (moneyMaxB || 0) - (moneyMaxA || 0)\\r\\n        : (moneyMaxA || 0) - (moneyMaxB || 0));\\r\\n}\\r\\nfunction hackThreads(ns, data) {\\r\\n    return new ThreadCounts(Math.ceil(ns.hackAnalyzeThreads(data.server.hostname, data.grow.money * 0.4)), Math.ceil(ns.hackAnalyzeThreads(data.server.hostname, data.grow.money * 0.4)));\\r\\n}\\r\\nfunction weakenThreads(ns, data) {\\r\\n    return new ThreadCounts(getOptimalThreadsToWeaken(ns, data, getHomeCpuCores(ns)), getOptimalThreadsToWeaken(ns, data));\\r\\n}\\r\\nfunction getOptimalThreadsToWeaken(ns, data, cpuCores) {\\r\\n    const { serverSecurity, serverMinSecurity } = data.weaken;\\r\\n    const target = serverSecurity - serverMinSecurity;\\r\\n    let lowerBound = 0, upperBound = 100e3;\\r\\n    let threadCount = 0;\\r\\n    while (lowerBound !== upperBound) {\\r\\n        threadCount = Math.floor((upperBound - lowerBound) / 2 + lowerBound);\\r\\n        const actual = ns.weakenAnalyze(threadCount, cpuCores);\\r\\n        if (actual >= target && actual <= target + 1) {\\r\\n            break;\\r\\n        }\\r\\n        if (actual > target) {\\r\\n            upperBound = threadCount;\\r\\n            continue;\\r\\n        }\\r\\n        if (actual < target) {\\r\\n            lowerBound = threadCount;\\r\\n            continue;\\r\\n        }\\r\\n    }\\r\\n    return threadCount;\\r\\n}\\r\\nfunction growThreads(ns, data) {\\r\\n    const formulasEnabled = hasFormulas(ns);\\r\\n    const cpuCores = getHomeCpuCores(ns);\\r\\n    if (formulasEnabled) {\\r\\n        return new ThreadCounts(ns.formulas.hacking.growThreads(data.server, ns.getPlayer(), data.grow.maxMoney, cpuCores), ns.formulas.hacking.growThreads(data.server, ns.getPlayer(), data.grow.maxMoney));\\r\\n    }\\r\\n    return new ThreadCounts(data.grow.money\\r\\n        ? Math.ceil(ns.growthAnalyze(data.server.hostname, data.grow.maxMoney / data.grow.money, cpuCores))\\r\\n        : 100, data.grow.money\\r\\n        ? Math.ceil(ns.growthAnalyze(data.server.hostname, data.grow.maxMoney / data.grow.money))\\r\\n        : 100);\\r\\n}\\r\\nfunction getHomeCpuCores(ns) {\\r\\n    return ns.getServer(\\\"home\\\").cpuCores;\\r\\n}\\r\\n\",\"filename\":\"bot.js\",\"server\":\"home\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"home\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"home\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"home\"}}],[\"test-contract.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { solve } from \\\"/contracts/solve\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    await template(ns);\\r\\n}\\r\\nconst contractType = \\\"Unique Paths in a Grid I\\\";\\r\\nexport async function template(ns) {\\r\\n    if (!ns\\r\\n        .ls(\\\"home\\\")\\r\\n        .filter((file) => file.endsWith(\\\".cct\\\"))\\r\\n        .map((script) => ns.codingcontract.getContractType(script))\\r\\n        .find((type) => type === contractType))\\r\\n        ns.codingcontract.createDummyContract(contractType);\\r\\n    ns.ls(\\\"home\\\")\\r\\n        .filter((file) => file.endsWith(\\\".cct\\\"))\\r\\n        .forEach((contract) => {\\r\\n        solve(ns, { host: \\\"home\\\", script: contract });\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"test-contract.js\",\"server\":\"home\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"home\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"home\"}}],[\"buy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { maxServers } from \\\"/lib/maxServers\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    pool: maxServers,\\r\\n    \\\"min-ram\\\": 8,\\r\\n    ram: 128,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await buy(ns, flags);\\r\\n}\\r\\nexport async function buy(ns, { pool, \\\"min-ram\\\": minRam, ram: initialRam }) {\\r\\n    const purchase = (ram = initialRam, index = ns.getPurchasedServers().length) => {\\r\\n        if (ram < minRam) {\\r\\n            return;\\r\\n        }\\r\\n        if (ns.getPurchasedServers().length >= pool) {\\r\\n            return;\\r\\n        }\\r\\n        const newHost = ns.purchaseServer(\\\"node-\\\" + index, ram);\\r\\n        if (newHost) {\\r\\n            ns.toast(ns.sprintf(\\\"Purchased %s with %sGB \\\", newHost, ram), \\\"info\\\");\\r\\n            purchase(ram, index + 1);\\r\\n        }\\r\\n        else {\\r\\n            purchase(ram / 2, index);\\r\\n        }\\r\\n    };\\r\\n    purchase();\\r\\n}\\r\\n\",\"filename\":\"buy.js\",\"server\":\"home\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"home\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"home\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"home\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"home\"}}],[\"contracts/solve.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { lineHeader } from \\\"/lib/misc\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    script: \\\"contract-XX.cct\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await solve(ns, args);\\r\\n}\\r\\nexport async function solve(ns, { host, script }) {\\r\\n    const contractDefinition = types[ns.codingcontract.getContractType(script, host)];\\r\\n    if (contractDefinition.solvable) {\\r\\n        if (!contractDefinition.solve(ns, script, host, ns.codingcontract.getData(script, host))) {\\r\\n            const errorMessage = ns.sprintf(\\\"Failed to solve %s on %s\\\", script, host);\\r\\n            ns.toast(errorMessage, \\\"error\\\");\\r\\n            ns.tprint(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction attemp(ns, script, host, data, solution) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(\\\"%s: %s (%s)\\\", host, script, ns.codingcontract.getContractType(script, host));\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    const reward = ns.codingcontract.attempt(solution, script, host);\\r\\n    if (reward) {\\r\\n        const message = `Contract solved successfully! Reward: ${reward}`;\\r\\n        ns.toast(message, \\\"success\\\");\\r\\n        ns.tprint(message);\\r\\n        return true;\\r\\n    }\\r\\n    else {\\r\\n        const message = \\\"Failed to solve contract\\\";\\r\\n        ns.toast(message, \\\"error\\\");\\r\\n        ns.tprint(message);\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\nconst types = {\\r\\n    \\\"Find Largest Prime Factor\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, primeFactor(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Subarray with Maximum Sum\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, findMaxSubArraySum(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Total Ways to Sum\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, countCompose(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Total Ways to Sum II\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, countComposeRestricted(data[0], data[1]));\\r\\n        },\\r\\n    },\\r\\n    \\\"Spiralize Matrix\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Array Jumping Game\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Array Jumping Game II\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, countJumps(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Merge Overlapping Intervals\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Generate IP Addresses\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, parseIp(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Algorithmic Stock Trader I\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, maxTxProfit(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Algorithmic Stock Trader II\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Algorithmic Stock Trader III\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            const prices = data;\\r\\n            let max = maxTxProfit(prices);\\r\\n            for (let i = 1; i < prices.length - 1; i++) {\\r\\n                max = Math.max(max, maxTxProfit(prices.slice(0, i + 1)) +\\r\\n                    maxTxProfit(prices.slice(i + 1, prices.length)));\\r\\n            }\\r\\n            return attemp(ns, script, host, data, max);\\r\\n        },\\r\\n    },\\r\\n    \\\"Algorithmic Stock Trader IV\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Minimum Path Sum in a Triangle\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, TriangleMinSum(data, 0, 0));\\r\\n        },\\r\\n    },\\r\\n    \\\"Unique Paths in a Grid I\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, walkDownFirst(createAndFillTwoDArray(data[0], data[1], () => 0), 0, 0));\\r\\n        },\\r\\n    },\\r\\n    \\\"Unique Paths in a Grid II\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, walkDownFirst(data, 0, 0));\\r\\n        },\\r\\n    },\\r\\n    \\\"Shortest Path in a Grid\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Sanitize Parentheses in Expression\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            let solutions = [];\\r\\n            let depth = 1;\\r\\n            do {\\r\\n                solutions = parenthesisSolutions(data, new Set(), depth++);\\r\\n            } while (!solutions.length);\\r\\n            solutions = [...new Set(solutions)];\\r\\n            return attemp(ns, script, host, data, solutions);\\r\\n        },\\r\\n    },\\r\\n    \\\"Find All Valid Math Expressions\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"HammingCodes: Integer to Encoded Binary\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, HammingEncode(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"HammingCodes: Encoded Binary to Integer\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Proper 2-Coloring of a Graph\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, \\r\\n            // tryColorGraph(toMapOfVertice((data as any)[1] as number[][]), [])\\r\\n            tryColorGraphV2(data[0], toMapOfVertice(data[1])));\\r\\n        },\\r\\n    },\\r\\n    \\\"Compression I: RLE Compression\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Compression II: LZ Decompression\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Compression III: LZ Compression\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Encryption I: Caesar Cipher\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            const [text, rotation] = data;\\r\\n            return attemp(ns, script, host, data, CaesarCipher(text, rotation));\\r\\n        },\\r\\n    },\\r\\n    \\\"Encryption II: Vigenère Cipher\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n};\\r\\nfunction createAndFillTwoDArray(rows, cols, valueProvider) {\\r\\n    return Array.from({ length: rows }, () => Array.from({ length: cols }, valueProvider));\\r\\n}\\r\\nfunction countJumps(data) {\\r\\n    const n = data.length;\\r\\n    let reach = 0;\\r\\n    let jumps = 0;\\r\\n    let lastJump = -1;\\r\\n    while (reach < n - 1) {\\r\\n        let jumpedFrom = -1;\\r\\n        for (let i = reach; i > lastJump; i--) {\\r\\n            if (i + data[i] > reach) {\\r\\n                reach = i + data[i];\\r\\n                jumpedFrom = i;\\r\\n            }\\r\\n        }\\r\\n        if (jumpedFrom === -1) {\\r\\n            jumps = 0;\\r\\n            break;\\r\\n        }\\r\\n        lastJump = jumpedFrom;\\r\\n        jumps++;\\r\\n    }\\r\\n    return jumps;\\r\\n}\\r\\nfunction countComposeRestricted(integer, dataset) {\\r\\n    const composition = new Array(integer + 1).fill(0);\\r\\n    composition[0] = 1;\\r\\n    for (let i = 0; i < dataset.length; i++) {\\r\\n        for (let j = dataset[i]; j <= integer; j++) {\\r\\n            composition[j] += composition[j - dataset[i]];\\r\\n        }\\r\\n    }\\r\\n    return composition[integer];\\r\\n}\\r\\nfunction countCompose(integer) {\\r\\n    const composition = new Array(integer + 1).fill(0);\\r\\n    composition[0] = 1;\\r\\n    for (let i = 1; i < integer; i++) {\\r\\n        for (let j = i; j <= integer; j++) {\\r\\n            composition[j] = composition[j] + composition[j - i];\\r\\n        }\\r\\n    }\\r\\n    return composition[integer];\\r\\n}\\r\\nfunction isFinished(data, i, j) {\\r\\n    return data.length === i + 1 && data[i].length === j + 1;\\r\\n}\\r\\nfunction canMoveRight(data, i, j) {\\r\\n    return data[i].length > j + 1 && data[i][j + 1] !== 1;\\r\\n}\\r\\nfunction canMoveDown(data, i, j) {\\r\\n    return data.length > i + 1 && data[i + 1][j] !== 1;\\r\\n}\\r\\nfunction walkDownFirst(data, i, j) {\\r\\n    if (isFinished(data, i, j)) {\\r\\n        return 1;\\r\\n    }\\r\\n    let count = 0;\\r\\n    if (canMoveDown(data, i, j)) {\\r\\n        count += walkDownFirst(data, i + 1, j);\\r\\n    }\\r\\n    if (canMoveRight(data, i, j)) {\\r\\n        count += walkDownFirst(data, i, j + 1);\\r\\n    }\\r\\n    return count;\\r\\n}\\r\\nfunction maxTxProfit(prices) {\\r\\n    let max = 0;\\r\\n    for (let i = 0; i < prices.length - 1; i++) {\\r\\n        for (let j = i; j < prices.length; j++) {\\r\\n            max = Math.max(max, prices[j] - prices[i]);\\r\\n        }\\r\\n    }\\r\\n    return max;\\r\\n}\\r\\nfunction isValidIp(ip) {\\r\\n    const splitted = ip.split(\\\".\\\").filter((value) => !!value);\\r\\n    if (splitted.length != 4)\\r\\n        return false;\\r\\n    return !splitted.find((value) => ((Number.parseInt(value) != 0 || value.length > 1) &&\\r\\n        value.startsWith(\\\"0\\\")) ||\\r\\n        Number.parseInt(value) > 255);\\r\\n}\\r\\nfunction parseIp(ip) {\\r\\n    const validIps = [];\\r\\n    for (let i = 1; i < 4; i++) {\\r\\n        for (let j = 1; j < 4; j++) {\\r\\n            for (let k = 1; k < 4; k++) {\\r\\n                const a1 = ip.substring(0, i);\\r\\n                const a2 = ip.substring(i, i + j);\\r\\n                const a3 = ip.substring(i + j, i + j + k);\\r\\n                const a4 = ip.substring(i + j + k, ip.length);\\r\\n                const candidate = `${a1}.${a2}.${a3}.${a4}`;\\r\\n                if (isValidIp(candidate))\\r\\n                    validIps.push(candidate);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return validIps;\\r\\n}\\r\\nfunction primeFactor(integer) {\\r\\n    for (let i = 2; i < Math.sqrt(integer) + 1; i++) {\\r\\n        const factor = integer / i;\\r\\n        if (Number.isInteger(factor)) {\\r\\n            return primeFactor(factor);\\r\\n        }\\r\\n    }\\r\\n    return integer;\\r\\n}\\r\\nfunction sumArray(array) {\\r\\n    return array.reduce((acc, value) => acc + value, 0);\\r\\n}\\r\\nfunction findMaxSubArraySum(array) {\\r\\n    let currentMax = sumArray(array);\\r\\n    for (let i = 0; i < array.length - 1; i++) {\\r\\n        for (let j = array.length; j > i; j--) {\\r\\n            currentMax = Math.max(sumArray(array.slice(i, j)), currentMax);\\r\\n        }\\r\\n    }\\r\\n    return currentMax;\\r\\n}\\r\\nfunction tryColorGraphV2(count, data) {\\r\\n    const defaultColor = -1;\\r\\n    const tryColorIn = 1;\\r\\n    const solution = new Array(count).fill(defaultColor);\\r\\n    const checklist = [];\\r\\n    checklist.push({ vertix: 0, color: tryColorIn });\\r\\n    while (checklist.length) {\\r\\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\\r\\n        const { vertix, color } = checklist.pop();\\r\\n        solution[vertix] = color;\\r\\n        for (const neighbor of data[vertix] || []) {\\r\\n            if (solution[neighbor] === color)\\r\\n                return [];\\r\\n            if (solution[neighbor] === defaultColor)\\r\\n                checklist.push({ vertix: neighbor, color: (color + 1) % 2 });\\r\\n        }\\r\\n        if (!checklist.length) {\\r\\n            const vertixToPush = solution\\r\\n                .map((value, index) => ({ value, index }))\\r\\n                .find(({ value }) => value === defaultColor)?.index;\\r\\n            if (vertixToPush != undefined)\\r\\n                checklist.push({ vertix: vertixToPush, color: tryColorIn });\\r\\n        }\\r\\n    }\\r\\n    return solution;\\r\\n}\\r\\nfunction tryColorGraph(data, acc, vertix = 0, color = 0) {\\r\\n    //Bugged, need to figure it out. Cleaning of acc does not bubble up\\r\\n    if (acc[vertix] !== undefined && acc[vertix] !== color) {\\r\\n        return [];\\r\\n    }\\r\\n    acc[vertix] = color;\\r\\n    if (data[vertix] === undefined) {\\r\\n        return acc;\\r\\n    }\\r\\n    for (const neighbor of data[vertix]) {\\r\\n        const result = tryColorGraph(data, acc, neighbor, (color + 1) % 2);\\r\\n        if (!result.length) {\\r\\n            delete acc[vertix];\\r\\n            return [];\\r\\n        }\\r\\n    }\\r\\n    return acc;\\r\\n}\\r\\nfunction toMapOfVertice(data) {\\r\\n    return data.reduce((acc, [n1, n2]) => {\\r\\n        acc[n1] = acc[n1] || [];\\r\\n        acc[n2] = acc[n2] || [];\\r\\n        acc[n1] = acc[n1].concat([n2]);\\r\\n        acc[n2] = acc[n2].concat([n1]);\\r\\n        return acc;\\r\\n    }, {});\\r\\n}\\r\\nfunction isValidParenthesis(text) {\\r\\n    let opened = 0;\\r\\n    for (const char of [...text]) {\\r\\n        if (char === \\\"(\\\")\\r\\n            opened++;\\r\\n        if (char === \\\")\\\")\\r\\n            opened--;\\r\\n        if (opened < 0)\\r\\n            return false;\\r\\n    }\\r\\n    return opened === 0;\\r\\n}\\r\\nfunction parenthesisSolutions(text, acc, depth) {\\r\\n    if (depth === 0)\\r\\n        return [];\\r\\n    if (acc.has(text)) {\\r\\n        return [];\\r\\n    }\\r\\n    acc.add(text);\\r\\n    if (isValidParenthesis(text) || !text) {\\r\\n        return [text || \\\"\\\"];\\r\\n    }\\r\\n    if (text.startsWith(\\\")\\\")) {\\r\\n        return parenthesisSolutions(text.substring(1), acc, depth - 1);\\r\\n    }\\r\\n    return [...text]\\r\\n        .map((value, index) => {\\r\\n        return parenthesisSolutions([...text]\\r\\n            .slice(0, index)\\r\\n            .concat([...text].slice(index + 1, text.length))\\r\\n            .join(\\\"\\\"), acc, depth - 1);\\r\\n    })\\r\\n        .reduce((acc, value) => {\\r\\n        return acc.concat(value);\\r\\n    }, []);\\r\\n}\\r\\nfunction TriangleMinSum(triangle, i, j) {\\r\\n    if (i >= triangle.length || j >= triangle[i].length) {\\r\\n        return 0;\\r\\n    }\\r\\n    const value = triangle[i][j];\\r\\n    const left = value + TriangleMinSum(triangle, i + 1, j);\\r\\n    const right = value + TriangleMinSum(triangle, i + 1, j + 1);\\r\\n    return Math.min(left, right);\\r\\n}\\r\\nfunction CaesarCipher(text, rotation) {\\r\\n    // A: 65 .... Z: 90\\r\\n    const AcharCode = \\\"A\\\".charCodeAt(0);\\r\\n    const spaceCode = \\\" \\\".charCodeAt(0);\\r\\n    return [...text]\\r\\n        .map((char) => (char === \\\" \\\" ? spaceCode : char.charCodeAt(0) - rotation))\\r\\n        .map((charCode) => charCode === spaceCode\\r\\n        ? spaceCode\\r\\n        : charCode < AcharCode\\r\\n            ? charCode + 26\\r\\n            : charCode)\\r\\n        .map((charCode) => String.fromCharCode(charCode))\\r\\n        .join(\\\"\\\");\\r\\n}\\r\\n//Shamefully stolen from https://github.com/bitburner-official/bitburner-src/blob/6a76e1a9ab58d9b6f103c90793307c61a668334f/src/utils/HammingCodeTools.ts could not figure it out myself\\r\\nfunction HammingEncode(data) {\\r\\n    const enc = [0];\\r\\n    const data_bits = data.toString(2).split(\\\"\\\").reverse();\\r\\n    data_bits.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    let k = data_bits.length;\\r\\n    /* NOTE: writing the data like this flips the endianness, this is what the\\r\\n     * original implementation by Hedrauta did so I'm keeping it like it was. */\\r\\n    for (let i = 1; k > 0; i++) {\\r\\n        if ((i & (i - 1)) != 0) {\\r\\n            enc[i] = data_bits[--k];\\r\\n        }\\r\\n        else {\\r\\n            enc[i] = 0;\\r\\n        }\\r\\n    }\\r\\n    let parity = 0;\\r\\n    /* Figure out the subsection parities */\\r\\n    for (let i = 0; i < enc.length; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity ^= i;\\r\\n        }\\r\\n    }\\r\\n    parity = parity.toString(2).split(\\\"\\\").reverse();\\r\\n    parity.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    /* Set the parity bits accordingly */\\r\\n    for (let i = 0; i < parity.length; i++) {\\r\\n        enc[2 ** i] = parity[i] ? 1 : 0;\\r\\n    }\\r\\n    parity = 0;\\r\\n    /* Figure out the overall parity for the entire block */\\r\\n    for (let i = 0; i < enc.length; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity++;\\r\\n        }\\r\\n    }\\r\\n    /* Finally set the overall parity bit */\\r\\n    enc[0] = parity % 2 == 0 ? 0 : 1;\\r\\n    return enc.join(\\\"\\\");\\r\\n}\\r\\nfunction HammingEncodeProperly(data) {\\r\\n    /* How many bits do we need?\\r\\n     * n = 2^m\\r\\n     * k = 2^m - m - 1\\r\\n     * where k is the number of data bits, m the number\\r\\n     * of parity bits and n the number of total bits. */\\r\\n    let m = 1;\\r\\n    while (2 ** (2 ** m - m - 1) - 1 < data) {\\r\\n        m++;\\r\\n    }\\r\\n    const n = 2 ** m;\\r\\n    const k = 2 ** m - m - 1;\\r\\n    const enc = [0];\\r\\n    const data_bits = data.toString(2).split(\\\"\\\").reverse();\\r\\n    data_bits.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    /* Flip endianness as in the original implementation by Hedrauta\\r\\n     * and write the data back to front\\r\\n     * XXX why do we do this? */\\r\\n    for (let i = 1, j = k; i < n; i++) {\\r\\n        if ((i & (i - 1)) != 0) {\\r\\n            enc[i] = data_bits[--j] ? data_bits[j] : 0;\\r\\n        }\\r\\n    }\\r\\n    let parity = 0;\\r\\n    /* Figure out the subsection parities */\\r\\n    for (let i = 0; i < n; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity ^= i;\\r\\n        }\\r\\n    }\\r\\n    parity = parity.toString(2).split(\\\"\\\").reverse();\\r\\n    parity.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    /* Set the parity bits accordingly */\\r\\n    for (let i = 0; i < m; i++) {\\r\\n        enc[2 ** i] = parity[i] ? 1 : 0;\\r\\n    }\\r\\n    parity = 0;\\r\\n    /* Figure out the overall parity for the entire block */\\r\\n    for (let i = 0; i < n; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity++;\\r\\n        }\\r\\n    }\\r\\n    /* Finally set the overall parity bit */\\r\\n    enc[0] = parity % 2 == 0 ? 0 : 1;\\r\\n    return enc.join(\\\"\\\");\\r\\n}\\r\\nfunction HammingDecode(data) {\\r\\n    let err = 0;\\r\\n    const bits = [];\\r\\n    /* TODO why not just work with an array of digits from the start? */\\r\\n    for (const i in data.split(\\\"\\\")) {\\r\\n        const bit = parseInt(data[i]);\\r\\n        bits[i] = bit;\\r\\n        if (bit) {\\r\\n            err ^= +i;\\r\\n        }\\r\\n    }\\r\\n    /* If err != 0 then it spells out the index of the bit that was flipped */\\r\\n    if (err) {\\r\\n        /* Flip to correct */\\r\\n        bits[err] = bits[err] ? 0 : 1;\\r\\n    }\\r\\n    /* Now we have to read the message, bit 0 is unused (it's the overall parity bit\\r\\n     * which we don't care about). Each bit at an index that is a power of 2 is\\r\\n     * a parity bit and not part of the actual message. */\\r\\n    let ans = \\\"\\\";\\r\\n    for (let i = 1; i < bits.length; i++) {\\r\\n        /* i is not a power of two so it's not a parity bit */\\r\\n        if ((i & (i - 1)) != 0) {\\r\\n            ans += bits[i];\\r\\n        }\\r\\n    }\\r\\n    /* TODO to avoid ambiguity about endianness why not let the player return the extracted (and corrected)\\r\\n     * data bits, rather than guessing at how to convert it to a decimal string? */\\r\\n    return parseInt(ans, 2);\\r\\n}\\r\\n\",\"filename\":\"contracts/solve.js\",\"server\":\"home\"}}],[\"deployall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy as _deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { ThreadCounts } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/specialized-hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n    // max home threads\\r\\n    xh: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deployall(ns, args, flags);\\r\\n}\\r\\nexport async function deployall(ns, { script, ...args }, { d: depth, x: maxThreads, xh: maxHomeThreads, ...flags }, ...scriptArgs) {\\r\\n    const threadRemaining = new ThreadCounts(maxHomeThreads, maxThreads);\\r\\n    if (!threadRemaining.isEmpty())\\r\\n        await walkDeepFirst(ns, depth, async (host) => {\\r\\n            if (threadRemaining.isEmpty()) {\\r\\n                return;\\r\\n            }\\r\\n            const startedThreads = await _deploy(ns, { ...args, host, script }, { ...flags, x: threadRemaining.getThreadCount(host) }, ...scriptArgs);\\r\\n            threadRemaining.removeThreads(startedThreads, host);\\r\\n        });\\r\\n    return threadRemaining.isEmpty();\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return [...data.servers, ...data.scripts];\\r\\n}\\r\\n\",\"filename\":\"deployall.js\",\"server\":\"home\"}}],[\"ps.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n    //print\\r\\n    p: true,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await ps(ns, flags);\\r\\n}\\r\\nexport async function ps(ns, { d: depth, p: print }) {\\r\\n    const processes = [];\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        processes.push(...ns.ps(host).map((process) => ({ ...process, host })));\\r\\n    });\\r\\n    const linePattern = \\\"%s %s %s %s\\\";\\r\\n    const fileNamePadding = 20;\\r\\n    const threadPadding = 4;\\r\\n    const argsPadding = 30;\\r\\n    const hostsPadding = 30;\\r\\n    if (print) {\\r\\n        ns.tprintf(linePattern, \\\"Filename\\\".padEnd(fileNamePadding), \\\"T\\\".padEnd(threadPadding), \\\"...Args\\\".padEnd(argsPadding), \\\"...hosts\\\".padEnd(hostsPadding));\\r\\n        ns.tprintf(\\\"-\\\".padStart(fileNamePadding + threadPadding + argsPadding + hostsPadding, \\\"-\\\"));\\r\\n    }\\r\\n    const consolidated = processes.reduce((acc, { host, ...process }) => {\\r\\n        const accProcess = acc.find((accProcess) => process.filename === accProcess.filename &&\\r\\n            process.args.join() === accProcess.args.join());\\r\\n        if (!accProcess)\\r\\n            acc.push({ ...process, hosts: [host] });\\r\\n        else {\\r\\n            accProcess.hosts.push(host);\\r\\n            accProcess.threads += process.threads;\\r\\n        }\\r\\n        return acc;\\r\\n    }, []);\\r\\n    if (print)\\r\\n        consolidated.forEach((process) => {\\r\\n            ns.tprintf(linePattern, process.filename.padEnd(fileNamePadding), process.threads.toString().padEnd(threadPadding), `[${process.args.join(\\\"] [\\\")}]`.padEnd(argsPadding), `[${process.hosts.join(\\\"] [\\\")}]`.padEnd(hostsPadding));\\r\\n        });\\r\\n    return consolidated;\\r\\n}\\r\\n\",\"filename\":\"ps.js\",\"server\":\"home\"}}],[\"pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { analyze } from \\\"/lib/analyze\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { getAvailableExes } from \\\"/lib/getAvailableExes\\\";\\r\\nimport { scpExtensions } from \\\"/lib/misc\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    dl: false,\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    //print\\r\\n    p: true,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await pwn(ns, flags);\\r\\n}\\r\\nexport async function pwn(ns, { d: depth, p: print, dl }) {\\r\\n    const availablesPwn = getAvailableExes(ns);\\r\\n    const run = (name, cmd, host) => print ? ns.tprintf(\\\"%s:\\\\t\\\\t\\\\t%s\\\", name, cmd(host)) : cmd(host);\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        ns.printf(\\\"%s\\\", host);\\r\\n        /**Gain root access */\\r\\n        if (!ns.hasRootAccess(host) &&\\r\\n            ns.getServerNumPortsRequired(host) < availablesPwn.length) {\\r\\n            availablesPwn.forEach((availablePwn) => run(availablePwn.name, availablePwn.fn, host));\\r\\n        }\\r\\n        /** download all files located on server that does not already exist */\\r\\n        if (dl)\\r\\n            ns.ls(host)\\r\\n                .filter((file) => !ns.fileExists(file))\\r\\n                .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension))\\r\\n                .length)\\r\\n                .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n                .forEach((file) => ns.scp(file, \\\"home\\\", host));\\r\\n        if (print)\\r\\n            analyze(ns, acc.nodes.concat([host]).join(\\\" -> \\\"), host);\\r\\n    }, { excludes: ns.getPurchasedServers() });\\r\\n}\\r\\n\",\"filename\":\"pwn.js\",\"server\":\"home\"}}],[\"killall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await killall(ns, flags);\\r\\n}\\r\\nexport async function killall(ns, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        ns.killall(host);\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"killall.js\",\"server\":\"home\"}}],[\"find-contracts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { newLine } from \\\"/lib/misc\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { generateConnect } from \\\"/to-pwn\\\";\\r\\nimport { solve } from \\\"/contracts/solve\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await findContract(ns, flags);\\r\\n}\\r\\nexport async function findContract(ns, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        const contracts = ns.ls(host).filter((file) => file.endsWith(\\\".cct\\\"));\\r\\n        if (contracts.length) {\\r\\n            ns.tprintf(generateConnect(acc.nodes, host));\\r\\n            ns.tprintf(contracts\\r\\n                .map((contract) => `${contract} (${ns.codingcontract.getContractType(contract, host)})`)\\r\\n                .join(\\\", \\\"));\\r\\n            ns.tprintf(newLine);\\r\\n            for (const script of contracts) {\\r\\n                await solve(ns, { host, script });\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"find-contracts.js\",\"server\":\"home\"}}],[\"growall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nconst file = \\\"lib/grow.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const { d: depth } = flags;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        await deploy(ns, { ...args, host, script: file }, { ...flags });\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"growall.js\",\"server\":\"home\"}}],[\"hackall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n    //hack chance threshold\\r\\n    c: 0.9,\\r\\n};\\r\\nconst file = \\\"lib/hack.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const { d: depth, x: maxThreads, c } = flags;\\r\\n    let threadRemaining = maxThreads;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        if (threadRemaining === 0) {\\r\\n            return;\\r\\n        }\\r\\n        if (threadRemaining < 0) {\\r\\n            throw new Error();\\r\\n        }\\r\\n        const startedThreads = await deploy(ns, { ...args, host, script: file }, { ...flags, x: threadRemaining }, \\\"-c\\\", c);\\r\\n        threadRemaining = threadRemaining - startedThreads;\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"hackall.js\",\"server\":\"home\"}}],[\"kill.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    script: \\\"lib/weaken.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const depth = flags.d;\\r\\n    const { script } = args;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        ns.ps(host)\\r\\n            .filter((process) => process.filename === script)\\r\\n            .forEach((process) => ns.kill(process.pid));\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.scripts;\\r\\n}\\r\\n\",\"filename\":\"kill.js\",\"server\":\"home\"}}],[\"scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n    m: true,\\r\\n    s: true,\\r\\n};\\r\\nconst indent = 1;\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await scan(ns, flags);\\r\\n}\\r\\nexport async function scan(ns, { d: depth, m: moneyEnabled, s: securityEnabled }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        const padding = \\\"\\\".padEnd(acc.depth * indent);\\r\\n        const paddingInverted = \\\"\\\".padEnd((30 - acc.depth) * indent);\\r\\n        const server = ns.getServer(host);\\r\\n        ns.tprintf(\\\"%s┣ %s\\\", padding, host);\\r\\n        const money = server.moneyAvailable || 0;\\r\\n        const maxMoney = server.moneyMax || 0;\\r\\n        if (moneyEnabled && maxMoney) {\\r\\n            const line = \\\"%s┃%sm_avail=%-10s\\\\tm_max=%-10s\\\\tm_ratio=%-10s\\\";\\r\\n            ns.tprintf(line, padding, paddingInverted, ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        }\\r\\n        if (securityEnabled) {\\r\\n            const line = \\\"%s┃%sminSec=%-10s\\\\tsecurity=%-.10s\\\\tmin_hack=%-10s\\\";\\r\\n            ns.tprintf(line, padding, paddingInverted, server.minDifficulty, server.hackDifficulty?.toFixed(2).padEnd(10), server.requiredHackingSkill);\\r\\n        }\\r\\n    }, {\\r\\n        excludes: ns.getPurchasedServers(),\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"scan.js\",\"server\":\"home\"}}],[\"shrinkall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nconst file = \\\"lib/shrink.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const { d: depth } = flags;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        await deploy(ns, { ...args, host, script: file }, { ...flags });\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"shrinkall.js\",\"server\":\"home\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"home\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"home\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"home\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"home\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"home\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"home\"}}],[\"contracts/contract-134441.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-134441.cct\\\";\\r\\nconst host = \\\"zer0\\\";\\r\\nconst prices = [\\r\\n    109, 134, 48, 16, 63, 186, 178, 81, 140, 156, 177, 91, 61, 13, 46, 102, 51,\\r\\n    149, 111, 160, 57, 78, 142, 188, 195, 178, 173, 133, 49, 129, 117, 44, 61,\\r\\n    104, 58, 97, 88, 24, 104,\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const calc = (prices) => {\\r\\n        let max = 0;\\r\\n        for (let i = 0; i < prices.length - 1; i++) {\\r\\n            for (let j = i; j < prices.length; j++) {\\r\\n                max = Math.max(max, prices[j] - prices[i]);\\r\\n            }\\r\\n        }\\r\\n        return max;\\r\\n    };\\r\\n    let max = calc(prices);\\r\\n    for (let i = 1; i < prices.length - 1; i++) {\\r\\n        max = Math.max(max, calc(prices.slice(0, i + 1)) + calc(prices.slice(i + 1, prices.length)));\\r\\n    }\\r\\n    ns.tprintf(\\\"solution: %s\\\", max);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(max, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-134441.js\",\"server\":\"home\"}}],[\"contracts/contract-2410.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-2410.cct\\\";\\r\\nconst host = \\\"foodnstuff\\\";\\r\\nconst data = 14806590036;\\r\\nconst data2 = \\\"pppdpdddpd\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    const controlBitIndexes = [...data2]\\r\\n        .map((value, index) => (value === \\\"p\\\" ? index + 1 : -1))\\r\\n        .filter((value) => value > 0);\\r\\n    const solution = HammingEncode(data);\\r\\n    // setConfig({pow:4}).encode()\\r\\n    ns.tprintf(\\\"debug: %s\\\", controlBitIndexes);\\r\\n    ns.tprintf(\\\"debug: %s\\\", \\\"8 -> 1000 -> 11110000\\\");\\r\\n    ns.tprintf(\\\"debug: %s\\\", HammingEncode(8));\\r\\n    ns.tprintf(\\\"debug: %s\\\", \\\"21 -> 10101 -> 1001101011\\\");\\r\\n    ns.tprintf(\\\"debug: %s\\\", HammingEncode(21));\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\nfunction HammingEncode(data) {\\r\\n    const enc = [0];\\r\\n    const data_bits = data.toString(2).split(\\\"\\\").reverse();\\r\\n    data_bits.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    let k = data_bits.length;\\r\\n    /* NOTE: writing the data like this flips the endianness, this is what the\\r\\n     * original implementation by Hedrauta did so I'm keeping it like it was. */\\r\\n    for (let i = 1; k > 0; i++) {\\r\\n        if ((i & (i - 1)) != 0) {\\r\\n            enc[i] = data_bits[--k];\\r\\n        }\\r\\n        else {\\r\\n            enc[i] = 0;\\r\\n        }\\r\\n    }\\r\\n    let parity = 0;\\r\\n    /* Figure out the subsection parities */\\r\\n    for (let i = 0; i < enc.length; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity ^= i;\\r\\n        }\\r\\n    }\\r\\n    parity = parity.toString(2).split(\\\"\\\").reverse();\\r\\n    parity.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    /* Set the parity bits accordingly */\\r\\n    for (let i = 0; i < parity.length; i++) {\\r\\n        enc[2 ** i] = parity[i] ? 1 : 0;\\r\\n    }\\r\\n    parity = 0;\\r\\n    /* Figure out the overall parity for the entire block */\\r\\n    for (let i = 0; i < enc.length; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity++;\\r\\n        }\\r\\n    }\\r\\n    /* Finally set the overall parity bit */\\r\\n    enc[0] = parity % 2 == 0 ? 0 : 1;\\r\\n    return enc.join(\\\"\\\");\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-2410.js\",\"server\":\"home\"}}],[\"contracts/contract-40081.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-40081.cct\\\";\\r\\nconst host = \\\"joesguns\\\";\\r\\nconst data = [\\\"ARRAY QUEUE MACRO VIRUS CACHE\\\", 8];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = cipher(data[0], data[1]);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\nfunction cipher(text, rotation) {\\r\\n    // A: 65 .... Z: 90\\r\\n    const AcharCode = \\\"A\\\".charCodeAt(0);\\r\\n    const spaceCode = \\\" \\\".charCodeAt(0);\\r\\n    return [...text]\\r\\n        .map((char) => (char === \\\" \\\" ? spaceCode : char.charCodeAt(0) - rotation))\\r\\n        .map((charCode) => charCode === spaceCode\\r\\n        ? spaceCode\\r\\n        : charCode < AcharCode\\r\\n            ? charCode + 26\\r\\n            : charCode)\\r\\n        .map((charCode) => String.fromCharCode(charCode))\\r\\n        .join(\\\"\\\");\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-40081.js\",\"server\":\"home\"}}],[\"contracts/template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-XX.cct\\\";\\r\\nconst host = \\\"zer0\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const data = ns.codingcontract.getData(name, host);\\r\\n    const solution = 0;\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/template.js\",\"server\":\"home\"}}],[\"contracts/contract-634177.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-634177.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = [\\r\\n    [6],\\r\\n    [6, 4],\\r\\n    [2, 4, 3],\\r\\n    [4, 2, 3, 3], //\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction minBranch(triangle, i, j) {\\r\\n    if (i >= triangle.length || j >= triangle[i].length) {\\r\\n        return 0;\\r\\n    }\\r\\n    const value = triangle[i][j];\\r\\n    const left = value + minBranch(triangle, i + 1, j);\\r\\n    const right = value + minBranch(triangle, i + 1, j + 1);\\r\\n    return Math.min(left, right);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = minBranch(data, 0, 0);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-634177.js\",\"server\":\"home\"}}],[\"contracts/contract-276203.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-276203.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = \\\"((()(((aa()))()\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction isValid(text) {\\r\\n    let opened = 0;\\r\\n    for (const char of [...text]) {\\r\\n        if (char === \\\"(\\\")\\r\\n            opened++;\\r\\n        if (char === \\\")\\\")\\r\\n            opened--;\\r\\n        if (opened < 0)\\r\\n            return false;\\r\\n    }\\r\\n    return opened === 0;\\r\\n}\\r\\nfunction parenthesisSolutions(text, depth) {\\r\\n    if (depth === 0)\\r\\n        return [];\\r\\n    if (isValid(text) || !text) {\\r\\n        return [text || \\\"\\\"];\\r\\n    }\\r\\n    if (text.length < 2) {\\r\\n        return [\\\"\\\"];\\r\\n    }\\r\\n    return [...text]\\r\\n        .map((value, index) => parenthesisSolutions([...text]\\r\\n        .slice(0, index)\\r\\n        .concat([...text].slice(index + 1, text.length))\\r\\n        .join(\\\"\\\"), depth - 1))\\r\\n        .reduce((acc, value) => {\\r\\n        return acc.concat(value);\\r\\n    }, []);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    let solutions = [];\\r\\n    let depth = 1;\\r\\n    do {\\r\\n        solutions = parenthesisSolutions(data, depth++);\\r\\n    } while (!solutions.length);\\r\\n    solutions = [...new Set(solutions)];\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solutions);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solutions, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-276203.js\",\"server\":\"home\"}}],[\"contracts/contract-57834.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-57834.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = [\\r\\n    12,\\r\\n    [\\r\\n        [1, 8],\\r\\n        [3, 10],\\r\\n        [3, 6],\\r\\n        [3, 9],\\r\\n        [0, 1],\\r\\n        [9, 11],\\r\\n        [7, 10],\\r\\n        [0, 5],\\r\\n        [6, 7],\\r\\n        [2, 8],\\r\\n        [7, 8],\\r\\n        [0, 3],\\r\\n        [2, 6],\\r\\n        [1, 11],\\r\\n        [4, 9],\\r\\n        [1, 9],\\r\\n        [4, 10],\\r\\n        [7, 11],\\r\\n        [0, 7],\\r\\n        [3, 11],\\r\\n        [2, 11],\\r\\n        [7, 9],\\r\\n    ],\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction tryColor(data, acc, vertix = 0, color = 0) {\\r\\n    if (acc[vertix] !== undefined && acc[vertix] !== color) {\\r\\n        return [];\\r\\n    }\\r\\n    acc[vertix] = color;\\r\\n    if (data[vertix] === undefined) {\\r\\n        return acc;\\r\\n    }\\r\\n    for (const neighbor of data[vertix]) {\\r\\n        const result = tryColor(data, acc, neighbor, (color + 1) % 2);\\r\\n        if (!result.length) {\\r\\n            delete acc[vertix];\\r\\n            return [];\\r\\n        }\\r\\n    }\\r\\n    return acc;\\r\\n}\\r\\nfunction toMapOfVertice(data) {\\r\\n    return data.reduce((acc, [n1, n2]) => {\\r\\n        acc[n1] = acc[n1] || [];\\r\\n        acc[n2] = acc[n2] || [];\\r\\n        acc[n1] = acc[n1].concat([n2]);\\r\\n        acc[n2] = acc[n1].concat([n1]);\\r\\n        return acc;\\r\\n    }, {});\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = tryColor(toMapOfVertice(data[1]), []);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-57834.js\",\"server\":\"home\"}}],[\"upgrade-hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await upgradeHacknet(ns, flags);\\r\\n}\\r\\nexport async function upgradeHacknet(ns, { b: budgetRatio }) {\\r\\n    let budget = ns.getPlayer().money * budgetRatio;\\r\\n    const purchaseCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    if (budget >= purchaseCost &&\\r\\n        ns.hacknet.numNodes() < ns.hacknet.maxNumNodes()) {\\r\\n        ns.hacknet.purchaseNode();\\r\\n        budget -= purchaseCost;\\r\\n    }\\r\\n    while (budget) {\\r\\n        const server = getHackNodes(ns).shift();\\r\\n        if (!server)\\r\\n            return;\\r\\n        const upgradeCost = ns.hacknet.getLevelUpgradeCost(server.index, 10);\\r\\n        const ramCost = ns.hacknet.getRamUpgradeCost(server.index);\\r\\n        const cpuCost = ns.hacknet.getCoreUpgradeCost(server.index);\\r\\n        if (server.level < 100) {\\r\\n            if (budget < upgradeCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeLevel(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.ram < 64) {\\r\\n            if (budget < ramCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeRam(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.level < 140) {\\r\\n            if (budget < upgradeCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeLevel(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.cores < 5) {\\r\\n            if (budget < cpuCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeCores(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.level < 200) {\\r\\n            if (budget < upgradeCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeLevel(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.cores < 16) {\\r\\n            if (budget < cpuCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeCores(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n}\\r\\nfunction upgradeLevel(ns, server) {\\r\\n    const upgradeCost = ns.hacknet.getLevelUpgradeCost(server.index, 10);\\r\\n    if (ns.hacknet.upgradeLevel(server.index, 10)) {\\r\\n        ns.print(ns.sprintf(\\\"Upgraded %s to lvl %s\\\", server.index, server.level + 1));\\r\\n        return upgradeCost;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\nfunction upgradeRam(ns, server) {\\r\\n    const upgradeCost = ns.hacknet.getRamUpgradeCost(server.index);\\r\\n    if (ns.hacknet.upgradeRam(server.index)) {\\r\\n        ns.print(ns.sprintf(\\\"Upgraded %s to ram %s\\\", server.index, server.ram * 2));\\r\\n        return upgradeCost;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\nfunction upgradeCores(ns, server) {\\r\\n    const upgradeCost = ns.hacknet.getCoreUpgradeCost(server.index);\\r\\n    if (ns.hacknet.upgradeCore(server.index)) {\\r\\n        ns.print(ns.sprintf(\\\"Upgraded %s to cores %s\\\", server.index, server.cores + 1));\\r\\n        return upgradeCost;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\nfunction getHackNodes(ns) {\\r\\n    return new Array(ns.hacknet.numNodes())\\r\\n        .fill(0)\\r\\n        .map((_value, index) => index)\\r\\n        .map((index) => ({ ...ns.hacknet.getNodeStats(index), index }))\\r\\n        .sort((a, b) => a.production - b.production);\\r\\n}\\r\\n\",\"filename\":\"upgrade-hacknet.js\",\"server\":\"home\"}}],[\"contracts/contract-937534.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-937534.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = [\\r\\n    -4, -9, 0, 5, 5, 5, 6, 5, 7, -2, -2, -4, -6, 3, 5, -3, -1, 5, 10, -5, 0,\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction sumArray(array) {\\r\\n    return array.reduce((acc, value) => acc + value, 0);\\r\\n}\\r\\nfunction findMaxSubArraySum(array) {\\r\\n    let currentMax = sumArray(array);\\r\\n    for (let i = 0; i < array.length - 1; i++) {\\r\\n        for (let j = array.length - 1; j > i; j--) {\\r\\n            currentMax = Math.max(sumArray(array.slice(i, j)), currentMax);\\r\\n        }\\r\\n    }\\r\\n    return currentMax;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = findMaxSubArraySum(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-937534.js\",\"server\":\"home\"}}],[\"contracts/contract-169947.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-169947.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = 172413088;\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction primeFactor(integer) {\\r\\n    for (let i = 2; i < Math.sqrt(integer) + 1; i++) {\\r\\n        const factor = integer / i;\\r\\n        if (Number.isInteger(factor)) {\\r\\n            return primeFactor(factor);\\r\\n        }\\r\\n    }\\r\\n    return integer;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = primeFactor(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-169947.js\",\"server\":\"home\"}}],[\"contracts/contract-324759.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-324759.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = \\\"9716412766\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction isValidIp(ip) {\\r\\n    const splitted = ip.split(\\\".\\\").filter((value) => !!value);\\r\\n    if (splitted.length != 4)\\r\\n        return false;\\r\\n    return !splitted.find((value) => ((Number.parseInt(value) != 0 || value.length > 1) &&\\r\\n        value.startsWith(\\\"0\\\")) ||\\r\\n        Number.parseInt(value) > 255);\\r\\n}\\r\\nfunction parseIp(ip) {\\r\\n    const validIps = [];\\r\\n    for (let i = 1; i < 4; i++) {\\r\\n        for (let j = 1; j < 4; j++) {\\r\\n            for (let k = 1; k < 4; k++) {\\r\\n                const a1 = ip.substring(0, i);\\r\\n                const a2 = ip.substring(i, i + j);\\r\\n                const a3 = ip.substring(i + j, i + j + k);\\r\\n                const a4 = ip.substring(i + j + k, ip.length);\\r\\n                const candidate = `${a1}.${a2}.${a3}.${a4}`;\\r\\n                if (isValidIp(candidate))\\r\\n                    validIps.push(candidate);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return validIps;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = parseIp(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"127001: %s\\\", parseIp(\\\"127001\\\"));\\r\\n    ns.tprintf(\\\"255255255255: %s\\\", parseIp(\\\"255255255255\\\"));\\r\\n    ns.tprintf(\\\"1000: %s\\\", parseIp(\\\"1000\\\"));\\r\\n    ns.tprintf(\\\"1001: %s\\\", parseIp(\\\"1001\\\"));\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-324759.js\",\"server\":\"home\"}}],[\"contracts/contract-145349.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-145349.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = [\\r\\n    122, 188, 140, 50, 103, 126, 104, 136, 24, 58, 32, 30, 96, 147, 129, 134, 84, 100, 52, 24, 133, 158, 59, 25, 162, 48, 38, 190, 101, 12, 106, 190, 88, 125, 123, 142, 109\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction maxTxProfit(prices) {\\r\\n    let max = 0;\\r\\n    for (let i = 0; i < prices.length - 1; i++) {\\r\\n        for (let j = i; j < prices.length; j++) {\\r\\n            max = Math.max(max, prices[j] - prices[i]);\\r\\n        }\\r\\n    }\\r\\n    return max;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = maxTxProfit(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-145349.js\",\"server\":\"home\"}}],[\"contracts/contract-507056.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-507056.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction isFinished(data, i, j) {\\r\\n    return data.length === i + 1 && data[i].length === j + 1;\\r\\n}\\r\\nfunction canMoveRight(data, i, j) {\\r\\n    return data[i].length > j + 1 && data[i][j + 1] !== 1;\\r\\n}\\r\\nfunction canMoveDown(data, i, j) {\\r\\n    return data.length > i + 1 && data[i + 1][j] !== 1;\\r\\n}\\r\\nfunction walkDownFirst(data, i, j) {\\r\\n    if (isFinished(data, i, j)) {\\r\\n        return 1;\\r\\n    }\\r\\n    let count = 0;\\r\\n    if (canMoveDown(data, i, j)) {\\r\\n        count += walkDownFirst(data, i + 1, j);\\r\\n    }\\r\\n    if (canMoveRight(data, i, j)) {\\r\\n        count += walkDownFirst(data, i, j + 1);\\r\\n    }\\r\\n    return count;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const data = ns.codingcontract.getData(name, host);\\r\\n    const solution = walkDownFirst(data, 0, 0);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-507056.js\",\"server\":\"home\"}}],[\"upgrade-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { upgrade } from \\\"/lib/upgrade\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n    //prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await upgradeServers(ns, flags);\\r\\n}\\r\\nexport async function upgradeServers(ns, { b: budgetRatio, ...flags }) {\\r\\n    let budget = ns.getPlayer().money * budgetRatio;\\r\\n    while (budget) {\\r\\n        const server = ns\\r\\n            .getPurchasedServers()\\r\\n            .map((host) => ({ host, ram: ns.getServerMaxRam(host) }))\\r\\n            .sort(({ ram: ramA }, { ram: ramB }) => {\\r\\n            return ramA - ramB;\\r\\n        })\\r\\n            .shift();\\r\\n        if (!server)\\r\\n            return;\\r\\n        const price = await upgrade(ns, { host: server.host }, { ...flags, b: budget });\\r\\n        budget -= price;\\r\\n        if (!price) {\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"upgrade-servers.js\",\"server\":\"home\"}}],[\"gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { getGangMembers, upgradeGang } from \\\"/upgrade-gang\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await manageGang(ns, flags);\\r\\n}\\r\\nexport async function manageGang(ns, { b }) {\\r\\n    // let budget = ns.getPlayer().money * budgetRatio;\\r\\n    if (ns.gang.canRecruitMember()) {\\r\\n        ns.gang.recruitMember(`guy-${ns.gang.getMemberNames().length}`);\\r\\n    }\\r\\n    const gangInfo = ns.gang.getGangInformation();\\r\\n    const { wantedPenalty } = gangInfo;\\r\\n    for (const gangMember of getGangMembers(ns)) {\\r\\n        if (gangMember.agi_exp < 2000 ||\\r\\n            gangMember.def_exp < 2000 ||\\r\\n            gangMember.str_exp < 2000 ||\\r\\n            gangMember.dex_exp < 2000) {\\r\\n            ns.gang.setMemberTask(gangMember.name, \\\"Train Combat\\\");\\r\\n        }\\r\\n        else if (gangMember.hack_exp < 2000) {\\r\\n            ns.gang.setMemberTask(gangMember.name, \\\"Train Hacking\\\");\\r\\n        }\\r\\n        else if (gangMember.cha_exp < 2000) {\\r\\n            ns.gang.setMemberTask(gangMember.name, \\\"Train Charisma\\\");\\r\\n            // } else if (\\r\\n            //   gangMember.task === \\\"Vigilante Justice\\\" &&\\r\\n            //   wantedPenalty < 0.98 &&\\r\\n            //   gangInfo.wantedLevel > 50\\r\\n            // ) {\\r\\n            //   continue;\\r\\n            // } else if (wantedPenalty < 0.8 && gangInfo.wantedLevel > 100) {\\r\\n            //   ns.gang.setMemberTask(gangMember.name, \\\"Vigilante Justice\\\");\\r\\n        }\\r\\n        else {\\r\\n            const mostProfitTask = ns.gang\\r\\n                .getTaskNames()\\r\\n                .map((taskName) => ns.gang.getTaskStats(taskName))\\r\\n                .map((task) => {\\r\\n                return {\\r\\n                    ...task,\\r\\n                    moneyGain: calculateMoneyGain(gangInfo, gangMember, task),\\r\\n                };\\r\\n            })\\r\\n                .sort(({ moneyGain: A }, { moneyGain: B }) => B - A)\\r\\n                .find(() => true)?.name;\\r\\n            const mostRespectTask = ns.gang\\r\\n                .getTaskNames()\\r\\n                .map((taskName) => ns.gang.getTaskStats(taskName))\\r\\n                .map((task) => {\\r\\n                return {\\r\\n                    ...task,\\r\\n                    respectGain: calculateRespectGain(gangInfo, gangMember, task),\\r\\n                };\\r\\n            })\\r\\n                .sort(({ respectGain: A }, { respectGain: B }) => B - A)\\r\\n                .find(() => true)?.name;\\r\\n            ns.gang.setMemberTask(gangMember.name, \\\"Territory Warfare\\\" || mostProfitTask || mostRespectTask || \\\"Mug People\\\");\\r\\n        }\\r\\n    }\\r\\n    await upgradeGang(ns, { b });\\r\\n}\\r\\nfunction calculateMoneyGain(gang, member, task) {\\r\\n    if (task.baseMoney === 0)\\r\\n        return 0;\\r\\n    let statWeight = (task.hackWeight / 100) * member.hack +\\r\\n        (task.strWeight / 100) * member.str +\\r\\n        (task.defWeight / 100) * member.def +\\r\\n        (task.dexWeight / 100) * member.dex +\\r\\n        (task.agiWeight / 100) * member.agi +\\r\\n        (task.chaWeight / 100) * member.cha;\\r\\n    statWeight -= 3.2 * task.difficulty;\\r\\n    if (statWeight <= 0)\\r\\n        return 0;\\r\\n    const territoryMult = Math.max(0.005, Math.pow(gang.territory * 100, task.territory.money) / 100);\\r\\n    if (isNaN(territoryMult) || territoryMult <= 0)\\r\\n        return 0;\\r\\n    const respectMult = calculateWantedPenalty(gang);\\r\\n    const territoryPenalty = 0.2 * gang.territory + 0.8;\\r\\n    return Math.pow(5 * task.baseMoney * statWeight * territoryMult * respectMult, territoryPenalty);\\r\\n}\\r\\nfunction calculateWantedPenalty(gang) {\\r\\n    return gang.respect / (gang.respect + gang.wantedLevel);\\r\\n}\\r\\nfunction calculateRespectGain(gang, member, task) {\\r\\n    if (task.baseRespect === 0)\\r\\n        return 0;\\r\\n    let statWeight = (task.hackWeight / 100) * member.hack +\\r\\n        (task.strWeight / 100) * member.str +\\r\\n        (task.defWeight / 100) * member.def +\\r\\n        (task.dexWeight / 100) * member.dex +\\r\\n        (task.agiWeight / 100) * member.agi +\\r\\n        (task.chaWeight / 100) * member.cha;\\r\\n    statWeight -= 4 * task.difficulty;\\r\\n    if (statWeight <= 0)\\r\\n        return 0;\\r\\n    const territoryMult = Math.max(0.005, Math.pow(gang.territory * 100, task.territory.respect) / 100);\\r\\n    const territoryPenalty = 0.2 * gang.territory + 0.8;\\r\\n    if (isNaN(territoryMult) || territoryMult <= 0)\\r\\n        return 0;\\r\\n    const respectMult = calculateWantedPenalty(gang);\\r\\n    return Math.pow(11 * task.baseRespect * statWeight * territoryMult * respectMult, territoryPenalty);\\r\\n}\\r\\nfunction calculateWantedLevelGain(gang, member, task) {\\r\\n    if (task.baseWanted === 0)\\r\\n        return 0;\\r\\n    let statWeight = (task.hackWeight / 100) * member.hack +\\r\\n        (task.strWeight / 100) * member.str +\\r\\n        (task.defWeight / 100) * member.def +\\r\\n        (task.dexWeight / 100) * member.dex +\\r\\n        (task.agiWeight / 100) * member.agi +\\r\\n        (task.chaWeight / 100) * member.cha;\\r\\n    statWeight -= 3.5 * task.difficulty;\\r\\n    if (statWeight <= 0)\\r\\n        return 0;\\r\\n    const territoryMult = Math.max(0.005, Math.pow(gang.territory * 100, task.territory.wanted) / 100);\\r\\n    if (isNaN(territoryMult) || territoryMult <= 0)\\r\\n        return 0;\\r\\n    if (task.baseWanted < 0) {\\r\\n        return 0.4 * task.baseWanted * statWeight * territoryMult;\\r\\n    }\\r\\n    const calc = (7 * task.baseWanted) / Math.pow(3 * statWeight * territoryMult, 0.8);\\r\\n    // Put an arbitrary cap on this to prevent wanted level from rising too fast if the\\r\\n    // denominator is very small. Might want to rethink formula later\\r\\n    return Math.min(100, calc);\\r\\n}\\r\\n\",\"filename\":\"gang.js\",\"server\":\"home\"}}],[\"upgrade-stats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await template(ns, args, flags);\\r\\n}\\r\\nexport async function template(ns, { host }, { d: depth }) {\\r\\n    ns.stock.getForecast();\\r\\n}\\r\\n\",\"filename\":\"upgrade-stats.js\",\"server\":\"home\"}}],[\"contracts/contract-916421.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-916421.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction countCompose(integer) {\\r\\n    const composition = new Array(integer + 1).fill(0);\\r\\n    composition[0] = 1;\\r\\n    for (let i = 1; i < integer; i++) {\\r\\n        for (let j = i; j <= integer; j++) {\\r\\n            composition[j] = composition[j] + composition[j - i];\\r\\n        }\\r\\n    }\\r\\n    return composition[integer];\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const data = ns.codingcontract.getData(name, host);\\r\\n    const solution = countCompose(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"2: %s\\\", countCompose(2));\\r\\n    ns.tprintf(\\\"3: %s\\\", countCompose(3));\\r\\n    ns.tprintf(\\\"4: %s\\\", countCompose(4));\\r\\n    ns.tprintf(\\\"5: %s\\\", countCompose(5));\\r\\n    ns.tprintf(\\\"6: %s\\\", countCompose(6));\\r\\n    ns.tprintf(\\\"7: %s\\\", countCompose(7));\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-916421.js\",\"server\":\"home\"}}],[\"upgrade-gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await upgradeGang(ns, flags);\\r\\n}\\r\\nexport async function upgradeGang(ns, { b: budgetRatio }) {\\r\\n    let budget = ns.getPlayer().money * budgetRatio;\\r\\n    getEquipments(ns).forEach((equipment) => {\\r\\n        if (budget >= equipment.cost) {\\r\\n            for (const gangMember of getGangMembers(ns)) {\\r\\n                if (ns.gang.purchaseEquipment(gangMember.name, equipment.name)) {\\r\\n                    budget -= equipment.cost;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function getEquipments(ns) {\\r\\n    return ns.gang\\r\\n        .getEquipmentNames()\\r\\n        .map((equipmentName) => ({\\r\\n        name: equipmentName,\\r\\n        cost: ns.gang.getEquipmentCost(equipmentName),\\r\\n        stats: ns.gang.getEquipmentStats(equipmentName),\\r\\n        type: ns.gang.getEquipmentType(equipmentName),\\r\\n    }))\\r\\n        .sort(({ cost: a }, { cost: b }) => a - b);\\r\\n}\\r\\nexport function getGangMembers(ns) {\\r\\n    return ns.gang\\r\\n        .getMemberNames()\\r\\n        .map((name) => ns.gang.getMemberInformation(name));\\r\\n}\\r\\n\",\"filename\":\"upgrade-gang.js\",\"server\":\"home\"}}],[\"restart-script.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    script: \\\"bot.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await restart(ns, args);\\r\\n}\\r\\nexport async function restart(ns, { script }) {\\r\\n    const processes = ns.ps();\\r\\n    const process = processes.find((process) => process.filename === script);\\r\\n    if (!process) {\\r\\n        ns.toast(\\\"Process not found!\\\", \\\"error\\\");\\r\\n        return;\\r\\n    }\\r\\n    ns.kill(process.pid);\\r\\n    ns.spawn(script, {\\r\\n        spawnDelay: 1,\\r\\n    }, ...process.args);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.scripts;\\r\\n}\\r\\n\",\"filename\":\"restart-script.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"node-0\",\"node-1\",\"node-2\",\"node-3\",\"node-4\",\"node-5\",\"node-6\",\"node-7\",\"node-8\",\"node-9\",\"node-10\",\"node-11\",\"node-12\",\"node-13\",\"node-14\",\"node-15\",\"node-16\",\"node-17\",\"node-18\",\"node-19\",\"node-20\",\"node-21\",\"node-22\",\"node-23\",\"node-24\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"-g\"],\"dataMap\":{},\"filename\":\"bot.js\",\"offlineExpGained\":29131943466.790947,\"offlineMoneyMade\":0,\"offlineRunningTime\":122257.439,\"onlineExpGained\":3486964031.967827,\"onlineMoneyMade\":10085774968975.576,\"onlineRunningTime\":4591.0099999980175,\"ramUsage\":47.75,\"server\":\"home\",\"scriptKey\":\"bot.js*[\\\"-g\\\"]\",\"title\":\"bot.js -g\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.81000000000023,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"nwo\\\"]\",\"title\":\"lib/specialized-weaken.js nwo\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.21000000000012,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-weaken.js megacorp\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.40999999999997,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"stormtech\\\"]\",\"title\":\"lib/specialized-weaken.js stormtech\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.40999999999997,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"aerocorp\\\"]\",\"title\":\"lib/specialized-weaken.js aerocorp\",\"threads\":36,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.40999999999994,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"helios\\\"]\",\"title\":\"lib/specialized-weaken.js helios\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.20999999999992,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"blade\\\"]\",\"title\":\"lib/specialized-grow.js blade\",\"threads\":190,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.20999999999992,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"defcomm\\\"]\",\"title\":\"lib/specialized-weaken.js defcomm\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.209999999999923,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"clarkinc\\\"]\",\"title\":\"lib/specialized-weaken.js clarkinc\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.80999999999994,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"taiyang-digital\\\"]\",\"title\":\"lib/specialized-grow.js taiyang-digital\",\"threads\":160,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"ecorp\\\"]\",\"title\":\"lib/specialized-grow.js ecorp\",\"threads\":157,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"fulcrumtech\\\"]\",\"title\":\"lib/specialized-grow.js fulcrumtech\",\"threads\":145,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"icarus\\\"]\",\"title\":\"lib/specialized-weaken.js icarus\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-weaken.js unitalife\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"powerhouse-fitness\\\"]\",\"title\":\"lib/specialized-weaken.js powerhouse-fitness\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.60999999999995,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"clarkinc\\\"]\",\"title\":\"lib/specialized-grow.js clarkinc\",\"threads\":230,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.60999999999995,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"vitalife\\\"]\",\"title\":\"lib/specialized-grow.js vitalife\",\"threads\":208,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.609999999999953,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-grow.js omnia\",\"threads\":190,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.409999999999958,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"kuai-gong\\\"]\",\"title\":\"lib/specialized-grow.js kuai-gong\",\"threads\":170,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"omnitek\\\"]\",\"title\":\"lib/specialized-weaken.js omnitek\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"solaris\\\"]\",\"title\":\"lib/specialized-grow.js solaris\",\"threads\":148,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.40999999999996,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"infocomm\\\"]\",\"title\":\"lib/specialized-grow.js infocomm\",\"threads\":185,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"nwo\\\"]\",\"title\":\"lib/specialized-grow.js nwo\",\"threads\":199,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"stormtech\\\"]\",\"title\":\"lib/specialized-grow.js stormtech\",\"threads\":166,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"lib/specialized-weaken.js global-pharm\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"aerocorp\\\"]\",\"title\":\"lib/specialized-grow.js aerocorp\",\"threads\":210,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"applied-energetics\\\"]\",\"title\":\"lib/specialized-weaken.js applied-energetics\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"helios\\\"]\",\"title\":\"lib/specialized-grow.js helios\",\"threads\":198,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"microdyne\\\"]\",\"title\":\"lib/specialized-weaken.js microdyne\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-grow.js unitalife\",\"threads\":165,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"alpha-ent\\\"]\",\"title\":\"lib/specialized-weaken.js alpha-ent\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.00999999999998,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"blade\\\"]\",\"title\":\"lib/specialized-weaken.js blade\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.00999999999998,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"defcomm\\\"]\",\"title\":\"lib/specialized-grow.js defcomm\",\"threads\":175,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.00999999999998,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"powerhouse-fitness\\\"]\",\"title\":\"lib/specialized-grow.js powerhouse-fitness\",\"threads\":168,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.00999999999998,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"snap-fitness\\\"]\",\"title\":\"lib/specialized-weaken.js snap-fitness\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999984,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"nova-med\\\"]\",\"title\":\"lib/specialized-weaken.js nova-med\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.009999999999984,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"applied-energetics\\\"]\",\"title\":\"lib/specialized-grow.js applied-energetics\",\"threads\":162,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"blade\\\"]\",\"title\":\"lib/specialized-hack.js blade\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"zb-def\\\"]\",\"title\":\"lib/specialized-grow.js zb-def\",\"threads\":149,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"syscore\\\"]\",\"title\":\"lib/specialized-grow.js syscore\",\"threads\":135,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"catalyst\\\"]\",\"title\":\"lib/specialized-grow.js catalyst\",\"threads\":304,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"kuai-gong\\\"]\",\"title\":\"lib/specialized-hack.js kuai-gong\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"nwo\\\"]\",\"title\":\"lib/specialized-hack.js nwo\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"zeus-med\\\"]\",\"title\":\"lib/specialized-weaken.js zeus-med\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"deltaone\\\"]\",\"title\":\"lib/specialized-weaken.js deltaone\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"nova-med\\\"]\",\"title\":\"lib/specialized-grow.js nova-med\",\"threads\":140,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"univ-energy\\\"]\",\"title\":\"lib/specialized-weaken.js univ-energy\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"zb-institute\\\"]\",\"title\":\"lib/specialized-grow.js zb-institute\",\"threads\":152,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-weaken.js titan-labs\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"global-pharm\\\"]\",\"title\":\"lib/specialized-grow.js global-pharm\",\"threads\":151,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-hack.js omnia\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"taiyang-digital\\\"]\",\"title\":\"lib/specialized-weaken.js taiyang-digital\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"vitalife\\\"]\",\"title\":\"lib/specialized-hack.js vitalife\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"microdyne\\\"]\",\"title\":\"lib/specialized-grow.js microdyne\",\"threads\":157,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"ecorp\\\"]\",\"title\":\"lib/specialized-weaken.js ecorp\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"clarkinc\\\"]\",\"title\":\"lib/specialized-hack.js clarkinc\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"icarus\\\"]\",\"title\":\"lib/specialized-grow.js icarus\",\"threads\":186,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"catalyst\\\"]\",\"title\":\"lib/specialized-weaken.js catalyst\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"summit-uni\\\"]\",\"title\":\"lib/specialized-weaken.js summit-uni\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-grow.js megacorp\",\"threads\":142,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"fulcrumtech\\\"]\",\"title\":\"lib/specialized-weaken.js fulcrumtech\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"global-pharm\\\"]\",\"title\":\"lib/specialized-hack.js global-pharm\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"nova-med\\\"]\",\"title\":\"lib/specialized-hack.js nova-med\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"galactic-cyber\\\"]\",\"title\":\"lib/specialized-grow.js galactic-cyber\",\"threads\":122,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"alpha-ent\\\"]\",\"title\":\"lib/specialized-grow.js alpha-ent\",\"threads\":141,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"aevum-police\\\"]\",\"title\":\"lib/specialized-grow.js aevum-police\",\"threads\":315,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"millenium-fitness\\\"]\",\"title\":\"lib/specialized-weaken.js millenium-fitness\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"lib/specialized-grow.js rothman-uni\",\"threads\":115,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-grow.js titan-labs\",\"threads\":141,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"galactic-cyber\\\"]\",\"title\":\"lib/specialized-weaken.js galactic-cyber\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000003,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"solaris\\\"]\",\"title\":\"lib/specialized-hack.js solaris\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000003,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"infocomm\\\"]\",\"title\":\"lib/specialized-hack.js infocomm\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"aevum-police\\\"]\",\"title\":\"lib/specialized-weaken.js aevum-police\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"ecorp\\\"]\",\"title\":\"lib/specialized-hack.js ecorp\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"b-and-a\\\"]\",\"title\":\"lib/specialized-weaken.js b-and-a\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"b-and-a\\\"]\",\"title\":\"lib/specialized-hack.js b-and-a\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"omnitek\\\"]\",\"title\":\"lib/specialized-hack.js omnitek\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"4sigma\\\"]\",\"title\":\"lib/specialized-weaken.js 4sigma\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"4sigma\\\"]\",\"title\":\"lib/specialized-hack.js 4sigma\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"zeus-med\\\"]\",\"title\":\"lib/specialized-hack.js zeus-med\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"univ-energy\\\"]\",\"title\":\"lib/specialized-hack.js univ-energy\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"zb-institute\\\"]\",\"title\":\"lib/specialized-weaken.js zb-institute\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"zb-institute\\\"]\",\"title\":\"lib/specialized-hack.js zb-institute\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"zb-def\\\"]\",\"title\":\"lib/specialized-weaken.js zb-def\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"zb-def\\\"]\",\"title\":\"lib/specialized-hack.js zb-def\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-hack.js titan-labs\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"galactic-cyber\\\"]\",\"title\":\"lib/specialized-hack.js galactic-cyber\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"vitalife\\\"]\",\"title\":\"lib/specialized-weaken.js vitalife\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"microdyne\\\"]\",\"title\":\"lib/specialized-hack.js microdyne\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"syscore\\\"]\",\"title\":\"lib/specialized-weaken.js syscore\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"4sigma\\\"]\",\"title\":\"lib/specialized-grow.js 4sigma\",\"threads\":99,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"fulcrumtech\\\"]\",\"title\":\"lib/specialized-hack.js fulcrumtech\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"deltaone\\\"]\",\"title\":\"lib/specialized-hack.js deltaone\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-weaken.js omnia\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"taiyang-digital\\\"]\",\"title\":\"lib/specialized-hack.js taiyang-digital\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"alpha-ent\\\"]\",\"title\":\"lib/specialized-hack.js alpha-ent\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"infocomm\\\"]\",\"title\":\"lib/specialized-weaken.js infocomm\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"the-hub\\\"]\",\"title\":\"lib/specialized-weaken.js the-hub\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"the-hub\\\"]\",\"title\":\"lib/specialized-grow.js the-hub\",\"threads\":73,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"johnson-ortho\\\"]\",\"title\":\"lib/specialized-weaken.js johnson-ortho\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"lib/specialized-grow.js johnson-ortho\",\"threads\":178,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"stormtech\\\"]\",\"title\":\"lib/specialized-hack.js stormtech\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-hack.js unitalife\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"applied-energetics\\\"]\",\"title\":\"lib/specialized-hack.js applied-energetics\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"powerhouse-fitness\\\"]\",\"title\":\"lib/specialized-hack.js powerhouse-fitness\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"rho-construction\\\"]\",\"title\":\"lib/specialized-weaken.js rho-construction\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"netlink\\\"]\",\"title\":\"lib/specialized-weaken.js netlink\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"millenium-fitness\\\"]\",\"title\":\"lib/specialized-grow.js millenium-fitness\",\"threads\":168,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"omega-net\\\"]\",\"title\":\"lib/specialized-weaken.js omega-net\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"crush-fitness\\\"]\",\"title\":\"lib/specialized-weaken.js crush-fitness\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-weaken.js silver-helix\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"kuai-gong\\\"]\",\"title\":\"lib/specialized-weaken.js kuai-gong\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"univ-energy\\\"]\",\"title\":\"lib/specialized-grow.js univ-energy\",\"threads\":129,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"aerocorp\\\"]\",\"title\":\"lib/specialized-hack.js aerocorp\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"lexo-corp\\\"]\",\"title\":\"lib/specialized-weaken.js lexo-corp\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"lexo-corp\\\"]\",\"title\":\"lib/specialized-hack.js lexo-corp\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"rho-construction\\\"]\",\"title\":\"lib/specialized-grow.js rho-construction\",\"threads\":90,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"helios\\\"]\",\"title\":\"lib/specialized-hack.js helios\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"aevum-police\\\"]\",\"title\":\"lib/specialized-hack.js aevum-police\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"summit-uni\\\"]\",\"title\":\"lib/specialized-grow.js summit-uni\",\"threads\":113,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"summit-uni\\\"]\",\"title\":\"lib/specialized-hack.js summit-uni\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"netlink\\\"]\",\"title\":\"lib/specialized-hack.js netlink\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"millenium-fitness\\\"]\",\"title\":\"lib/specialized-hack.js millenium-fitness\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"rothman-uni\\\"]\",\"title\":\"lib/specialized-weaken.js rothman-uni\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"rothman-uni\\\"]\",\"title\":\"lib/specialized-hack.js rothman-uni\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"computek\\\"]\",\"title\":\"lib/specialized-weaken.js computek\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"computek\\\"]\",\"title\":\"lib/specialized-grow.js computek\",\"threads\":81,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"lib/specialized-hack.js johnson-ortho\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omega-net\\\"]\",\"title\":\"lib/specialized-grow.js omega-net\",\"threads\":174,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"b-and-a\\\"]\",\"title\":\"lib/specialized-grow.js b-and-a\",\"threads\":115,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omnitek\\\"]\",\"title\":\"lib/specialized-grow.js omnitek\",\"threads\":135,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"zeus-med\\\"]\",\"title\":\"lib/specialized-grow.js zeus-med\",\"threads\":136,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"deltaone\\\"]\",\"title\":\"lib/specialized-grow.js deltaone\",\"threads\":187,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"icarus\\\"]\",\"title\":\"lib/specialized-hack.js icarus\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"defcomm\\\"]\",\"title\":\"lib/specialized-hack.js defcomm\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"lexo-corp\\\"]\",\"title\":\"lib/specialized-grow.js lexo-corp\",\"threads\":226,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"rho-construction\\\"]\",\"title\":\"lib/specialized-hack.js rho-construction\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"snap-fitness\\\"]\",\"title\":\"lib/specialized-grow.js snap-fitness\",\"threads\":139,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"snap-fitness\\\"]\",\"title\":\"lib/specialized-hack.js snap-fitness\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"syscore\\\"]\",\"title\":\"lib/specialized-hack.js syscore\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"catalyst\\\"]\",\"title\":\"lib/specialized-hack.js catalyst\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"netlink\\\"]\",\"title\":\"lib/specialized-grow.js netlink\",\"threads\":168,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"computek\\\"]\",\"title\":\"lib/specialized-hack.js computek\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"the-hub\\\"]\",\"title\":\"lib/specialized-hack.js the-hub\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"omega-net\\\"]\",\"title\":\"lib/specialized-hack.js omega-net\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"lib/specialized-grow.js crush-fitness\",\"threads\":208,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"crush-fitness\\\"]\",\"title\":\"lib/specialized-hack.js crush-fitness\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":93,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-hack.js silver-helix\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"phantasy\\\"]\",\"title\":\"lib/specialized-weaken.js phantasy\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"phantasy\\\"]\",\"title\":\"lib/specialized-grow.js phantasy\",\"threads\":67,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"phantasy\\\"]\",\"title\":\"lib/specialized-hack.js phantasy\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"iron-gym\\\"]\",\"title\":\"lib/specialized-weaken.js iron-gym\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"iron-gym\\\"]\",\"title\":\"lib/specialized-grow.js iron-gym\",\"threads\":131,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"iron-gym\\\"]\",\"title\":\"lib/specialized-hack.js iron-gym\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"max-hardware\\\"]\",\"title\":\"lib/specialized-weaken.js max-hardware\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"max-hardware\\\"]\",\"title\":\"lib/specialized-grow.js max-hardware\",\"threads\":40,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"max-hardware\\\"]\",\"title\":\"lib/specialized-hack.js max-hardware\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"zer0\\\"]\",\"title\":\"lib/specialized-weaken.js zer0\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"zer0\\\"]\",\"title\":\"lib/specialized-grow.js zer0\",\"threads\":29,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"zer0\\\"]\",\"title\":\"lib/specialized-hack.js zer0\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"neo-net\\\"]\",\"title\":\"lib/specialized-weaken.js neo-net\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"neo-net\\\"]\",\"title\":\"lib/specialized-grow.js neo-net\",\"threads\":47,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"neo-net\\\"]\",\"title\":\"lib/specialized-hack.js neo-net\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"lib/specialized-weaken.js harakiri-sushi\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"lib/specialized-grow.js harakiri-sushi\",\"threads\":31,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"lib/specialized-hack.js harakiri-sushi\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"lib/specialized-weaken.js hong-fang-tea\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"lib/specialized-grow.js hong-fang-tea\",\"threads\":61,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"lib/specialized-hack.js hong-fang-tea\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"nectar-net\\\"]\",\"title\":\"lib/specialized-grow.js nectar-net\",\"threads\":47,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"nectar-net\\\"]\",\"title\":\"lib/specialized-hack.js nectar-net\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"joesguns\\\"]\",\"title\":\"lib/specialized-weaken.js joesguns\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"joesguns\\\"]\",\"title\":\"lib/specialized-grow.js joesguns\",\"threads\":61,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"joesguns\\\"]\",\"title\":\"lib/specialized-hack.js joesguns\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"lib/specialized-weaken.js sigma-cosmetics\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"lib/specialized-grow.js sigma-cosmetics\",\"threads\":125,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"lib/specialized-hack.js sigma-cosmetics\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"foodnstuff\\\"]\",\"title\":\"lib/specialized-weaken.js foodnstuff\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"lib/specialized-grow.js foodnstuff\",\"threads\":253,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"foodnstuff\\\"]\",\"title\":\"lib/specialized-hack.js foodnstuff\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"n00dles\\\"]\",\"title\":\"lib/specialized-hack.js n00dles\",\"threads\":5,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"64.9.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"ecorp\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"ecorp\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"ecorp\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"ecorp\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"ecorp\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"ecorp\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"ecorp\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"ecorp\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"ecorp\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"ecorp\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"ecorp\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"ecorp\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"ecorp\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"ecorp\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"ecorp\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"ecorp\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"ecorp\"}}]]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":33.29950000000005,\"minDifficulty\":33,\"moneyAvailable\":5795444069.766683,\"moneyMax\":87215329700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1065,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"77.0.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"megacorp\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"megacorp\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"megacorp\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"megacorp\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"megacorp\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"megacorp\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"megacorp\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"megacorp\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"megacorp\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"megacorp\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"megacorp\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"megacorp\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"megacorp\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"megacorp\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"megacorp\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"megacorp\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"megacorp\"}}]]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":34.37850000000002,\"minDifficulty\":33,\"moneyAvailable\":26032778549.761776,\"moneyMax\":118863987950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1331,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"37.4.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"b-and-a\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"b-and-a\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"b-and-a\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"b-and-a\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"b-and-a\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"b-and-a\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"b-and-a\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"b-and-a\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"b-and-a\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"b-and-a\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"b-and-a\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"b-and-a\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"b-and-a\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"b-and-a\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"b-and-a\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"b-and-a\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"b-and-a\"}}]]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":73,\"hackDifficulty\":24.593999999999998,\"minDifficulty\":24,\"moneyAvailable\":10972003994.445381,\"moneyMax\":46374178118,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":940,\"serverGrowth\":79,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"74.7.3.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"blade\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"blade\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"blade\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"blade\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"blade\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"blade\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"blade\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"blade\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"blade\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"blade\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"blade\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"blade\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"blade\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"blade\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"blade\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"blade\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":88,\"hackDifficulty\":30.433,\"minDifficulty\":29,\"moneyAvailable\":4799601017.915505,\"moneyMax\":68845430662,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1130,\"serverGrowth\":68,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"91.7.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"nwo\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"nwo\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"nwo\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"nwo\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"nwo\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"nwo\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"nwo\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"nwo\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"nwo\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"nwo\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"nwo\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"nwo\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"nwo\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"nwo\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"nwo\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"nwo\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"nwo\"}}]]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":36.047500000000014,\"minDifficulty\":33,\"moneyAvailable\":5308305494.0389,\"moneyMax\":44339157604,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1138,\"serverGrowth\":81,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-623731-CyberSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[8,-5,-2,3,6,-2,-7,10,7,0,-6,-10,-8,2,-10,7,8,6,7,7,4,6,-1,3,1,0,4],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"95.7.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"clarkinc\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"clarkinc\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"clarkinc\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"clarkinc\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"clarkinc\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"clarkinc\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"clarkinc\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"clarkinc\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"clarkinc\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"clarkinc\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"clarkinc\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"clarkinc\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"clarkinc\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"clarkinc\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"clarkinc\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"clarkinc\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"clarkinc\"}}]]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":59,\"hackDifficulty\":22.340999999999998,\"minDifficulty\":20,\"moneyAvailable\":2650268685.2874403,\"moneyMax\":44964327986,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1196,\"serverGrowth\":46,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"12.9.4.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"omnitek\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"omnitek\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"omnitek\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"omnitek\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"omnitek\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"omnitek\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"omnitek\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"omnitek\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"omnitek\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"omnitek\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"omnitek\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"omnitek\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"omnitek\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"omnitek\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"omnitek\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"omnitek\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"blade\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":98,\"hackDifficulty\":34.808500000000215,\"minDifficulty\":33,\"moneyAvailable\":8574630266.587458,\"moneyMax\":38092144848,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":945,\"serverGrowth\":98,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-348619-CyberSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[17,18],[13,17],[25,26],[2,10],[17,25],[8,17],[17,19],[24,33],[10,12],[4,5],[6,14],[13,15],[7,8],[4,7],[6,7],[14,20],[15,19]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-487917-Daedalus.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[7,5],[1,4,1],[9,4,7,4],[1,2,9,6,8],[6,2,3,3,6,7],[9,5,3,5,3,7,8],[4,8,8,9,4,7,3,4],[5,4,2,2,2,7,8,3,2],[5,2,8,7,5,9,9,8,3,2],[8,4,2,4,6,3,7,7,8,6,5]],\"reward\":{\"type\":0,\"name\":\"Daedalus\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"8.0.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"4sigma\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"4sigma\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"4sigma\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"4sigma\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"4sigma\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"4sigma\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"4sigma\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"4sigma\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"4sigma\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"4sigma\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"4sigma\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"4sigma\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"4sigma\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"4sigma\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"4sigma\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"4sigma\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"4sigma\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":58,\"hackDifficulty\":19.618,\"minDifficulty\":19,\"moneyAvailable\":7675526204.141278,\"moneyMax\":37728010172,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":931,\"serverGrowth\":81,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-292920.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,9,2,10,0,0,4,3,0,5,1,1,8,10,4,0,10,0,0,8],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"94.0.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"kuai-gong\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"kuai-gong\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"kuai-gong\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"kuai-gong\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"kuai-gong\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"kuai-gong\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"kuai-gong\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"kuai-gong\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"kuai-gong\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"kuai-gong\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"kuai-gong\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"kuai-gong\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"kuai-gong\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"kuai-gong\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"kuai-gong\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"kuai-gong\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"kuai-gong\"}}]]},\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":33.72700000000003,\"minDifficulty\":33,\"moneyAvailable\":5443102403.089777,\"moneyMax\":47404990526,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1120,\"serverGrowth\":95,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"59.5.3.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"fulcrumtech\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"fulcrumtech\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"fulcrumtech\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"fulcrumtech\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"fulcrumtech\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"fulcrumtech\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"fulcrumtech\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"fulcrumtech\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"fulcrumtech\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"fulcrumtech\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"fulcrumtech\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"fulcrumtech\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"fulcrumtech\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"fulcrumtech\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"fulcrumtech\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"fulcrumtech\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":88,\"hackDifficulty\":29.549500000000002,\"minDifficulty\":29,\"moneyAvailable\":189252865.57648584,\"moneyMax\":3296041648,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1230,\"serverGrowth\":98,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-671842-MegaCorp.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":6796330330224,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"14.1.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"fulcrumassets\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"fulcrumassets\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"fulcrumassets\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"fulcrumassets\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"fulcrumassets\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"fulcrumassets\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"fulcrumassets\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"fulcrumassets\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"fulcrumassets\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"fulcrumassets\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"fulcrumassets\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"fulcrumassets\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"fulcrumassets\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"fulcrumassets\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"fulcrumassets\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"fulcrumassets\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"fulcrumassets\"}}]]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":100,\"minDifficulty\":33,\"moneyAvailable\":2000000,\"moneyMax\":2000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1418,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-626818.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,14],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"0.7.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"stormtech\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"stormtech\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"stormtech\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"stormtech\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"stormtech\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"stormtech\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"stormtech\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"stormtech\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"stormtech\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"stormtech\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"stormtech\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"stormtech\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"stormtech\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"stormtech\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"stormtech\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"stormtech\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"stormtech\"}}]]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":84,\"hackDifficulty\":29.931000000000015,\"minDifficulty\":28,\"moneyAvailable\":175445139.26635063,\"moneyMax\":2236005474,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":885,\"serverGrowth\":76,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-575848-MegaCorp.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")(()(a()a(()(a)))a\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"31.2.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"defcomm\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"defcomm\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"defcomm\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"defcomm\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"defcomm\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"defcomm\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"defcomm\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"defcomm\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"defcomm\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"defcomm\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"defcomm\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"defcomm\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"defcomm\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"defcomm\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"defcomm\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"defcomm\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"defcomm\"}}]]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":88,\"hackDifficulty\":30.374499999999994,\"minDifficulty\":29,\"moneyAvailable\":150614397.38631696,\"moneyMax\":1877172232,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":905,\"serverGrowth\":73,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"60.8.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"infocomm\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"infocomm\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"infocomm\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"infocomm\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"infocomm\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"infocomm\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"infocomm\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"infocomm\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"infocomm\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"infocomm\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"infocomm\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"infocomm\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"infocomm\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"infocomm\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"infocomm\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"infocomm\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"infocomm\"}}]]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":77,\"hackDifficulty\":26.470000000000006,\"minDifficulty\":26,\"moneyAvailable\":89095934.65871844,\"moneyMax\":1210696698,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":923,\"serverGrowth\":63,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-773913.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"239176101143\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-638384-Netburners.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"dqO0DBCMCn0000000000uoCzXTzXTzXTTTTTH2OTTTqTTTqTT22qTT2DRO16HT6Y8w16HT6Y\",\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-269066-Daedalus.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1100000000000000101101100010101010111110110000111001000111011001\",\"reward\":{\"type\":0,\"name\":\"Daedalus\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"90.1.7.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"helios\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"helios\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"helios\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"helios\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"helios\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"helios\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"helios\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"helios\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"helios\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"helios\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"helios\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"helios\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"helios\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"helios\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"helios\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"helios\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":94,\"hackDifficulty\":32.521499999999996,\"minDifficulty\":31,\"moneyAvailable\":60506242.379692376,\"moneyMax\":1129930938,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":839,\"serverGrowth\":80,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"52.6.6.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"vitalife\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"vitalife\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"vitalife\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"vitalife\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"vitalife\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"vitalife\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"vitalife\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"vitalife\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"vitalife\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"vitalife\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"vitalife\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"vitalife\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"vitalife\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"vitalife\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"vitalife\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"vitalife\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":83,\"hackDifficulty\":28.157500000000308,\"minDifficulty\":28,\"moneyAvailable\":121161130.38787103,\"moneyMax\":1580930908,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":863,\"serverGrowth\":61,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"4.0.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"icarus\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"icarus\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"icarus\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"icarus\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"icarus\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"icarus\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"icarus\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"icarus\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"icarus\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"icarus\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"icarus\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"icarus\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"icarus\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"icarus\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"icarus\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"icarus\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"icarus\"}}]]},\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":93,\"hackDifficulty\":32.790500000000016,\"minDifficulty\":31,\"moneyAvailable\":194238946.55976358,\"moneyMax\":1932010566,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":85,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-645214.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[2,8],[3,8],[5,9],[5,6],[7,9],[0,8],[1,7],[3,5],[7,9],[2,7],[2,5]]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"96.9.8.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"univ-energy\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"univ-energy\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"univ-energy\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"univ-energy\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"univ-energy\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"univ-energy\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"univ-energy\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"univ-energy\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"univ-energy\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"univ-energy\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"univ-energy\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"univ-energy\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"univ-energy\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"univ-energy\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"univ-energy\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"univ-energy\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":84,\"hackDifficulty\":28.9955,\"minDifficulty\":28,\"moneyAvailable\":579892923.7038927,\"moneyMax\":2366996204,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":822,\"serverGrowth\":81,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-784885-MegaCorp.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"POPUP FRAME ENTER EMAIL MODEM\",11],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"18.9.8.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"titan-labs\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"titan-labs\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"titan-labs\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"titan-labs\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"titan-labs\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"titan-labs\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"titan-labs\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"titan-labs\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"titan-labs\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"titan-labs\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"titan-labs\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"titan-labs\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"titan-labs\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"titan-labs\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"titan-labs\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"titan-labs\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":78,\"hackDifficulty\":27.064999999999994,\"minDifficulty\":26,\"moneyAvailable\":227563210.65393406,\"moneyMax\":1678876864,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":852,\"serverGrowth\":71,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"13.5.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"microdyne\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"microdyne\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"microdyne\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"microdyne\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"microdyne\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"microdyne\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"microdyne\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"microdyne\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"microdyne\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"microdyne\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"microdyne\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"microdyne\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"microdyne\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"microdyne\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"microdyne\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"microdyne\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":73,\"hackDifficulty\":25.027000000000026,\"minDifficulty\":24,\"moneyAvailable\":118256759.62902257,\"moneyMax\":1063155384,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":857,\"serverGrowth\":73,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-680698.cct\",\"type\":\"Total Ways to Sum\",\"data\":91,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"71.4.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"taiyang-digital\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"taiyang-digital\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"taiyang-digital\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"taiyang-digital\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"taiyang-digital\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"taiyang-digital\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"taiyang-digital\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"taiyang-digital\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"taiyang-digital\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"taiyang-digital\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"taiyang-digital\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"taiyang-digital\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"taiyang-digital\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"taiyang-digital\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"taiyang-digital\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"taiyang-digital\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"taiyang-digital\"}}]]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":74,\"hackDifficulty\":25.54100000000001,\"minDifficulty\":25,\"moneyAvailable\":66407080.5404093,\"moneyMax\":1706337588,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":905,\"serverGrowth\":75,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-381241-MegaCorp.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1000100010000000000000110111010101100101000110101100111110001000\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-579128-MegaCorp.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":493414157,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"33.0.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"galactic-cyber\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"galactic-cyber\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"galactic-cyber\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"galactic-cyber\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"galactic-cyber\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"galactic-cyber\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"galactic-cyber\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"galactic-cyber\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"galactic-cyber\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"galactic-cyber\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"galactic-cyber\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"galactic-cyber\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"galactic-cyber\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"galactic-cyber\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"galactic-cyber\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"galactic-cyber\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"galactic-cyber\"}}]]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":59,\"hackDifficulty\":20.258499999999994,\"minDifficulty\":20,\"moneyAvailable\":137344255.71165636,\"moneyMax\":1648926034,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":870,\"serverGrowth\":86,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-780255.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"29156853\",-58],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"88.2.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"aerocorp\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"aerocorp\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"aerocorp\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"aerocorp\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"aerocorp\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"aerocorp\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"aerocorp\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"aerocorp\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"aerocorp\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"aerocorp\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"aerocorp\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"aerocorp\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"aerocorp\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"aerocorp\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"aerocorp\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"aerocorp\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"aerocorp\"}}]]},\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":85,\"hackDifficulty\":30.39550000000045,\"minDifficulty\":28,\"moneyAvailable\":161796252.8968794,\"moneyMax\":2034058698,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":894,\"serverGrowth\":61,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-158024.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[7,3],[5,3,6],[4,6,3,2],[5,8,8,2,2],[6,8,4,7,6,9]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"60.3.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"omnia\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"omnia\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"omnia\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"omnia\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"omnia\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"omnia\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"omnia\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"omnia\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"omnia\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"omnia\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"omnia\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"omnia\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"omnia\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"omnia\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"omnia\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"omnia\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":85,\"hackDifficulty\":28.33950000000011,\"minDifficulty\":28,\"moneyAvailable\":144637475.3762945,\"moneyMax\":1948294234,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":866,\"serverGrowth\":69,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-79757.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"206157385008\",-24],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-328270.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1757215119\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"16.9.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"zb-def\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"zb-def\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"zb-def\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"zb-def\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"zb-def\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"zb-def\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"zb-def\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"zb-def\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"zb-def\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"zb-def\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"zb-def\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"zb-def\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"zb-def\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"zb-def\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"zb-def\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"zb-def\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":59,\"hackDifficulty\":20.014,\"minDifficulty\":20,\"moneyAvailable\":90210547.56287673,\"moneyMax\":2064827548,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":802,\"serverGrowth\":75,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"94.9.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"applied-energetics\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"applied-energetics\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"applied-energetics\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"applied-energetics\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"applied-energetics\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"applied-energetics\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"applied-energetics\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"applied-energetics\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"applied-energetics\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"applied-energetics\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"applied-energetics\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"applied-energetics\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"applied-energetics\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"applied-energetics\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"applied-energetics\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"applied-energetics\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"applied-energetics\"}}]]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":76,\"hackDifficulty\":25.717999999999996,\"minDifficulty\":25,\"moneyAvailable\":118825935.06229767,\"moneyMax\":1917359292,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":786,\"serverGrowth\":73,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"68.2.6.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"solaris\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"solaris\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"solaris\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"solaris\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"solaris\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"solaris\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"solaris\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"solaris\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"solaris\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"solaris\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"solaris\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"solaris\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"solaris\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"solaris\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"solaris\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"solaris\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":70,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":88321713.17775738,\"moneyMax\":1621837438,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":808,\"serverGrowth\":78,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-819784.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"FRAME DEBUG SHIFT QUEUE TRASH\",1],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-119097.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[7,10],[5,6],[0,3],[1,7],[3,6],[0,9],[6,9],[1,3],[2,9],[8,10],[4,10],[3,10],[1,4],[0,7]]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"50.6.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"deltaone\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"deltaone\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"deltaone\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"deltaone\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"deltaone\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"deltaone\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"deltaone\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"deltaone\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"deltaone\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"deltaone\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"deltaone\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"deltaone\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"deltaone\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"deltaone\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"deltaone\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"deltaone\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"deltaone\"}}]]},\"serversOnNetwork\":[\"aerocorp\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":25.995500000000476,\"minDifficulty\":25,\"moneyAvailable\":697979279.0175971,\"moneyMax\":2941002028,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":882,\"serverGrowth\":51,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"27.6.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"global-pharm\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"global-pharm\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"global-pharm\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"global-pharm\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"global-pharm\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"global-pharm\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"global-pharm\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"global-pharm\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"global-pharm\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"global-pharm\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"global-pharm\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"global-pharm\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"global-pharm\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"global-pharm\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"global-pharm\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"global-pharm\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":79,\"hackDifficulty\":26.951000000000004,\"minDifficulty\":26,\"moneyAvailable\":353625643.5826399,\"moneyMax\":3022702572,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":787,\"serverGrowth\":80,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-624065-MegaCorp.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-5,-5,0,-6,-10,10,-9,-7,2,9,-2,8,-10,-1,-9,9,0,-9,4,-1,-10,6],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-869099.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":761372841,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"47.8.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"nova-med\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"nova-med\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"nova-med\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"nova-med\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"nova-med\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"nova-med\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"nova-med\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"nova-med\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"nova-med\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"nova-med\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"nova-med\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"nova-med\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"nova-med\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"nova-med\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"nova-med\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"nova-med\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":74,\"hackDifficulty\":25.624,\"minDifficulty\":25,\"moneyAvailable\":272767427.4954551,\"moneyMax\":2411724312,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":823,\"serverGrowth\":83,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-833402.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,13],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"69.2.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"zeus-med\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"zeus-med\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"zeus-med\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"zeus-med\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"zeus-med\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"zeus-med\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"zeus-med\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"zeus-med\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"zeus-med\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"zeus-med\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"zeus-med\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"zeus-med\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"zeus-med\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"zeus-med\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"zeus-med\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"zeus-med\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"zeus-med\"}}]]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":85,\"hackDifficulty\":28.92400000000005,\"minDifficulty\":28,\"moneyAvailable\":758545884.7043681,\"moneyMax\":2953520742,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":802,\"serverGrowth\":74,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-529664.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"56030929022\",-56],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-627171.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[86,[2,4,5,6,7,8,10,11,12,13,14]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"5.1.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"unitalife\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"unitalife\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"unitalife\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"unitalife\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"unitalife\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"unitalife\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"unitalife\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"unitalife\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"unitalife\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"unitalife\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"unitalife\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"unitalife\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"unitalife\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"unitalife\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"unitalife\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"unitalife\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":26.022000000000013,\"minDifficulty\":25,\"moneyAvailable\":123729227.85501713,\"moneyMax\":2043120874,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":793,\"serverGrowth\":74,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"0.5.9.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"lexo-corp\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"lexo-corp\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"lexo-corp\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"lexo-corp\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"lexo-corp\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"lexo-corp\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"lexo-corp\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"lexo-corp\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"lexo-corp\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"lexo-corp\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"lexo-corp\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"lexo-corp\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"lexo-corp\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"lexo-corp\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"lexo-corp\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"lexo-corp\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":77,\"hackDifficulty\":26.854,\"minDifficulty\":26,\"moneyAvailable\":211834058.65435046,\"moneyMax\":1576778912,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":670,\"serverGrowth\":61,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"84.4.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"rho-construction\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"rho-construction\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"rho-construction\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"rho-construction\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"rho-construction\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"rho-construction\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"rho-construction\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"rho-construction\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"rho-construction\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"rho-construction\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"rho-construction\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"rho-construction\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"rho-construction\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"rho-construction\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"rho-construction\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"rho-construction\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":58,\"hackDifficulty\":19.848000000000003,\"minDifficulty\":19,\"moneyAvailable\":301382527.74321175,\"moneyMax\":1187302776,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":498,\"serverGrowth\":47,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-109868-BitRunners.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,2],\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"54.6.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"alpha-ent\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"alpha-ent\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"alpha-ent\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"alpha-ent\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"alpha-ent\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"alpha-ent\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"alpha-ent\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"alpha-ent\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"alpha-ent\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"alpha-ent\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"alpha-ent\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"alpha-ent\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"alpha-ent\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"alpha-ent\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"alpha-ent\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"alpha-ent\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":61,\"hackDifficulty\":20.684,\"minDifficulty\":20,\"moneyAvailable\":161812920.1979003,\"moneyMax\":1218234866,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":598,\"serverGrowth\":59,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-688990-MegaCorp.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,24],[8,9],[15,22],[16,18],[5,15],[22,29],[14,22],[10,16],[5,13],[4,13],[20,23],[19,23],[25,31],[22,28],[13,14],[10,19],[18,22]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"42.4.0.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"aevum-police\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"aevum-police\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"aevum-police\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"aevum-police\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"aevum-police\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"aevum-police\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"aevum-police\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"aevum-police\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"aevum-police\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"aevum-police\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"aevum-police\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"aevum-police\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"aevum-police\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"aevum-police\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"aevum-police\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"aevum-police\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":74,\"hackDifficulty\":26.376499999997876,\"minDifficulty\":25,\"moneyAvailable\":38147618.50374541,\"moneyMax\":737198116,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":449,\"serverGrowth\":42,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-769519.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[19,12],[5,7]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-605342-Netburners.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"SHELLFRAMEFLASHENTERVIRUS\",\"BROADBAND\"],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"19.1.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"rothman-uni\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"rothman-uni\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"rothman-uni\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"rothman-uni\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"rothman-uni\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"rothman-uni\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"rothman-uni\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"rothman-uni\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"rothman-uni\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"rothman-uni\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"rothman-uni\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"rothman-uni\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"rothman-uni\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"rothman-uni\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"rothman-uni\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"rothman-uni\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":51,\"hackDifficulty\":17.012,\"minDifficulty\":17,\"moneyAvailable\":55290731.87256549,\"moneyMax\":486321206,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":374,\"serverGrowth\":45,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-802791.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":84712097,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-495125.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"23.7.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"zb-institute\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"zb-institute\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"zb-institute\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"zb-institute\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"zb-institute\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"zb-institute\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"zb-institute\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"zb-institute\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"zb-institute\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"zb-institute\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"zb-institute\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"zb-institute\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"zb-institute\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"zb-institute\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"zb-institute\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"zb-institute\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"computek\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":67,\"hackDifficulty\":22.014,\"minDifficulty\":22,\"moneyAvailable\":193661267.0399204,\"moneyMax\":2198192896,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":766,\"serverGrowth\":79,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"48.1.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"summit-uni\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"summit-uni\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"summit-uni\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"summit-uni\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"summit-uni\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"summit-uni\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"summit-uni\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"summit-uni\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"summit-uni\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"summit-uni\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"summit-uni\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"summit-uni\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"summit-uni\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"summit-uni\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"summit-uni\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"summit-uni\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":53,\"hackDifficulty\":18.656000000000002,\"minDifficulty\":18,\"moneyAvailable\":154892116.09297466,\"moneyMax\":611233608,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":440,\"serverGrowth\":58,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-495526.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[42,40,43,29,19,4,36,21,17,23,35,31,1],[30,14,12,21,35,35,3,26,36,12,43,21,8],[33,25,40,37,49,11,40,15,41,1,25,9,12]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-768391-TheSyndicate.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"01100000000000001000101111010111\",\"reward\":{\"type\":0,\"name\":\"The Syndicate\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"9.6.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"syscore\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"syscore\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"syscore\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"syscore\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"syscore\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"syscore\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"syscore\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"syscore\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"syscore\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"syscore\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"syscore\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"syscore\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"syscore\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"syscore\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"syscore\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"syscore\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":61,\"hackDifficulty\":20.024,\"minDifficulty\":20,\"moneyAvailable\":34212029.502920456,\"moneyMax\":805493692,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":569,\"serverGrowth\":70,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-116259.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"UUOODD77pppp6qq0033HH444444446666666666LL88888888FFFFFFUccaazXvvf7Sr7y\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"70.4.4.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"catalyst\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"catalyst\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"catalyst\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"catalyst\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"catalyst\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"catalyst\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"catalyst\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"catalyst\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"catalyst\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"catalyst\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"catalyst\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"catalyst\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"catalyst\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"catalyst\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"catalyst\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"catalyst\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":69,\"hackDifficulty\":23.70299999999994,\"minDifficulty\":23,\"moneyAvailable\":16928326.66324535,\"moneyMax\":652547222,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":415,\"serverGrowth\":43,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"7.0.3.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"the-hub\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"the-hub\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"the-hub\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"the-hub\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"the-hub\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"the-hub\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"the-hub\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"the-hub\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"the-hub\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"the-hub\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"the-hub\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"the-hub\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"the-hub\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"the-hub\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"the-hub\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"the-hub\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37,\"hackDifficulty\":12.384,\"minDifficulty\":12,\"moneyAvailable\":31306359.166204434,\"moneyMax\":319731340,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":283,\"serverGrowth\":47,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"7.4.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"computek\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"computek\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"computek\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"computek\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"computek\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"computek\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"computek\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"computek\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"computek\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"computek\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"computek\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"computek\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"computek\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"computek\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"computek\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"computek\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":65,\"hackDifficulty\":22.58450000000002,\"minDifficulty\":22,\"moneyAvailable\":112851194.05121411,\"moneyMax\":453740968,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":398,\"serverGrowth\":62,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-35051-BitRunners.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,2],\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"28.6.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"netlink\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"netlink\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"netlink\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"netlink\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"netlink\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"netlink\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"netlink\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"netlink\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"netlink\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"netlink\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"netlink\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"netlink\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"netlink\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"netlink\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"netlink\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"netlink\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":63,\"hackDifficulty\":22.010500000000008,\"minDifficulty\":21,\"moneyAvailable\":131673633.09529041,\"moneyMax\":550000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":414,\"serverGrowth\":48,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-599247.cct\",\"type\":\"Total Ways to Sum\",\"data\":46,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-449485.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[17,132,159,198,145,32,93,135,45,165,138,64,20,37,17,57,145,103,145,67,17,40,86,134,35,65,94,125,97,4,174,10,141,179,82,154],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-226142.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0],[1,1,0,1,0,1,1],[0,0,0,0,0,0,0],[0,0,0,0,0,1,0],[0,1,0,1,1,0,0],[0,0,0,0,0,0,0],[1,0,1,0,0,0,0],[0,0,0,0,0,0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"4.7.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"johnson-ortho\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"johnson-ortho\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"johnson-ortho\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"johnson-ortho\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"johnson-ortho\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"johnson-ortho\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"johnson-ortho\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"johnson-ortho\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"johnson-ortho\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"johnson-ortho\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"johnson-ortho\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"johnson-ortho\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"johnson-ortho\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"johnson-ortho\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"johnson-ortho\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"johnson-ortho\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":61,\"hackDifficulty\":20.7205,\"minDifficulty\":20,\"moneyAvailable\":12778820.530632146,\"moneyMax\":165689858,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":277,\"serverGrowth\":60,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"37.9.2.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"n00dles\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"n00dles\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"n00dles\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"n00dles\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"n00dles\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"n00dles\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"n00dles\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"n00dles\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"n00dles\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"n00dles\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"n00dles\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"n00dles\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"n00dles\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"n00dles\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"n00dles\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"n00dles\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":140000,\"moneyMax\":140000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"2.1.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"foodnstuff\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"foodnstuff\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"foodnstuff\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"foodnstuff\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"foodnstuff\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"foodnstuff\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"foodnstuff\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"foodnstuff\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"foodnstuff\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"foodnstuff\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"foodnstuff\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"foodnstuff\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"foodnstuff\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"foodnstuff\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"foodnstuff\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"foodnstuff\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":3.3796249999998973,\"minDifficulty\":3,\"moneyAvailable\":2247049.1979096658,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-671013.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[36,8,3,48,14]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"41.5.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":3.2484999999999995,\"minDifficulty\":3,\"moneyAvailable\":2597183.652667034,\"moneyMax\":4600000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"8.5.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"joesguns\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"joesguns\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"joesguns\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"joesguns\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"joesguns\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"joesguns\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"joesguns\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"joesguns\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"joesguns\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"joesguns\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"joesguns\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"joesguns\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"joesguns\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"joesguns\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"joesguns\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"joesguns\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.258,\"minDifficulty\":5,\"moneyAvailable\":2862879.506616616,\"moneyMax\":5000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"69.1.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"zer0\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"zer0\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"zer0\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"zer0\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"zer0\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"zer0\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"zer0\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"zer0\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"zer0\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"zer0\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"zer0\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"zer0\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"zer0\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"zer0\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"zer0\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"zer0\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":8.129999999999999,\"minDifficulty\":8,\"moneyAvailable\":8908744.17332381,\"moneyMax\":15000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"28.4.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"nectar-net\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"nectar-net\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"nectar-net\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"nectar-net\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"nectar-net\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"nectar-net\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"nectar-net\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"nectar-net\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"nectar-net\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"nectar-net\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"nectar-net\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"nectar-net\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"nectar-net\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"nectar-net\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"nectar-net\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"nectar-net\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":3213409.22800611,\"moneyMax\":5500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-708820-MegaCorp.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[186,[1,2,3,4,5,8,9,10]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"93.3.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"neo-net\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"neo-net\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"neo-net\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"neo-net\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"neo-net\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"neo-net\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"neo-net\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"neo-net\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"neo-net\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"neo-net\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"neo-net\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"neo-net\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"neo-net\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"neo-net\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"neo-net\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"neo-net\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":8.198,\"minDifficulty\":8,\"moneyAvailable\":5898523.600252155,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"93.4.6.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"silver-helix\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"silver-helix\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"silver-helix\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"silver-helix\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"silver-helix\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"silver-helix\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"silver-helix\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"silver-helix\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"silver-helix\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"silver-helix\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"silver-helix\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"silver-helix\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"silver-helix\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"silver-helix\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"silver-helix\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"silver-helix\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10.75,\"minDifficulty\":10,\"moneyAvailable\":32555965.38117828,\"moneyMax\":90000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"86.3.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.258,\"minDifficulty\":5,\"moneyAvailable\":3446670.9856935586,\"moneyMax\":6000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"79.5.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.13,\"minDifficulty\":5,\"moneyAvailable\":4587954.270642096,\"moneyMax\":8000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"45.3.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"phantasy\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"phantasy\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"phantasy\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"phantasy\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"phantasy\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"phantasy\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"phantasy\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"phantasy\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"phantasy\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"phantasy\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"phantasy\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"phantasy\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"phantasy\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"phantasy\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"phantasy\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"phantasy\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":7.01,\"minDifficulty\":7,\"moneyAvailable\":16424099.56681685,\"moneyMax\":48000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-523563-MegaCorp.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[3,9],[6,7],[3,4],[3,8],[0,4],[0,8],[6,9],[2,4],[2,7],[0,9],[2,8],[2,3],[1,2]]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"95.5.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"max-hardware\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"max-hardware\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"max-hardware\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"max-hardware\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"max-hardware\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"max-hardware\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"max-hardware\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"max-hardware\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"max-hardware\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"max-hardware\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"max-hardware\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"max-hardware\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"max-hardware\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"max-hardware\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"max-hardware\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"max-hardware\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.1739999999999995,\"minDifficulty\":5,\"moneyAvailable\":11578112.543442782,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"39.5.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"omega-net\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"omega-net\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"omega-net\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"omega-net\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"omega-net\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"omega-net\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"omega-net\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"omega-net\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"omega-net\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"omega-net\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"omega-net\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"omega-net\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"omega-net\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"omega-net\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"omega-net\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"omega-net\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":34,\"hackDifficulty\":11.744500000000004,\"minDifficulty\":11,\"moneyAvailable\":10693494.340892442,\"moneyMax\":122163750,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":188,\"serverGrowth\":31,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"97.4.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"crush-fitness\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"crush-fitness\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"crush-fitness\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"crush-fitness\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"crush-fitness\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"crush-fitness\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"crush-fitness\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"crush-fitness\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"crush-fitness\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"crush-fitness\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"crush-fitness\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"crush-fitness\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"crush-fitness\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"crush-fitness\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"crush-fitness\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"crush-fitness\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":38,\"hackDifficulty\":13.576,\"minDifficulty\":13,\"moneyAvailable\":17116644.031267095,\"moneyMax\":97046184,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":263,\"serverGrowth\":29,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-252251.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,1,2,2,3,1],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"39.0.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"iron-gym\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"iron-gym\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"iron-gym\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"iron-gym\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"iron-gym\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"iron-gym\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"iron-gym\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"iron-gym\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"iron-gym\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"iron-gym\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"iron-gym\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"iron-gym\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"iron-gym\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"iron-gym\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"iron-gym\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"iron-gym\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10.566,\"minDifficulty\":10,\"moneyAvailable\":15195110.051297873,\"moneyMax\":40000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-41109-Illuminati.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":321516373,\"reward\":{\"type\":0,\"name\":\"Illuminati\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-203147-CyberSec.cct\",\"type\":\"Total Ways to Sum\",\"data\":94,\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"48.5.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"millenium-fitness\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"millenium-fitness\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"millenium-fitness\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"millenium-fitness\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"millenium-fitness\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"millenium-fitness\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"millenium-fitness\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"millenium-fitness\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"millenium-fitness\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"millenium-fitness\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"millenium-fitness\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"millenium-fitness\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"millenium-fitness\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"millenium-fitness\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"millenium-fitness\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"millenium-fitness\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":46,\"hackDifficulty\":16.047000000000004,\"minDifficulty\":15,\"moneyAvailable\":64398441.16773641,\"moneyMax\":500000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":495,\"serverGrowth\":36,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"0.1.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":58,\"hackDifficulty\":19.902999999999977,\"minDifficulty\":19,\"moneyAvailable\":87479133.7292711,\"moneyMax\":1800000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1003,\"serverGrowth\":60,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-743745-MegaCorp.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0101000010010011\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"7.4.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"snap-fitness\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"snap-fitness\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"snap-fitness\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"snap-fitness\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"snap-fitness\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"snap-fitness\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"snap-fitness\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"snap-fitness\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"snap-fitness\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"snap-fitness\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"snap-fitness\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"snap-fitness\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"snap-fitness\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"snap-fitness\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"snap-fitness\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"snap-fitness\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":49,\"hackDifficulty\":17.434999999999928,\"minDifficulty\":16,\"moneyAvailable\":208973530.70322603,\"moneyMax\":900000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":778,\"serverGrowth\":47,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"50.4.0.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"run4theh111z\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"run4theh111z\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"run4theh111z\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"run4theh111z\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"run4theh111z\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"run4theh111z\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"run4theh111z\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"run4theh111z\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"run4theh111z\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"run4theh111z\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"run4theh111z\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"run4theh111z\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"run4theh111z\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"run4theh111z\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"run4theh111z\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"run4theh111z\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"nova-med\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":527,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-109085.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"3Nk5611A964XTkV654oXNC595ikvMg299sV5LzP21e8733YD369FiwPYkOPz1904456F1SS\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-669349.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"ghj2Q62Q62QrK71d33gPlDaDnV5vV5vgaAgaAxGmAgARxnGmsgxsgxsgx5lx5lx5lx55lx5l2Mpppppppp\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"7.7.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"I.I.I.I\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"I.I.I.I\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"I.I.I.I\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"I.I.I.I\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"I.I.I.I\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"I.I.I.I\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"I.I.I.I\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"I.I.I.I\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"I.I.I.I\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"I.I.I.I\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"I.I.I.I\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"I.I.I.I\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"I.I.I.I\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"I.I.I.I\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"I.I.I.I\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"I.I.I.I\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":343,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"32.0.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"avmnite-02h\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"avmnite-02h\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"avmnite-02h\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"avmnite-02h\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"avmnite-02h\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"avmnite-02h\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"avmnite-02h\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"avmnite-02h\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"avmnite-02h\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"avmnite-02h\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"avmnite-02h\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"avmnite-02h\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"avmnite-02h\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"avmnite-02h\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"avmnite-02h\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"avmnite-02h\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":218,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"10.6.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\".\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\".\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\".\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\".\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\".\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\".\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\".\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\".\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\".\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\".\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\".\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\".\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\".\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\".\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\".\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\".\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":534,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-144588.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,0,6,1],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-85708.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"333333333333358N358N358N3gMKoiRBniRBniRBnrBnrBnrBn1FNsVwVwpqscCjrjgpDm7m7mwwBjjjjjjK\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"69.7.2.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"CSEC\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"CSEC\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"CSEC\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"CSEC\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"CSEC\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"CSEC\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"CSEC\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"CSEC\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"CSEC\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"CSEC\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"CSEC\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"CSEC\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"CSEC\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"CSEC\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"CSEC\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"CSEC\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":60,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-3134.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[93,64,75,156,81,84,179,10,155,149,59,181,197,151,11,146,169,49,140,27,167,71,163,30],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-212358-Netburners.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[14,[[4,9],[9,10],[3,10],[5,6],[1,11],[2,12],[1,6],[3,8],[4,6],[11,12],[1,13],[1,3],[1,9],[7,10],[5,9],[3,5],[1,2],[8,13],[9,12],[2,8],[4,7],[4,11],[6,8]]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"85.4.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"The-Cave\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"The-Cave\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"The-Cave\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"The-Cave\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"The-Cave\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"The-Cave\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"The-Cave\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"The-Cave\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"The-Cave\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"The-Cave\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"The-Cave\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"The-Cave\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"The-Cave\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"The-Cave\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"The-Cave\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"The-Cave\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"The-Cave\"}}]]},\"serversOnNetwork\":[\"blade\",\"w0r1d_d43m0n\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":true,\"ip\":\"65.4.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"w0r1d_d43m0n\"}}]]},\"serversOnNetwork\":[\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":15000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-374324-TheBlackHand.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MOUSE TABLE POPUP DEBUG SHIFT\",6],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"48.6.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"darkweb\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"darkweb\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"darkweb\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"darkweb\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"darkweb\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"darkweb\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"darkweb\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"darkweb\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"darkweb\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"darkweb\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"darkweb\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"darkweb\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"darkweb\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"darkweb\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"darkweb\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"darkweb\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"darkweb\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-0\",\"httpPortOpen\":false,\"ip\":\"65.2.3.9\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-0\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-0\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-0\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-0\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-0\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-0\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-0\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-0\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-0\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-0\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-0\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-0\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-0\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-0\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-0\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-0\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-1\",\"httpPortOpen\":false,\"ip\":\"99.2.9.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-1\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-1\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-1\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-1\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-1\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-1\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-1\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-1\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-1\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-1\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-1\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-1\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-1\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-1\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-1\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-1\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":122257.44499999999,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":319.4099999999904,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"fulcrumassets\\\"]\",\"title\":\"lib/specialized-weaken.js fulcrumassets\",\"threads\":1341,\"temporary\":false}}]}},\"node-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-2\",\"httpPortOpen\":false,\"ip\":\"68.4.9.3\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-2\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-2\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-2\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-2\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-2\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-2\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-2\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-2\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-2\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-2\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-2\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-2\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-2\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-2\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-2\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-2\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-3\",\"httpPortOpen\":false,\"ip\":\"36.5.2.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-3\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-3\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-3\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-3\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-3\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-3\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-3\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-3\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-3\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-3\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-3\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-3\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-3\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-3\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-3\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-3\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-4\",\"httpPortOpen\":false,\"ip\":\"78.4.2.4\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-4\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-4\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-4\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-4\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-4\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-4\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-4\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-4\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-4\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-4\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-4\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-4\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-4\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-4\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-4\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-4\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-5\",\"httpPortOpen\":false,\"ip\":\"10.2.5.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-5\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-5\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-5\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-5\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-5\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-5\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-5\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-5\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-5\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-5\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-5\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-5\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-5\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-5\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-5\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-5\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-6\",\"httpPortOpen\":false,\"ip\":\"47.7.7.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-6\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-6\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-6\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-6\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-6\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-6\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-6\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-6\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-6\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-6\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-6\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-6\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-6\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-6\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-6\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-6\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-7\",\"httpPortOpen\":false,\"ip\":\"30.2.8.9\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-7\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-7\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-7\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-7\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-7\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-7\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-7\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-7\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-7\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-7\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-7\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-7\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-7\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-7\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-7\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-7\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-8\",\"httpPortOpen\":false,\"ip\":\"51.9.0.8\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-8\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-8\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-8\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-8\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-8\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-8\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-8\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-8\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-8\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-8\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-8\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-8\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-8\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-8\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-8\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-8\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-9\",\"httpPortOpen\":false,\"ip\":\"46.2.9.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-9\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-9\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-9\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-9\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-9\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-9\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-9\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-9\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-9\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-9\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-9\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-9\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-9\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-9\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-9\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-9\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-10\",\"httpPortOpen\":false,\"ip\":\"38.7.9.5\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-10\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-10\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-10\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-10\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-10\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-10\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-10\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-10\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-10\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-10\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-10\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-10\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-10\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-10\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-10\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-10\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-11\",\"httpPortOpen\":false,\"ip\":\"32.5.9.8\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-11\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-11\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-11\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-11\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-11\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-11\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-11\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-11\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-11\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-11\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-11\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-11\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-11\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-11\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-11\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-11\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-12\",\"httpPortOpen\":false,\"ip\":\"47.3.5.5\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-12\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-12\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-12\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-12\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-12\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-12\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-12\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-12\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-12\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-12\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-12\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-12\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-12\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-12\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-12\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-12\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-13\",\"httpPortOpen\":false,\"ip\":\"92.8.2.3\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-13\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-13\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-13\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-13\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-13\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-13\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-13\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-13\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-13\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-13\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-13\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-13\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-13\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-13\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-13\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-13\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-14\",\"httpPortOpen\":false,\"ip\":\"39.4.7.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-14\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-14\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-14\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-14\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-14\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-14\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-14\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-14\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-14\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-14\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-14\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-14\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-14\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-14\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-14\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-14\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-15\",\"httpPortOpen\":false,\"ip\":\"17.7.2.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-15\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-15\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-15\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-15\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-15\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-15\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-15\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-15\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-15\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-15\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-15\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-15\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-15\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-15\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-15\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-15\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-16\",\"httpPortOpen\":false,\"ip\":\"54.1.9.9\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-16\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-16\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-16\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-16\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-16\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-16\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-16\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-16\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-16\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-16\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-16\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-16\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-16\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-16\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-16\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-16\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-17\",\"httpPortOpen\":false,\"ip\":\"31.1.3.1\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-17\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-17\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-17\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-17\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-17\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-17\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-17\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-17\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-17\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-17\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-17\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-17\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-17\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-17\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-17\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-17\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-18\",\"httpPortOpen\":false,\"ip\":\"65.8.8.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-18\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-18\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-18\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-18\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-18\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-18\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-18\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-18\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-18\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-18\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-18\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-18\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-18\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-18\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-18\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-18\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-19\",\"httpPortOpen\":false,\"ip\":\"29.0.2.0\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-19\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-19\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-19\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-19\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-19\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-19\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-19\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-19\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-19\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-19\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-19\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-19\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-19\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-19\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-19\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-19\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-20\",\"httpPortOpen\":false,\"ip\":\"30.2.6.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-20\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-20\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-20\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-20\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-20\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-20\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-20\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-20\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-20\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-20\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-20\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-20\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-20\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-20\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-20\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-20\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-21\",\"httpPortOpen\":false,\"ip\":\"70.9.8.8\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-21\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-21\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-21\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-21\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-21\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-21\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-21\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-21\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-21\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-21\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-21\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-21\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-21\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-21\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-21\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-21\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-22\",\"httpPortOpen\":false,\"ip\":\"71.6.3.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-22\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-22\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-22\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-22\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-22\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-22\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-22\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-22\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-22\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-22\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-22\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-22\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-22\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-22\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-22\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-22\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-23\",\"httpPortOpen\":false,\"ip\":\"6.5.3.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-23\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-23\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-23\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-23\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-23\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-23\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-23\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-23\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-23\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-23\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-23\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-23\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-23\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-23\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-23\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-23\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-24\",\"httpPortOpen\":false,\"ip\":\"29.2.8.3\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-24\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-24\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-24\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-24\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-24\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-24\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-24\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-24\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-24\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-24\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-24\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-24\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-24\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-24\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-24\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-24\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-24\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":4692287.799248717}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":13705861.937237382}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":79.5301,\"isBanned\":false,\"isMember\":true,\"playerReputation\":208}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":36431.09000811974}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":208}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":94.5811,\"isBanned\":false,\"isMember\":true,\"playerReputation\":51102.65207006625}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":97.2691,\"isBanned\":false,\"isMember\":true,\"playerReputation\":64657.54556401799}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":77.861,\"isBanned\":false,\"isMember\":true,\"playerReputation\":208}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":96.8913,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":26.4226,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":3,\"isBanned\":false,\"isMember\":true,\"playerReputation\":208}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":208}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":387.8018,\"isBanned\":false,\"isMember\":true,\"playerReputation\":8528905.88040967}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":39.4719,\"isBanned\":false,\"isMember\":true,\"playerReputation\":208}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":35.212,\"isBanned\":false,\"isMember\":true,\"playerReputation\":208}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":2,\"isBanned\":false,\"isMember\":true,\"playerReputation\":11711.133960047002}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":40,\"MaxPortCapacity\":60,\"MaxTerminalCapacity\":250,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":1,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"{\"Slum Snakes\":{\"power\":19028.907867059097,\"territory\":0.18129421877102578},\"Tetrads\":{\"power\":2444.611719590258,\"territory\":0},\"The Syndicate\":{\"power\":2479.7449767851,\"territory\":0},\"The Dark Army\":{\"power\":2464.174659069373,\"territory\":0},\"Speakers for the Dead\":{\"power\":1307.4171596220906,\"territory\":0},\"NiteSec\":{\"power\":2585.180779542002,\"territory\":0},\"The Black Hand\":{\"power\":539.9898440723371,\"territory\":0.8187057812289742}}","LastExportBonus":"1701416321389","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}