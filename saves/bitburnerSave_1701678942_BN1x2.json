{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":33,\"max\":43},\"skills\":{\"hacking\":1353,\"strength\":350,\"defense\":335,\"dexterity\":420,\"agility\":281,\"charisma\":211,\"intelligence\":0},\"exp\":{\"hacking\":743367638.7887319,\"strength\":51490.10971839048,\"defense\":51490.10971839048,\"dexterity\":61795.279999929146,\"agility\":53141.656121650325,\"charisma\":6315.4600427734285,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.9550432300859681,\"hacking_speed\":1.945279165787702,\"hacking_money\":3.266798343648043,\"hacking_grow\":1.9564009723607874,\"hacking\":2.98390134397478,\"hacking_exp\":3.939399454621739,\"strength\":2.37585334083494,\"strength_exp\":1.9798777840291166,\"defense\":2.272555369494291,\"defense_exp\":1.9798777840291166,\"dexterity\":2.744110608664356,\"dexterity_exp\":2.2768594516334844,\"agility\":1.8981002233844364,\"agility_exp\":1.9798777840291166,\"charisma\":2.56178968924811,\"charisma_exp\":1.9798777840291166,\"hacknet_node_money\":3.947381331908052,\"hacknet_node_purchase_cost\":0.48877968129206867,\"hacknet_node_ram_cost\":0.6389276879634884,\"hacknet_node_core_cost\":0.6389276879634884,\"hacknet_node_level_cost\":0.5430885347689652,\"company_rep\":2.6134386749184344,\"faction_rep\":1.9798777840291166,\"work_money\":1.721632855677493,\"crime_success\":1.9407497645819012,\"crime_money\":3.3356636578751426,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"SmartSonar Implant\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"HemoRecirculator\"}],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"Volhaven\",\"The Syndicate\",\"Tetrads\",\"Slum Snakes\",\"Netburners\",\"Tian Di Hui\",\"CyberSec\",\"Shadows of Anarchy\"],\"factionInvitations\":[],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[]},\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79954.79999999756,\"ram\":64,\"totalMoneyGenerated\":2880461302.4425015,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79953.79999999756,\"ram\":64,\"totalMoneyGenerated\":2880397389.8137245,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79942.59999999756,\"ram\":64,\"totalMoneyGenerated\":2880324322.2936063,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79936.59999999756,\"ram\":64,\"totalMoneyGenerated\":2880281707.82687,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79935.59999999756,\"ram\":64,\"totalMoneyGenerated\":2880230860.415937,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79926.59999999756,\"ram\":64,\"totalMoneyGenerated\":2880167579.209187,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79874.19999999755,\"ram\":64,\"totalMoneyGenerated\":2880096758.1255174,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79867.19999999755,\"ram\":64,\"totalMoneyGenerated\":2880039085.209297,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79866.19999999755,\"ram\":64,\"totalMoneyGenerated\":2879962813.691094,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79851.19999999755,\"ram\":64,\"totalMoneyGenerated\":2879896710.7374187,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79826.99999999754,\"ram\":64,\"totalMoneyGenerated\":2879833860.758756,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79821.99999999754,\"ram\":64,\"totalMoneyGenerated\":2879795094.7855363,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79801.59999999753,\"ram\":64,\"totalMoneyGenerated\":2879732027.108969,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79788.39999999753,\"ram\":64,\"totalMoneyGenerated\":2879685269.968471,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79784.39999999753,\"ram\":64,\"totalMoneyGenerated\":2879659271.273145,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79755.99999999751,\"ram\":64,\"totalMoneyGenerated\":2879570295.265291,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79720.59999999752,\"ram\":64,\"totalMoneyGenerated\":2879322593.6443973,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79646.59999999758,\"ram\":64,\"totalMoneyGenerated\":2878306784.223629,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79547.59999999766,\"ram\":64,\"totalMoneyGenerated\":2875955187.4887986,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79409.19999999779,\"ram\":64,\"totalMoneyGenerated\":2871635584.703859,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":79282.5999999979,\"ram\":64,\"totalMoneyGenerated\":2866414129.850056,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":78883.59999999827,\"ram\":64,\"totalMoneyGenerated\":2852942795.4345164,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":77626.39999999957,\"ram\":64,\"totalMoneyGenerated\":2806975270.450793,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":77625.99999999958,\"ram\":64,\"totalMoneyGenerated\":2806975268.0847297,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":77624.99999999958,\"ram\":64,\"totalMoneyGenerated\":2806975262.169573,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":74268.19999999779,\"ram\":64,\"totalMoneyGenerated\":2686019985.3947225,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":67857.59999999999,\"ram\":64,\"totalMoneyGenerated\":2454171095.582176,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":67847.59999999999,\"ram\":64,\"totalMoneyGenerated\":2453809430.6993065,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":67390,\"ram\":64,\"totalMoneyGenerated\":2436066346.7458916,\"name\":\"hacknet-node-28\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":67389.4,\"ram\":64,\"totalMoneyGenerated\":2436066343.1967974,\"name\":\"hacknet-node-29\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36166.488286974185,\"onlineTimeSeconds\":67388.8,\"ram\":64,\"totalMoneyGenerated\":2436066339.647703,\"name\":\"hacknet-node-30\"}}],\"has4SData\":true,\"has4SDataTixApi\":true,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{},\"karma\":-946.2549999999918,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":3251135972367.8013,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":4537500000,\"corporation\":0,\"crime\":177280026.57238555,\"gang\":0,\"hacking\":5804819361216.558,\"hacknet\":86627836766.1042,\"hacknet_expenses\":-118286506966.73679,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-31200000000,\"total\":3251134972367.8013,\"work\":0,\"servers\":-2489446172979.9185,\"other\":-5314875696.119629,\"augmentations\":-779450000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-2000,\"class\":-1512256,\"codingcontract\":15225000000,\"corporation\":0,\"crime\":653989089.3181783,\"gang\":0,\"hacking\":6419138487187.169,\"hacknet\":122847106734.18483,\"hacknet_expenses\":-129988387247.48883,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-31200000000,\"total\":3300411851645.3936,\"work\":0,\"servers\":-2777567315525.607,\"other\":-6310875696.119629,\"augmentations\":-312384638639.6762}},\"playtimeSinceLastAug\":79990000,\"playtimeSinceLastBitnode\":262172400,\"lastAugReset\":1701598950803,\"lastNodeReset\":1701416764742,\"purchasedServers\":[\"node-0\",\"node-1\",\"node-2\",\"node-3\",\"node-4\",\"node-5\",\"node-6\",\"node-7\",\"node-8\",\"node-9\",\"node-10\",\"node-11\",\"node-12\",\"node-13\",\"node-14\",\"node-15\",\"node-16\",\"node-17\",\"node-18\",\"node-19\",\"node-20\",\"node-21\",\"node-22\",\"node-23\",\"node-24\"],\"scriptProdSinceLastAug\":5937708685919.03,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,1],[2,1]]},\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1700338719175},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1700339619175},{\"ID\":\"WORKOUT\",\"unlockedOn\":1700342079172},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1700345744715},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1700346077358},{\"ID\":\"TOR\",\"unlockedOn\":1700347817357},{\"ID\":\"TRAVEL\",\"unlockedOn\":1700348057357},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1700379458941},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1700384318934},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1700409222036},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1700415118310},{\"ID\":\"FROZE\",\"unlockedOn\":1700415885902},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1700419154037},{\"ID\":\"NITESEC\",\"unlockedOn\":1700424074038},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1700426054031},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1700429256501},{\"ID\":\"4S\",\"unlockedOn\":1700500248691},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1700500968683},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1700599162805},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1700655655173},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1700664198439},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1700689338435},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1700775178880},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1700847111216},{\"ID\":\"DONATION\",\"unlockedOn\":1700848851164},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1700869971216},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1700985627342},{\"ID\":\"SF1.1\",\"unlockedOn\":1701071007305},{\"ID\":\"GANG\",\"unlockedOn\":1701122018887},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1701206940124},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1701245393333},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1701270534441},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1701270834453},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1701275155165},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1701286692126},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1701286812133},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1701416524115},{\"ID\":\"SF2.1\",\"unlockedOn\":1701416824109},{\"ID\":\"N00DLES\",\"unlockedOn\":1701611424172}],\"terminalCommandHistory\":[\"buy -l\",\"buy FTPCrack.exe \",\"buy relaySMTP.exe \",\"buy HTTPWorm.exe \",\"buy SQLInject.exe \",\"run to-pwn.js \",\"  home;connect harakiri-sushi;connect max-hardware;connect phantasy;connect computek;connect rothman-uni;connect alpha-ent;connect aerocorp;connect unitalife;connect univ-energy;connect taiyang-digital;connect microdyne;connect vitalife;connect .;backdoor; \",\"  home;connect foodnstuff;connect nectar-net;connect neo-net;connect netlink;connect zb-institute;connect rho-construction;connect snap-fitness;connect deltaone;connect zeus-med;connect zb-def;connect run4theh111z;backdoor; \",\"  home;connect iron-gym;connect CSEC;connect silver-helix;connect johnson-ortho;connect I.I.I.I;backdoor; \",\"  home;connect iron-gym;connect CSEC;connect silver-helix;connect avmnite-02h;backdoor; \",\"  home;connect iron-gym;connect CSEC;backdoor; \",\"home\",\"run find-contracts.js \",\"run to-pwn.js \",\"kill bot-servers.js -b 1; kill bot-hacknet.js -b 1\",\"buy -l\",\"buy SQLInject.exe \",\"run to-pwn.js \",\"  home;connect harakiri-sushi;connect max-hardware;connect phantasy;connect computek;connect rothman-uni;connect alpha-ent;connect aerocorp;connect unitalife;connect univ-energy;connect taiyang-digital;connect microdyne;connect fulcrumtech;connect kuai-gong;connect blade;connect The-Cave;backdoor; \",\"run bot-servers.js -b 1; run bot-hacknet.js -b 1\",\"hom\",\"home\",\"run bot-servers.js -b 1; run bot-hacknet.js -b 1\",\"run to-pwn.js \",\"kill bot-servers.js -b 1; kill bot-hacknet.js -b 1\",\"run upgrade-hacknet.js -b 1\",\"run upgrade-servers.js -b 1\",\"run to-pwn.js \",\"  home;connect sigma-cosmetics;connect zer0;backdoor; \",\"home\",\"run to-pwn.js \",\"run find-contracts.js \",\"run upgrade-servers.js -b 1\",\"run upgrade-hacknet.js -b 1\",\"run find-contracts.js \",\"run upgrade-servers.js -b 1\",\"run upgrade-hacknet.js -b 1\",\"buy -l\",\"buy -a\",\"run to-pwn.js \",\"  home;connect harakiri-sushi;connect max-hardware;connect phantasy;connect computek;connect rothman-uni;connect alpha-ent;connect aerocorp;connect unitalife;connect univ-energy;connect taiyang-digital;connect microdyne;connect vitalife;connect .;connect b-and-a;backdoor; \",\"hom\",\"home\",\"run restart-script.js bot-hacking.js \",\"run to-pwn.js \",\"ls\",\"run fl1ght.exe \",\"run upgrade-servers.js -b 1; run upgrade-hacknet.js -b 1\",\"run restart-script.js bot-hacking.js \",\"run find-contracts.js \"],\"lastUpdate\":1701678941993,\"lastSave\":1701678885583,\"totalPlaytime\":1340943600,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":205413,\"factionWorkType\":\"hacking\",\"factionName\":\"The Syndicate\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"183c0fbbe8b548\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":4,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"51.2.7.6\",\"isConnectedTo\":true,\"maxRam\":65536,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"foodnstuff.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nconst hostname = 'foodnstuff';\\nexport async function main(ns) {\\n  while (true) {\\n    for (let i = 0; i < 5; i++)\\n      await ns.hack(hostname);\\n\\n    await ns.grow(hostname);\\n    for (let i = 0; i < 3; i++)\\n      await ns.weaken(hostname);\\n  }\\n}\",\"filename\":\"foodnstuff.js\",\"server\":\"home\"}}],[\"deploy_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help || args._.length < 1) {\\n\\t\\tns.tprint(\\\"This script deploys hack.js on a server with maximum threads possible.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} HOST`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n  const host = args._[0];\\n  ns.run(\\\"deploy.js\\\", {}, host, \\\"hack.js\\\", host);\\n}\",\"filename\":\"deploy_hack.js\",\"server\":\"home\"}}],[\"template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await template(ns, args, flags);\\r\\n}\\r\\nexport async function template(ns, { host }, { d: depth }) {\\r\\n    console.log(\\\"template\\\");\\r\\n}\\r\\n\",\"filename\":\"template.js\",\"server\":\"home\"}}],[\"weakenall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nconst file = \\\"lib/weaken.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const { d: depth } = flags;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        await deploy(ns, { ...args, host, script: file }, { ...flags });\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"weakenall.js\",\"server\":\"home\"}}],[\"to-pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await toPwn(ns, flags);\\r\\n}\\r\\nexport async function toPwn(ns, { d: depth }) {\\r\\n    const serversToPwn = [];\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host == \\\"home\\\") {\\r\\n            return;\\r\\n        }\\r\\n        const server = ns.getServer(host);\\r\\n        if (!server.requiredHackingSkill) {\\r\\n            return;\\r\\n        }\\r\\n        if (ns.getHackingLevel() < server.requiredHackingSkill) {\\r\\n            return;\\r\\n        }\\r\\n        if (!server.backdoorInstalled && server.hasAdminRights) {\\r\\n            serversToPwn.push({ server, nodes: acc.nodes });\\r\\n        }\\r\\n    }, { excludes: ns.getPurchasedServers() });\\r\\n    serversToPwn\\r\\n        .sort(({ server: serverA }, { server: serverB }) => {\\r\\n        return ((serverB.requiredHackingSkill || 0) -\\r\\n            (serverA.requiredHackingSkill || 0));\\r\\n    })\\r\\n        .forEach((server) => {\\r\\n        ns.tprintf(generateConnect(server.nodes, server.server.hostname));\\r\\n    });\\r\\n}\\r\\nexport function generateConnect(nodes, host) {\\r\\n    return (\\\" home;\\\" +\\r\\n        nodes\\r\\n            .slice(1)\\r\\n            .concat([host])\\r\\n            .map((node) => `connect ${node};`)\\r\\n            .join(\\\"\\\") +\\r\\n        \\\"backdoor; \\\");\\r\\n}\\r\\n\",\"filename\":\"to-pwn.js\",\"server\":\"home\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"home\"}}],[\"trade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await trade(ns, args, flags);\\r\\n}\\r\\nexport async function trade(ns, {}, {}) {\\r\\n    const stock = ns.stock;\\r\\n    const fee = stock.getConstants().StockMarketCommission;\\r\\n    for (;;) {\\r\\n        //TODO\\r\\n        ns.sleep(stock.getConstants().msPerStockUpdate);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"trade.js\",\"server\":\"home\"}}],[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"home\"}}],[\"bot.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { buy } from \\\"/buy\\\";\\r\\nimport { deployall } from \\\"/deployall\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { hasFormulas, validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { ps } from \\\"/ps\\\";\\r\\nimport { upgradeServers } from \\\"./upgrade-servers\\\";\\r\\nimport { maxServers } from \\\"/lib/maxServers\\\";\\r\\nimport { pwn } from \\\"/pwn\\\";\\r\\nimport { killall } from \\\"/killall\\\";\\r\\nimport { ThreadCounts } from \\\"/lib/misc\\\";\\r\\nimport { upgradeHacknet } from \\\"/upgrade-hacknet\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //use home in worker pool\\r\\n    w: false,\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n    //prompt\\r\\n    p: false,\\r\\n    //upgrade nodes\\r\\n    u: false,\\r\\n    //upgrade hacknet nodes\\r\\n    uh: false,\\r\\n    //manage gang\\r\\n    g: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await bot(ns, flags);\\r\\n}\\r\\nconst library = {\\r\\n    specializedHack: \\\"lib/specialized-hack.js\\\",\\r\\n    specializedGrow: \\\"lib/specialized-grow.js\\\",\\r\\n    specializedWeaken: \\\"lib/specialized-weaken.js\\\",\\r\\n};\\r\\nexport async function bot(ns, { w, u, uh, g, ...flags }) {\\r\\n    for (;;) {\\r\\n        /**\\r\\n         * Early game getting the 25 servers\\r\\n         */\\r\\n        await buy(ns, { pool: maxServers, \\\"min-ram\\\": 2, ram: 2 });\\r\\n        /**\\r\\n         * Upgrade\\r\\n         */\\r\\n        if (u)\\r\\n            await upgradeServers(ns, { ...flags });\\r\\n        if (uh)\\r\\n            await upgradeHacknet(ns, { ...flags });\\r\\n        // if (g) await manageGang(ns, { ...flags });\\r\\n        await pwn(ns, { d: defaultDepth, p: false, dl: false });\\r\\n        await walkAllHackableServer(ns, async (data) => {\\r\\n            if (!data.weaken.inProgress && data.weaken.shouldPerform(data)) {\\r\\n                const weakenThreadsCounts = weakenThreads(ns, data);\\r\\n                return await deployall(ns, { script: library.specializedWeaken, target: data.server.hostname }, {\\r\\n                    d: defaultDepth,\\r\\n                    w,\\r\\n                    x: weakenThreadsCounts.threads,\\r\\n                    xh: weakenThreadsCounts.homeThreads,\\r\\n                });\\r\\n            }\\r\\n            return true;\\r\\n        }, async (data) => {\\r\\n            if (!data.grow.inProgress && data.grow.shouldPerform(data)) {\\r\\n                const growThreadsCounts = growThreads(ns, data);\\r\\n                return await deployall(ns, { script: library.specializedGrow, target: data.server.hostname }, {\\r\\n                    d: defaultDepth,\\r\\n                    w,\\r\\n                    x: growThreadsCounts.threads,\\r\\n                    xh: growThreadsCounts.homeThreads,\\r\\n                });\\r\\n            }\\r\\n            return true;\\r\\n        }, async (data) => {\\r\\n            if (!data.hack.inProgress && data.hack.shouldPerform(data)) {\\r\\n                const hackThreadsCounts = hackThreads(ns, data);\\r\\n                //For some reason, it return -1 in some case, I need to understand those\\r\\n                if (hackThreadsCounts.threads >= 0) {\\r\\n                    // await ns.sleep(1);\\r\\n                    return await deployall(ns, { script: library.specializedHack, target: data.server.hostname }, {\\r\\n                        d: defaultDepth,\\r\\n                        w,\\r\\n                        x: hackThreadsCounts.threads,\\r\\n                        xh: hackThreadsCounts.homeThreads,\\r\\n                    });\\r\\n                }\\r\\n                else {\\r\\n                    //Print all kill all workers\\r\\n                    ns.tprint(ns.sprintf(\\\"Could not hackAnalyse %s: %s %s\\\", data.server.hostname, hackThreads, JSON.stringify(data.server)));\\r\\n                    killall(ns, { d: defaultDepth });\\r\\n                    ns.exit();\\r\\n                }\\r\\n            }\\r\\n            return true;\\r\\n        });\\r\\n        if (flags.p && !(await ns.prompt(\\\"Continue?\\\", { type: \\\"boolean\\\" }))) {\\r\\n            ns.exit();\\r\\n        }\\r\\n        await ns.sleep(1e3);\\r\\n    }\\r\\n}\\r\\nasync function walkAllHackableServer(ns, ...callbacks) {\\r\\n    const servers = await allHackableServersSorted(ns, \\\"money-desc\\\");\\r\\n    let shouldContinue = true;\\r\\n    while (servers.length) {\\r\\n        const server = servers.pop();\\r\\n        if (!server)\\r\\n            break;\\r\\n        if (!shouldContinue)\\r\\n            break;\\r\\n        const { hostname } = server;\\r\\n        const processes = (await ps(ns, { d: defaultDepth, p: false })).filter((process) => process.args?.[0] === hostname);\\r\\n        for (const callback of callbacks) {\\r\\n            shouldContinue = await callback({\\r\\n                server,\\r\\n                processes,\\r\\n                weaken: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedWeaken),\\r\\n                    serverMinSecurity: ns.getServerMinSecurityLevel(hostname),\\r\\n                    serverSecurity: ns.getServerSecurityLevel(hostname),\\r\\n                    shouldPerform: (data) => data.weaken.serverSecurity > data.weaken.serverMinSecurity,\\r\\n                },\\r\\n                grow: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedGrow),\\r\\n                    maxMoney: ns.getServerMaxMoney(hostname),\\r\\n                    money: ns.getServerMoneyAvailable(hostname),\\r\\n                    shouldPerform: (data) => data.grow.money < data.grow.maxMoney,\\r\\n                },\\r\\n                hack: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedHack),\\r\\n                    hackChance: ns.hackAnalyzeChance(hostname),\\r\\n                    shouldPerform: (data) => !!data.grow.money && data.hack.hackChance > 0,\\r\\n                },\\r\\n            });\\r\\n            if (!shouldContinue)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\nasync function allHackableServersSorted(ns, order) {\\r\\n    const hosts = [];\\r\\n    await walkDeepFirst(ns, defaultDepth, async (host) => {\\r\\n        hosts.push(host);\\r\\n    });\\r\\n    return hosts\\r\\n        .map(ns.getServer)\\r\\n        .filter((server) => server.hasAdminRights)\\r\\n        .filter((server) => (server.requiredHackingSkill || 0) <= ns.getHackingLevel())\\r\\n        .filter((server) => !!server.moneyMax)\\r\\n        .sort(({ moneyMax: moneyMaxA }, { moneyMax: moneyMaxB }) => order === \\\"money-asc\\\"\\r\\n        ? (moneyMaxB || 0) - (moneyMaxA || 0)\\r\\n        : (moneyMaxA || 0) - (moneyMaxB || 0));\\r\\n}\\r\\nfunction hackThreads(ns, data) {\\r\\n    return new ThreadCounts(Math.ceil(ns.hackAnalyzeThreads(data.server.hostname, data.grow.money * 0.2)), Math.ceil(ns.hackAnalyzeThreads(data.server.hostname, data.grow.money * 0.2)));\\r\\n}\\r\\nfunction weakenThreads(ns, data) {\\r\\n    return new ThreadCounts(getOptimalThreadsToWeaken(ns, data, getHomeCpuCores(ns)), getOptimalThreadsToWeaken(ns, data));\\r\\n}\\r\\nfunction getOptimalThreadsToWeaken(ns, data, cpuCores) {\\r\\n    const { serverSecurity, serverMinSecurity } = data.weaken;\\r\\n    const target = serverSecurity - serverMinSecurity;\\r\\n    let lowerBound = 0, upperBound = 100e3;\\r\\n    let threadCount = 0;\\r\\n    while (lowerBound !== upperBound) {\\r\\n        threadCount = Math.floor((upperBound - lowerBound) / 2 + lowerBound);\\r\\n        const actual = ns.weakenAnalyze(threadCount, cpuCores);\\r\\n        if (actual >= target && actual <= target + 1) {\\r\\n            break;\\r\\n        }\\r\\n        if (actual > target) {\\r\\n            upperBound = threadCount;\\r\\n            continue;\\r\\n        }\\r\\n        if (actual < target) {\\r\\n            lowerBound = threadCount;\\r\\n            continue;\\r\\n        }\\r\\n    }\\r\\n    return threadCount;\\r\\n}\\r\\nfunction growThreads(ns, data) {\\r\\n    const formulasEnabled = hasFormulas(ns);\\r\\n    const cpuCores = getHomeCpuCores(ns);\\r\\n    if (formulasEnabled) {\\r\\n        return new ThreadCounts(ns.formulas.hacking.growThreads(data.server, ns.getPlayer(), data.grow.maxMoney, cpuCores), ns.formulas.hacking.growThreads(data.server, ns.getPlayer(), data.grow.maxMoney));\\r\\n    }\\r\\n    return new ThreadCounts(data.grow.money\\r\\n        ? Math.ceil(ns.growthAnalyze(data.server.hostname, data.grow.maxMoney / data.grow.money, cpuCores))\\r\\n        : 100, data.grow.money\\r\\n        ? Math.ceil(ns.growthAnalyze(data.server.hostname, data.grow.maxMoney / data.grow.money))\\r\\n        : 100);\\r\\n}\\r\\nfunction getHomeCpuCores(ns) {\\r\\n    return ns.getServer(\\\"home\\\").cpuCores;\\r\\n}\\r\\n\",\"filename\":\"bot.js\",\"server\":\"home\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"home\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"home\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"home\"}}],[\"test-contract.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { solve } from \\\"/contracts/solve\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    await template(ns);\\r\\n}\\r\\nconst contractType = \\\"Algorithmic Stock Trader IV\\\";\\r\\nexport async function template(ns) {\\r\\n    if (!ns\\r\\n        .ls(\\\"home\\\")\\r\\n        .filter((file) => file.endsWith(\\\".cct\\\"))\\r\\n        .map((script) => ns.codingcontract.getContractType(script))\\r\\n        .find((type) => type === contractType))\\r\\n        ns.codingcontract.createDummyContract(contractType);\\r\\n    ns.ls(\\\"home\\\")\\r\\n        .filter((file) => file.endsWith(\\\".cct\\\"))\\r\\n        .forEach((contract) => {\\r\\n        solve(ns, { host: \\\"home\\\", script: contract });\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"test-contract.js\",\"server\":\"home\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"home\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"home\"}}],[\"buy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { maxServers } from \\\"/lib/maxServers\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    pool: maxServers,\\r\\n    \\\"min-ram\\\": 8,\\r\\n    ram: 128,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await buy(ns, flags);\\r\\n}\\r\\nexport async function buy(ns, { pool, \\\"min-ram\\\": minRam, ram: initialRam }) {\\r\\n    const purchase = (ram = initialRam, index = ns.getPurchasedServers().length) => {\\r\\n        if (ram < minRam) {\\r\\n            return;\\r\\n        }\\r\\n        if (ns.getPurchasedServers().length >= pool) {\\r\\n            return;\\r\\n        }\\r\\n        const newHost = ns.purchaseServer(\\\"node-\\\" + index, ram);\\r\\n        if (newHost) {\\r\\n            ns.toast(ns.sprintf(\\\"Purchased %s with %sGB \\\", newHost, ram), \\\"info\\\");\\r\\n            purchase(ram, index + 1);\\r\\n        }\\r\\n        else {\\r\\n            purchase(ram / 2, index);\\r\\n        }\\r\\n    };\\r\\n    purchase();\\r\\n}\\r\\n\",\"filename\":\"buy.js\",\"server\":\"home\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"home\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"home\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"home\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"home\"}}],[\"contracts/solve.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { lineHeader } from \\\"/lib/misc\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    script: \\\"contract-XX.cct\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await solve(ns, args);\\r\\n}\\r\\nexport async function solve(ns, { host, script }) {\\r\\n    const contractDefinition = types[ns.codingcontract.getContractType(script, host)];\\r\\n    if (contractDefinition.solvable) {\\r\\n        if (!contractDefinition.solve(ns, script, host, ns.codingcontract.getData(script, host))) {\\r\\n            const errorMessage = ns.sprintf(\\\"Failed to solve %s on %s\\\", script, host);\\r\\n            ns.toast(errorMessage, \\\"error\\\");\\r\\n            ns.tprint(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction attemp(ns, script, host, data, solution) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(\\\"%s: %s (%s)\\\", host, script, ns.codingcontract.getContractType(script, host));\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    const reward = ns.codingcontract.attempt(solution, script, host);\\r\\n    if (reward) {\\r\\n        const message = `Contract solved successfully! Reward: ${reward}`;\\r\\n        ns.toast(message, \\\"success\\\");\\r\\n        ns.tprint(message);\\r\\n        return true;\\r\\n    }\\r\\n    else {\\r\\n        const message = \\\"Failed to solve contract\\\";\\r\\n        ns.toast(message, \\\"error\\\");\\r\\n        ns.tprint(message);\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\nconst types = {\\r\\n    \\\"Find Largest Prime Factor\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, primeFactor(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Subarray with Maximum Sum\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, findMaxSubArraySum(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Total Ways to Sum\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, countCompose(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Total Ways to Sum II\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, countComposeRestricted(data[0], data[1]));\\r\\n        },\\r\\n    },\\r\\n    \\\"Spiralize Matrix\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Array Jumping Game\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, _data) => {\\r\\n            const data = _data;\\r\\n            const n = data.length;\\r\\n            let i = 0;\\r\\n            for (let reach = 0; i < n && i <= reach; ++i) {\\r\\n                reach = Math.max(i + data[i], reach);\\r\\n            }\\r\\n            const solution = i === n;\\r\\n            return attemp(ns, script, host, data, solution ? \\\"1\\\" : \\\"0\\\");\\r\\n        },\\r\\n    },\\r\\n    \\\"Array Jumping Game II\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, countJumps(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Merge Overlapping Intervals\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, mergeIntervals(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Generate IP Addresses\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, parseIp(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Algorithmic Stock Trader I\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, maxTxProfit(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Algorithmic Stock Trader II\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Algorithmic Stock Trader III\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            const prices = data;\\r\\n            let max = maxTxProfit(prices);\\r\\n            for (let i = 1; i < prices.length - 1; i++) {\\r\\n                max = Math.max(max, maxTxProfit(prices.slice(0, i + 1)) +\\r\\n                    maxTxProfit(prices.slice(i + 1, prices.length)));\\r\\n            }\\r\\n            return attemp(ns, script, host, data, max);\\r\\n        },\\r\\n    },\\r\\n    \\\"Algorithmic Stock Trader IV\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, _data) => {\\r\\n            const data = _data;\\r\\n            const k = data[0];\\r\\n            const prices = data[1];\\r\\n            function maxProfit(k, prices) {\\r\\n                const len = prices.length;\\r\\n                if (k > len / 2) {\\r\\n                    let res = 0;\\r\\n                    for (let i = 1; i < len; ++i) {\\r\\n                        res += Math.max(prices[i] - prices[i - 1], 0);\\r\\n                    }\\r\\n                    return res;\\r\\n                }\\r\\n                const hold = [];\\r\\n                const rele = [];\\r\\n                hold.length = k + 1;\\r\\n                rele.length = k + 1;\\r\\n                for (let i = 0; i <= k; ++i) {\\r\\n                    hold[i] = Number.MIN_SAFE_INTEGER;\\r\\n                    rele[i] = 0;\\r\\n                }\\r\\n                let cur;\\r\\n                for (let i = 0; i < len; ++i) {\\r\\n                    cur = prices[i];\\r\\n                    for (let j = k; j > 0; --j) {\\r\\n                        rele[j] = Math.max(rele[j], hold[j] + cur);\\r\\n                        hold[j] = Math.max(hold[j], rele[j - 1] - cur);\\r\\n                    }\\r\\n                }\\r\\n                return rele[k];\\r\\n            }\\r\\n            return attemp(ns, script, host, data, maxProfit(k, prices));\\r\\n        },\\r\\n    },\\r\\n    \\\"Minimum Path Sum in a Triangle\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, TriangleMinSum(data, 0, 0));\\r\\n        },\\r\\n    },\\r\\n    \\\"Unique Paths in a Grid I\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, walkDownFirst(createAndFillTwoDArray(data[0], data[1], () => 0), 0, 0));\\r\\n        },\\r\\n    },\\r\\n    \\\"Unique Paths in a Grid II\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, walkDownFirst(data, 0, 0));\\r\\n        },\\r\\n    },\\r\\n    \\\"Shortest Path in a Grid\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Sanitize Parentheses in Expression\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            let solutions = [];\\r\\n            let depth = 1;\\r\\n            do {\\r\\n                solutions = parenthesisSolutions(data, new Set(), depth++);\\r\\n            } while (!solutions.length);\\r\\n            solutions = [...new Set(solutions)];\\r\\n            return attemp(ns, script, host, data, solutions);\\r\\n        },\\r\\n    },\\r\\n    \\\"Find All Valid Math Expressions\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, _data) => {\\r\\n            const data = _data;\\r\\n            const num = data[0];\\r\\n            const target = data[1];\\r\\n            return attemp(ns, script, host, data, findMathExpressions(\\\"\\\", num, target, 0, 0, 0));\\r\\n        },\\r\\n    },\\r\\n    \\\"HammingCodes: Integer to Encoded Binary\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, HammingEncode(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"HammingCodes: Encoded Binary to Integer\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, HammingDecode(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Proper 2-Coloring of a Graph\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, \\r\\n            // tryColorGraph(toMapOfVertice((data as any)[1] as number[][]), [])\\r\\n            tryColorGraphV2(data[0], toMapOfVertice(data[1])));\\r\\n        },\\r\\n    },\\r\\n    \\\"Compression I: RLE Compression\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Compression II: LZ Decompression\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, comprLZDecode(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Compression III: LZ Compression\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, comprLZEncode(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Encryption I: Caesar Cipher\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            const [text, rotation] = data;\\r\\n            return attemp(ns, script, host, data, CaesarCipher(text, rotation));\\r\\n        },\\r\\n    },\\r\\n    \\\"Encryption II: Vigenère Cipher\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            const [text, keyword] = data;\\r\\n            return attemp(ns, script, host, data, VigenereCipher(text, keyword));\\r\\n        },\\r\\n    },\\r\\n};\\r\\n// compress plaintest string\\r\\nexport function comprLZEncode(plain) {\\r\\n    // for state[i][j]:\\r\\n    //      if i is 0, we're adding a literal of length j\\r\\n    //      else, we're adding a backreference of offset i and length j\\r\\n    let cur_state = Array.from(Array(10), () => Array(10).fill(null));\\r\\n    let new_state = Array.from(Array(10), () => Array(10));\\r\\n    function set(state, i, j, str) {\\r\\n        const current = state[i][j];\\r\\n        if (current == null || str.length < current.length) {\\r\\n            state[i][j] = str;\\r\\n        }\\r\\n        else if (str.length === current.length && Math.random() < 0.5) {\\r\\n            // if two strings are the same length, pick randomly so that\\r\\n            // we generate more possible inputs to Compression II\\r\\n            state[i][j] = str;\\r\\n        }\\r\\n    }\\r\\n    // initial state is a literal of length 1\\r\\n    cur_state[0][1] = \\\"\\\";\\r\\n    for (let i = 1; i < plain.length; ++i) {\\r\\n        for (const row of new_state) {\\r\\n            row.fill(null);\\r\\n        }\\r\\n        const c = plain[i];\\r\\n        // handle literals\\r\\n        for (let length = 1; length <= 9; ++length) {\\r\\n            const string = cur_state[0][length];\\r\\n            if (string == null) {\\r\\n                continue;\\r\\n            }\\r\\n            if (length < 9) {\\r\\n                // extend current literal\\r\\n                set(new_state, 0, length + 1, string);\\r\\n            }\\r\\n            else {\\r\\n                // start new literal\\r\\n                set(new_state, 0, 1, string + \\\"9\\\" + plain.substring(i - 9, i) + \\\"0\\\");\\r\\n            }\\r\\n            for (let offset = 1; offset <= Math.min(9, i); ++offset) {\\r\\n                if (plain[i - offset] === c) {\\r\\n                    // start new backreference\\r\\n                    set(new_state, offset, 1, string + String(length) + plain.substring(i - length, i));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // handle backreferences\\r\\n        for (let offset = 1; offset <= 9; ++offset) {\\r\\n            for (let length = 1; length <= 9; ++length) {\\r\\n                const string = cur_state[offset][length];\\r\\n                if (string == null) {\\r\\n                    continue;\\r\\n                }\\r\\n                if (plain[i - offset] === c) {\\r\\n                    if (length < 9) {\\r\\n                        // extend current backreference\\r\\n                        set(new_state, offset, length + 1, string);\\r\\n                    }\\r\\n                    else {\\r\\n                        // start new backreference\\r\\n                        set(new_state, offset, 1, string + \\\"9\\\" + String(offset) + \\\"0\\\");\\r\\n                    }\\r\\n                }\\r\\n                // start new literal\\r\\n                set(new_state, 0, 1, string + String(length) + String(offset));\\r\\n                // end current backreference and start new backreference\\r\\n                for (let new_offset = 1; new_offset <= Math.min(9, i); ++new_offset) {\\r\\n                    if (plain[i - new_offset] === c) {\\r\\n                        set(new_state, new_offset, 1, string + String(length) + String(offset) + \\\"0\\\");\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        const tmp_state = new_state;\\r\\n        new_state = cur_state;\\r\\n        cur_state = tmp_state;\\r\\n    }\\r\\n    let result = null;\\r\\n    for (let len = 1; len <= 9; ++len) {\\r\\n        let string = cur_state[0][len];\\r\\n        if (string == null) {\\r\\n            continue;\\r\\n        }\\r\\n        string += String(len) + plain.substring(plain.length - len, plain.length);\\r\\n        if (result == null || string.length < result.length) {\\r\\n            result = string;\\r\\n        }\\r\\n        else if (string.length == result.length && Math.random() < 0.5) {\\r\\n            result = string;\\r\\n        }\\r\\n    }\\r\\n    for (let offset = 1; offset <= 9; ++offset) {\\r\\n        for (let len = 1; len <= 9; ++len) {\\r\\n            let string = cur_state[offset][len];\\r\\n            if (string == null) {\\r\\n                continue;\\r\\n            }\\r\\n            string += String(len) + \\\"\\\" + String(offset);\\r\\n            if (result == null || string.length < result.length) {\\r\\n                result = string;\\r\\n            }\\r\\n            else if (string.length == result.length && Math.random() < 0.5) {\\r\\n                result = string;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return result ?? \\\"\\\";\\r\\n}\\r\\n// decompress LZ-compressed string, or return null if input is invalid\\r\\nexport function comprLZDecode(compr) {\\r\\n    let plain = \\\"\\\";\\r\\n    for (let i = 0; i < compr.length;) {\\r\\n        const literal_length = compr.charCodeAt(i) - 0x30;\\r\\n        if (literal_length < 0 ||\\r\\n            literal_length > 9 ||\\r\\n            i + 1 + literal_length > compr.length) {\\r\\n            return null;\\r\\n        }\\r\\n        plain += compr.substring(i + 1, i + 1 + literal_length);\\r\\n        i += 1 + literal_length;\\r\\n        if (i >= compr.length) {\\r\\n            break;\\r\\n        }\\r\\n        const backref_length = compr.charCodeAt(i) - 0x30;\\r\\n        if (backref_length < 0 || backref_length > 9) {\\r\\n            return null;\\r\\n        }\\r\\n        else if (backref_length === 0) {\\r\\n            ++i;\\r\\n        }\\r\\n        else {\\r\\n            if (i + 1 >= compr.length) {\\r\\n                return null;\\r\\n            }\\r\\n            const backref_offset = compr.charCodeAt(i + 1) - 0x30;\\r\\n            if ((backref_length > 0 && (backref_offset < 1 || backref_offset > 9)) ||\\r\\n                backref_offset > plain.length) {\\r\\n                return null;\\r\\n            }\\r\\n            for (let j = 0; j < backref_length; ++j) {\\r\\n                plain += plain[plain.length - backref_offset];\\r\\n            }\\r\\n            i += 2;\\r\\n        }\\r\\n    }\\r\\n    return plain;\\r\\n}\\r\\nfunction findMathExpressions(path, num, target, pos, evaluated, multed) {\\r\\n    const result = [];\\r\\n    if (pos === num.length) {\\r\\n        if (target === evaluated) {\\r\\n            result.push(path);\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n    for (let i = pos; i < num.length; ++i) {\\r\\n        if (i != pos && num[pos] == \\\"0\\\") {\\r\\n            break;\\r\\n        }\\r\\n        const cur = parseInt(num.substring(pos, i + 1));\\r\\n        if (pos === 0) {\\r\\n            result.push(...findMathExpressions(path + cur, num, target, i + 1, cur, cur));\\r\\n        }\\r\\n        else {\\r\\n            result.push(...findMathExpressions(path + \\\"+\\\" + cur, num, target, i + 1, evaluated + cur, cur));\\r\\n            result.push(...findMathExpressions(path + \\\"-\\\" + cur, num, target, i + 1, evaluated - cur, -cur));\\r\\n            result.push(...findMathExpressions(path + \\\"*\\\" + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur));\\r\\n        }\\r\\n    }\\r\\n    return result;\\r\\n}\\r\\nfunction VigenereCipher(text, keyword) {\\r\\n    const cipher = [...text]\\r\\n        .map((a, i) => {\\r\\n        return a === \\\" \\\"\\r\\n            ? a\\r\\n            : String.fromCharCode(((a.charCodeAt(0) -\\r\\n                2 * 65 +\\r\\n                keyword.charCodeAt(i % keyword.length)) %\\r\\n                26) +\\r\\n                65);\\r\\n    })\\r\\n        .join(\\\"\\\");\\r\\n    return cipher;\\r\\n}\\r\\nfunction mergeIntervals(data) {\\r\\n    const intervals = [...data];\\r\\n    intervals.sort((a, b) => {\\r\\n        return a[0] - b[0];\\r\\n    });\\r\\n    const result = [];\\r\\n    let start = intervals[0][0];\\r\\n    let end = intervals[0][1];\\r\\n    for (const interval of intervals) {\\r\\n        if (interval[0] <= end) {\\r\\n            end = Math.max(end, interval[1]);\\r\\n        }\\r\\n        else {\\r\\n            result.push([start, end]);\\r\\n            start = interval[0];\\r\\n            end = interval[1];\\r\\n        }\\r\\n    }\\r\\n    result.push([start, end]);\\r\\n    return result;\\r\\n}\\r\\nfunction createAndFillTwoDArray(rows, cols, valueProvider) {\\r\\n    return Array.from({ length: rows }, () => Array.from({ length: cols }, valueProvider));\\r\\n}\\r\\nfunction countJumps(data) {\\r\\n    const n = data.length;\\r\\n    let reach = 0;\\r\\n    let jumps = 0;\\r\\n    let lastJump = -1;\\r\\n    while (reach < n - 1) {\\r\\n        let jumpedFrom = -1;\\r\\n        for (let i = reach; i > lastJump; i--) {\\r\\n            if (i + data[i] > reach) {\\r\\n                reach = i + data[i];\\r\\n                jumpedFrom = i;\\r\\n            }\\r\\n        }\\r\\n        if (jumpedFrom === -1) {\\r\\n            jumps = 0;\\r\\n            break;\\r\\n        }\\r\\n        lastJump = jumpedFrom;\\r\\n        jumps++;\\r\\n    }\\r\\n    return jumps;\\r\\n}\\r\\nfunction countComposeRestricted(integer, dataset) {\\r\\n    const composition = new Array(integer + 1).fill(0);\\r\\n    composition[0] = 1;\\r\\n    for (let i = 0; i < dataset.length; i++) {\\r\\n        for (let j = dataset[i]; j <= integer; j++) {\\r\\n            composition[j] += composition[j - dataset[i]];\\r\\n        }\\r\\n    }\\r\\n    return composition[integer];\\r\\n}\\r\\nfunction countCompose(integer) {\\r\\n    const composition = new Array(integer + 1).fill(0);\\r\\n    composition[0] = 1;\\r\\n    for (let i = 1; i < integer; i++) {\\r\\n        for (let j = i; j <= integer; j++) {\\r\\n            composition[j] = composition[j] + composition[j - i];\\r\\n        }\\r\\n    }\\r\\n    return composition[integer];\\r\\n}\\r\\nfunction isFinished(data, i, j) {\\r\\n    return data.length === i + 1 && data[i].length === j + 1;\\r\\n}\\r\\nfunction canMoveRight(data, i, j) {\\r\\n    return data[i].length > j + 1 && data[i][j + 1] !== 1;\\r\\n}\\r\\nfunction canMoveDown(data, i, j) {\\r\\n    return data.length > i + 1 && data[i + 1][j] !== 1;\\r\\n}\\r\\nfunction walkDownFirst(data, i, j) {\\r\\n    if (isFinished(data, i, j)) {\\r\\n        return 1;\\r\\n    }\\r\\n    let count = 0;\\r\\n    if (canMoveDown(data, i, j)) {\\r\\n        count += walkDownFirst(data, i + 1, j);\\r\\n    }\\r\\n    if (canMoveRight(data, i, j)) {\\r\\n        count += walkDownFirst(data, i, j + 1);\\r\\n    }\\r\\n    return count;\\r\\n}\\r\\nfunction maxTxProfit(prices) {\\r\\n    let max = 0;\\r\\n    for (let i = 0; i < prices.length - 1; i++) {\\r\\n        for (let j = i; j < prices.length; j++) {\\r\\n            max = Math.max(max, prices[j] - prices[i]);\\r\\n        }\\r\\n    }\\r\\n    return max;\\r\\n}\\r\\nfunction isValidIp(ip) {\\r\\n    const splitted = ip.split(\\\".\\\").filter((value) => !!value);\\r\\n    if (splitted.length != 4)\\r\\n        return false;\\r\\n    return !splitted.find((value) => ((Number.parseInt(value) != 0 || value.length > 1) &&\\r\\n        value.startsWith(\\\"0\\\")) ||\\r\\n        Number.parseInt(value) > 255);\\r\\n}\\r\\nfunction parseIp(ip) {\\r\\n    const validIps = [];\\r\\n    for (let i = 1; i < 4; i++) {\\r\\n        for (let j = 1; j < 4; j++) {\\r\\n            for (let k = 1; k < 4; k++) {\\r\\n                const a1 = ip.substring(0, i);\\r\\n                const a2 = ip.substring(i, i + j);\\r\\n                const a3 = ip.substring(i + j, i + j + k);\\r\\n                const a4 = ip.substring(i + j + k, ip.length);\\r\\n                const candidate = `${a1}.${a2}.${a3}.${a4}`;\\r\\n                if (isValidIp(candidate))\\r\\n                    validIps.push(candidate);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return validIps;\\r\\n}\\r\\nfunction primeFactor(integer) {\\r\\n    for (let i = 2; i < Math.sqrt(integer) + 1; i++) {\\r\\n        const factor = integer / i;\\r\\n        if (Number.isInteger(factor)) {\\r\\n            return primeFactor(factor);\\r\\n        }\\r\\n    }\\r\\n    return integer;\\r\\n}\\r\\nfunction sumArray(array) {\\r\\n    return array.reduce((acc, value) => acc + value, 0);\\r\\n}\\r\\nfunction findMaxSubArraySum(array) {\\r\\n    let currentMax = sumArray(array);\\r\\n    for (let i = 0; i < array.length - 1; i++) {\\r\\n        for (let j = array.length; j > i; j--) {\\r\\n            currentMax = Math.max(sumArray(array.slice(i, j)), currentMax);\\r\\n        }\\r\\n    }\\r\\n    return currentMax;\\r\\n}\\r\\nfunction tryColorGraphV2(count, data) {\\r\\n    const defaultColor = -1;\\r\\n    const tryColorIn = 1;\\r\\n    const solution = new Array(count).fill(defaultColor);\\r\\n    const checklist = [];\\r\\n    checklist.push({ vertix: 0, color: tryColorIn });\\r\\n    while (checklist.length) {\\r\\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\\r\\n        const { vertix, color } = checklist.pop();\\r\\n        solution[vertix] = color;\\r\\n        for (const neighbor of data[vertix] || []) {\\r\\n            if (solution[neighbor] === color)\\r\\n                return [];\\r\\n            if (solution[neighbor] === defaultColor)\\r\\n                checklist.push({ vertix: neighbor, color: (color + 1) % 2 });\\r\\n        }\\r\\n        if (!checklist.length) {\\r\\n            const vertixToPush = solution\\r\\n                .map((value, index) => ({ value, index }))\\r\\n                .find(({ value }) => value === defaultColor)?.index;\\r\\n            if (vertixToPush != undefined)\\r\\n                checklist.push({ vertix: vertixToPush, color: tryColorIn });\\r\\n        }\\r\\n    }\\r\\n    return solution;\\r\\n}\\r\\nfunction tryColorGraph(data, acc, vertix = 0, color = 0) {\\r\\n    //Bugged, need to figure it out. Cleaning of acc does not bubble up\\r\\n    if (acc[vertix] !== undefined && acc[vertix] !== color) {\\r\\n        return [];\\r\\n    }\\r\\n    acc[vertix] = color;\\r\\n    if (data[vertix] === undefined) {\\r\\n        return acc;\\r\\n    }\\r\\n    for (const neighbor of data[vertix]) {\\r\\n        const result = tryColorGraph(data, acc, neighbor, (color + 1) % 2);\\r\\n        if (!result.length) {\\r\\n            delete acc[vertix];\\r\\n            return [];\\r\\n        }\\r\\n    }\\r\\n    return acc;\\r\\n}\\r\\nfunction toMapOfVertice(data) {\\r\\n    return data.reduce((acc, [n1, n2]) => {\\r\\n        acc[n1] = acc[n1] || [];\\r\\n        acc[n2] = acc[n2] || [];\\r\\n        acc[n1] = acc[n1].concat([n2]);\\r\\n        acc[n2] = acc[n2].concat([n1]);\\r\\n        return acc;\\r\\n    }, {});\\r\\n}\\r\\nfunction isValidParenthesis(text) {\\r\\n    let opened = 0;\\r\\n    for (const char of [...text]) {\\r\\n        if (char === \\\"(\\\")\\r\\n            opened++;\\r\\n        if (char === \\\")\\\")\\r\\n            opened--;\\r\\n        if (opened < 0)\\r\\n            return false;\\r\\n    }\\r\\n    return opened === 0;\\r\\n}\\r\\nfunction parenthesisSolutions(text, acc, depth) {\\r\\n    if (depth === 0)\\r\\n        return [];\\r\\n    if (acc.has(text)) {\\r\\n        return [];\\r\\n    }\\r\\n    acc.add(text);\\r\\n    if (isValidParenthesis(text) || !text) {\\r\\n        return [text || \\\"\\\"];\\r\\n    }\\r\\n    if (text.startsWith(\\\")\\\")) {\\r\\n        return parenthesisSolutions(text.substring(1), acc, depth - 1);\\r\\n    }\\r\\n    return [...text]\\r\\n        .map((value, index) => {\\r\\n        return parenthesisSolutions([...text]\\r\\n            .slice(0, index)\\r\\n            .concat([...text].slice(index + 1, text.length))\\r\\n            .join(\\\"\\\"), acc, depth - 1);\\r\\n    })\\r\\n        .reduce((acc, value) => {\\r\\n        return acc.concat(value);\\r\\n    }, []);\\r\\n}\\r\\nfunction TriangleMinSum(triangle, i, j) {\\r\\n    if (i >= triangle.length || j >= triangle[i].length) {\\r\\n        return 0;\\r\\n    }\\r\\n    const value = triangle[i][j];\\r\\n    const left = value + TriangleMinSum(triangle, i + 1, j);\\r\\n    const right = value + TriangleMinSum(triangle, i + 1, j + 1);\\r\\n    return Math.min(left, right);\\r\\n}\\r\\nfunction CaesarCipher(text, rotation) {\\r\\n    // A: 65 .... Z: 90\\r\\n    const AcharCode = \\\"A\\\".charCodeAt(0);\\r\\n    const spaceCode = \\\" \\\".charCodeAt(0);\\r\\n    return [...text]\\r\\n        .map((char) => (char === \\\" \\\" ? spaceCode : char.charCodeAt(0) - rotation))\\r\\n        .map((charCode) => charCode === spaceCode\\r\\n        ? spaceCode\\r\\n        : charCode < AcharCode\\r\\n            ? charCode + 26\\r\\n            : charCode)\\r\\n        .map((charCode) => String.fromCharCode(charCode))\\r\\n        .join(\\\"\\\");\\r\\n}\\r\\n//Shamefully stolen from https://github.com/bitburner-official/bitburner-src/blob/6a76e1a9ab58d9b6f103c90793307c61a668334f/src/utils/HammingCodeTools.ts could not figure it out myself\\r\\nfunction HammingEncode(data) {\\r\\n    const enc = [0];\\r\\n    const data_bits = data.toString(2).split(\\\"\\\").reverse();\\r\\n    data_bits.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    let k = data_bits.length;\\r\\n    /* NOTE: writing the data like this flips the endianness, this is what the\\r\\n     * original implementation by Hedrauta did so I'm keeping it like it was. */\\r\\n    for (let i = 1; k > 0; i++) {\\r\\n        if ((i & (i - 1)) != 0) {\\r\\n            enc[i] = data_bits[--k];\\r\\n        }\\r\\n        else {\\r\\n            enc[i] = 0;\\r\\n        }\\r\\n    }\\r\\n    let parity = 0;\\r\\n    /* Figure out the subsection parities */\\r\\n    for (let i = 0; i < enc.length; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity ^= i;\\r\\n        }\\r\\n    }\\r\\n    parity = parity.toString(2).split(\\\"\\\").reverse();\\r\\n    parity.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    /* Set the parity bits accordingly */\\r\\n    for (let i = 0; i < parity.length; i++) {\\r\\n        enc[2 ** i] = parity[i] ? 1 : 0;\\r\\n    }\\r\\n    parity = 0;\\r\\n    /* Figure out the overall parity for the entire block */\\r\\n    for (let i = 0; i < enc.length; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity++;\\r\\n        }\\r\\n    }\\r\\n    /* Finally set the overall parity bit */\\r\\n    enc[0] = parity % 2 == 0 ? 0 : 1;\\r\\n    return enc.join(\\\"\\\");\\r\\n}\\r\\nfunction HammingEncodeProperly(data) {\\r\\n    /* How many bits do we need?\\r\\n     * n = 2^m\\r\\n     * k = 2^m - m - 1\\r\\n     * where k is the number of data bits, m the number\\r\\n     * of parity bits and n the number of total bits. */\\r\\n    let m = 1;\\r\\n    while (2 ** (2 ** m - m - 1) - 1 < data) {\\r\\n        m++;\\r\\n    }\\r\\n    const n = 2 ** m;\\r\\n    const k = 2 ** m - m - 1;\\r\\n    const enc = [0];\\r\\n    const data_bits = data.toString(2).split(\\\"\\\").reverse();\\r\\n    data_bits.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    /* Flip endianness as in the original implementation by Hedrauta\\r\\n     * and write the data back to front\\r\\n     * XXX why do we do this? */\\r\\n    for (let i = 1, j = k; i < n; i++) {\\r\\n        if ((i & (i - 1)) != 0) {\\r\\n            enc[i] = data_bits[--j] ? data_bits[j] : 0;\\r\\n        }\\r\\n    }\\r\\n    let parity = 0;\\r\\n    /* Figure out the subsection parities */\\r\\n    for (let i = 0; i < n; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity ^= i;\\r\\n        }\\r\\n    }\\r\\n    parity = parity.toString(2).split(\\\"\\\").reverse();\\r\\n    parity.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    /* Set the parity bits accordingly */\\r\\n    for (let i = 0; i < m; i++) {\\r\\n        enc[2 ** i] = parity[i] ? 1 : 0;\\r\\n    }\\r\\n    parity = 0;\\r\\n    /* Figure out the overall parity for the entire block */\\r\\n    for (let i = 0; i < n; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity++;\\r\\n        }\\r\\n    }\\r\\n    /* Finally set the overall parity bit */\\r\\n    enc[0] = parity % 2 == 0 ? 0 : 1;\\r\\n    return enc.join(\\\"\\\");\\r\\n}\\r\\nfunction HammingDecode(data) {\\r\\n    let err = 0;\\r\\n    const bits = [];\\r\\n    /* TODO why not just work with an array of digits from the start? */\\r\\n    for (const i in data.split(\\\"\\\")) {\\r\\n        const bit = parseInt(data[i]);\\r\\n        bits[i] = bit;\\r\\n        if (bit) {\\r\\n            err ^= +i;\\r\\n        }\\r\\n    }\\r\\n    /* If err != 0 then it spells out the index of the bit that was flipped */\\r\\n    if (err) {\\r\\n        /* Flip to correct */\\r\\n        bits[err] = bits[err] ? 0 : 1;\\r\\n    }\\r\\n    /* Now we have to read the message, bit 0 is unused (it's the overall parity bit\\r\\n     * which we don't care about). Each bit at an index that is a power of 2 is\\r\\n     * a parity bit and not part of the actual message. */\\r\\n    let ans = \\\"\\\";\\r\\n    for (let i = 1; i < bits.length; i++) {\\r\\n        /* i is not a power of two so it's not a parity bit */\\r\\n        if ((i & (i - 1)) != 0) {\\r\\n            ans += bits[i];\\r\\n        }\\r\\n    }\\r\\n    /* TODO to avoid ambiguity about endianness why not let the player return the extracted (and corrected)\\r\\n     * data bits, rather than guessing at how to convert it to a decimal string? */\\r\\n    return parseInt(ans, 2);\\r\\n}\\r\\n\",\"filename\":\"contracts/solve.js\",\"server\":\"home\"}}],[\"deployall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy as _deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { ThreadCounts } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/specialized-hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n    // max home threads\\r\\n    xh: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deployall(ns, args, flags);\\r\\n}\\r\\nexport async function deployall(ns, { script, ...args }, { d: depth, x: maxThreads, xh: maxHomeThreads, ...flags }, ...scriptArgs) {\\r\\n    const threadRemaining = new ThreadCounts(maxHomeThreads, maxThreads);\\r\\n    if (!threadRemaining.isEmpty())\\r\\n        await walkDeepFirst(ns, depth, async (host) => {\\r\\n            if (threadRemaining.isEmpty()) {\\r\\n                return;\\r\\n            }\\r\\n            const startedThreads = await _deploy(ns, { ...args, host, script }, { ...flags, x: threadRemaining.getThreadCount(host) }, ...scriptArgs);\\r\\n            threadRemaining.removeThreads(startedThreads, host);\\r\\n        });\\r\\n    return threadRemaining.isEmpty();\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return [...data.servers, ...data.scripts];\\r\\n}\\r\\n\",\"filename\":\"deployall.js\",\"server\":\"home\"}}],[\"ps.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n    //print\\r\\n    p: true,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await ps(ns, flags);\\r\\n}\\r\\nexport async function ps(ns, { d: depth, p: print }) {\\r\\n    const processes = [];\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        processes.push(...ns.ps(host).map((process) => ({ ...process, host })));\\r\\n    });\\r\\n    const linePattern = \\\"%s %s %s %s\\\";\\r\\n    const fileNamePadding = 20;\\r\\n    const threadPadding = 4;\\r\\n    const argsPadding = 30;\\r\\n    const hostsPadding = 30;\\r\\n    if (print) {\\r\\n        ns.tprintf(linePattern, \\\"Filename\\\".padEnd(fileNamePadding), \\\"T\\\".padEnd(threadPadding), \\\"...Args\\\".padEnd(argsPadding), \\\"...hosts\\\".padEnd(hostsPadding));\\r\\n        ns.tprintf(\\\"-\\\".padStart(fileNamePadding + threadPadding + argsPadding + hostsPadding, \\\"-\\\"));\\r\\n    }\\r\\n    const consolidated = processes.reduce((acc, { host, ...process }) => {\\r\\n        const accProcess = acc.find((accProcess) => process.filename === accProcess.filename &&\\r\\n            process.args.join() === accProcess.args.join());\\r\\n        if (!accProcess)\\r\\n            acc.push({ ...process, hosts: [host] });\\r\\n        else {\\r\\n            accProcess.hosts.push(host);\\r\\n            accProcess.threads += process.threads;\\r\\n        }\\r\\n        return acc;\\r\\n    }, []);\\r\\n    if (print)\\r\\n        consolidated.forEach((process) => {\\r\\n            ns.tprintf(linePattern, process.filename.padEnd(fileNamePadding), process.threads.toString().padEnd(threadPadding), `[${process.args.join(\\\"] [\\\")}]`.padEnd(argsPadding), `[${process.hosts.join(\\\"] [\\\")}]`.padEnd(hostsPadding));\\r\\n        });\\r\\n    return consolidated;\\r\\n}\\r\\n\",\"filename\":\"ps.js\",\"server\":\"home\"}}],[\"pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { analyze } from \\\"/lib/analyze\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { getAvailableExes } from \\\"/lib/getAvailableExes\\\";\\r\\nimport { scpExtensions } from \\\"/lib/misc\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    dl: false,\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    //print\\r\\n    p: true,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await pwn(ns, flags);\\r\\n}\\r\\nexport async function pwn(ns, { d: depth, p: print, dl }) {\\r\\n    const availablesPwn = getAvailableExes(ns);\\r\\n    const run = (name, cmd, host) => print ? ns.tprintf(\\\"%s:\\\\t\\\\t\\\\t%s\\\", name, cmd(host)) : cmd(host);\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        ns.printf(\\\"%s\\\", host);\\r\\n        /**Gain root access */\\r\\n        if (!ns.hasRootAccess(host) &&\\r\\n            ns.getServerNumPortsRequired(host) < availablesPwn.length) {\\r\\n            availablesPwn.forEach((availablePwn) => run(availablePwn.name, availablePwn.fn, host));\\r\\n        }\\r\\n        /** download all files located on server that does not already exist */\\r\\n        if (dl)\\r\\n            ns.ls(host)\\r\\n                .filter((file) => !ns.fileExists(file))\\r\\n                .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension))\\r\\n                .length)\\r\\n                .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n                .forEach((file) => ns.scp(file, \\\"home\\\", host));\\r\\n        if (print)\\r\\n            analyze(ns, acc.nodes.concat([host]).join(\\\" -> \\\"), host);\\r\\n    }, { excludes: ns.getPurchasedServers() });\\r\\n}\\r\\n\",\"filename\":\"pwn.js\",\"server\":\"home\"}}],[\"killall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await killall(ns, flags);\\r\\n}\\r\\nexport async function killall(ns, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        ns.killall(host);\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"killall.js\",\"server\":\"home\"}}],[\"find-contracts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { newLine } from \\\"/lib/misc\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { generateConnect } from \\\"/to-pwn\\\";\\r\\nimport { solve } from \\\"/contracts/solve\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await findContract(ns, flags);\\r\\n}\\r\\nexport async function findContract(ns, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        const contracts = ns.ls(host).filter((file) => file.endsWith(\\\".cct\\\"));\\r\\n        if (contracts.length) {\\r\\n            ns.tprintf(generateConnect(acc.nodes, host));\\r\\n            ns.tprintf(contracts\\r\\n                .map((contract) => `${contract} (${ns.codingcontract.getContractType(contract, host)})`)\\r\\n                .join(\\\", \\\"));\\r\\n            ns.tprintf(newLine);\\r\\n            for (const script of contracts) {\\r\\n                await solve(ns, { host, script });\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"find-contracts.js\",\"server\":\"home\"}}],[\"growall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nconst file = \\\"lib/grow.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const { d: depth } = flags;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        await deploy(ns, { ...args, host, script: file }, { ...flags });\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"growall.js\",\"server\":\"home\"}}],[\"hackall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n    //hack chance threshold\\r\\n    c: 0.9,\\r\\n};\\r\\nconst file = \\\"lib/hack.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const { d: depth, x: maxThreads, c } = flags;\\r\\n    let threadRemaining = maxThreads;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        if (threadRemaining === 0) {\\r\\n            return;\\r\\n        }\\r\\n        if (threadRemaining < 0) {\\r\\n            throw new Error();\\r\\n        }\\r\\n        const startedThreads = await deploy(ns, { ...args, host, script: file }, { ...flags, x: threadRemaining }, \\\"-c\\\", c);\\r\\n        threadRemaining = threadRemaining - startedThreads;\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"hackall.js\",\"server\":\"home\"}}],[\"kill.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    script: \\\"lib/weaken.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const depth = flags.d;\\r\\n    const { script } = args;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        ns.ps(host)\\r\\n            .filter((process) => process.filename === script)\\r\\n            .forEach((process) => ns.kill(process.pid));\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.scripts;\\r\\n}\\r\\n\",\"filename\":\"kill.js\",\"server\":\"home\"}}],[\"scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n    m: true,\\r\\n    s: true,\\r\\n};\\r\\nconst indent = 1;\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await scan(ns, flags);\\r\\n}\\r\\nexport async function scan(ns, { d: depth, m: moneyEnabled, s: securityEnabled }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        const padding = \\\"\\\".padEnd(acc.depth * indent);\\r\\n        const paddingInverted = \\\"\\\".padEnd((30 - acc.depth) * indent);\\r\\n        const server = ns.getServer(host);\\r\\n        ns.tprintf(\\\"%s┣ %s\\\", padding, host);\\r\\n        const money = server.moneyAvailable || 0;\\r\\n        const maxMoney = server.moneyMax || 0;\\r\\n        if (moneyEnabled && maxMoney) {\\r\\n            const line = \\\"%s┃%sm_avail=%-10s\\\\tm_max=%-10s\\\\tm_ratio=%-10s\\\";\\r\\n            ns.tprintf(line, padding, paddingInverted, ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        }\\r\\n        if (securityEnabled) {\\r\\n            const line = \\\"%s┃%sminSec=%-10s\\\\tsecurity=%-.10s\\\\tmin_hack=%-10s\\\";\\r\\n            ns.tprintf(line, padding, paddingInverted, server.minDifficulty, server.hackDifficulty?.toFixed(2).padEnd(10), server.requiredHackingSkill);\\r\\n        }\\r\\n    }, {\\r\\n        excludes: ns.getPurchasedServers(),\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"scan.js\",\"server\":\"home\"}}],[\"shrinkall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nconst file = \\\"lib/shrink.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const { d: depth } = flags;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        await deploy(ns, { ...args, host, script: file }, { ...flags });\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"shrinkall.js\",\"server\":\"home\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"home\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"home\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"home\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"home\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"home\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"home\"}}],[\"contracts/contract-134441.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-134441.cct\\\";\\r\\nconst host = \\\"zer0\\\";\\r\\nconst prices = [\\r\\n    109, 134, 48, 16, 63, 186, 178, 81, 140, 156, 177, 91, 61, 13, 46, 102, 51,\\r\\n    149, 111, 160, 57, 78, 142, 188, 195, 178, 173, 133, 49, 129, 117, 44, 61,\\r\\n    104, 58, 97, 88, 24, 104,\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const calc = (prices) => {\\r\\n        let max = 0;\\r\\n        for (let i = 0; i < prices.length - 1; i++) {\\r\\n            for (let j = i; j < prices.length; j++) {\\r\\n                max = Math.max(max, prices[j] - prices[i]);\\r\\n            }\\r\\n        }\\r\\n        return max;\\r\\n    };\\r\\n    let max = calc(prices);\\r\\n    for (let i = 1; i < prices.length - 1; i++) {\\r\\n        max = Math.max(max, calc(prices.slice(0, i + 1)) + calc(prices.slice(i + 1, prices.length)));\\r\\n    }\\r\\n    ns.tprintf(\\\"solution: %s\\\", max);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(max, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-134441.js\",\"server\":\"home\"}}],[\"contracts/contract-2410.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-2410.cct\\\";\\r\\nconst host = \\\"foodnstuff\\\";\\r\\nconst data = 14806590036;\\r\\nconst data2 = \\\"pppdpdddpd\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    const controlBitIndexes = [...data2]\\r\\n        .map((value, index) => (value === \\\"p\\\" ? index + 1 : -1))\\r\\n        .filter((value) => value > 0);\\r\\n    const solution = HammingEncode(data);\\r\\n    // setConfig({pow:4}).encode()\\r\\n    ns.tprintf(\\\"debug: %s\\\", controlBitIndexes);\\r\\n    ns.tprintf(\\\"debug: %s\\\", \\\"8 -> 1000 -> 11110000\\\");\\r\\n    ns.tprintf(\\\"debug: %s\\\", HammingEncode(8));\\r\\n    ns.tprintf(\\\"debug: %s\\\", \\\"21 -> 10101 -> 1001101011\\\");\\r\\n    ns.tprintf(\\\"debug: %s\\\", HammingEncode(21));\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\nfunction HammingEncode(data) {\\r\\n    const enc = [0];\\r\\n    const data_bits = data.toString(2).split(\\\"\\\").reverse();\\r\\n    data_bits.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    let k = data_bits.length;\\r\\n    /* NOTE: writing the data like this flips the endianness, this is what the\\r\\n     * original implementation by Hedrauta did so I'm keeping it like it was. */\\r\\n    for (let i = 1; k > 0; i++) {\\r\\n        if ((i & (i - 1)) != 0) {\\r\\n            enc[i] = data_bits[--k];\\r\\n        }\\r\\n        else {\\r\\n            enc[i] = 0;\\r\\n        }\\r\\n    }\\r\\n    let parity = 0;\\r\\n    /* Figure out the subsection parities */\\r\\n    for (let i = 0; i < enc.length; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity ^= i;\\r\\n        }\\r\\n    }\\r\\n    parity = parity.toString(2).split(\\\"\\\").reverse();\\r\\n    parity.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    /* Set the parity bits accordingly */\\r\\n    for (let i = 0; i < parity.length; i++) {\\r\\n        enc[2 ** i] = parity[i] ? 1 : 0;\\r\\n    }\\r\\n    parity = 0;\\r\\n    /* Figure out the overall parity for the entire block */\\r\\n    for (let i = 0; i < enc.length; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity++;\\r\\n        }\\r\\n    }\\r\\n    /* Finally set the overall parity bit */\\r\\n    enc[0] = parity % 2 == 0 ? 0 : 1;\\r\\n    return enc.join(\\\"\\\");\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-2410.js\",\"server\":\"home\"}}],[\"contracts/contract-40081.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-40081.cct\\\";\\r\\nconst host = \\\"joesguns\\\";\\r\\nconst data = [\\\"ARRAY QUEUE MACRO VIRUS CACHE\\\", 8];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = cipher(data[0], data[1]);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\nfunction cipher(text, rotation) {\\r\\n    // A: 65 .... Z: 90\\r\\n    const AcharCode = \\\"A\\\".charCodeAt(0);\\r\\n    const spaceCode = \\\" \\\".charCodeAt(0);\\r\\n    return [...text]\\r\\n        .map((char) => (char === \\\" \\\" ? spaceCode : char.charCodeAt(0) - rotation))\\r\\n        .map((charCode) => charCode === spaceCode\\r\\n        ? spaceCode\\r\\n        : charCode < AcharCode\\r\\n            ? charCode + 26\\r\\n            : charCode)\\r\\n        .map((charCode) => String.fromCharCode(charCode))\\r\\n        .join(\\\"\\\");\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-40081.js\",\"server\":\"home\"}}],[\"contracts/template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-XX.cct\\\";\\r\\nconst host = \\\"zer0\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const data = ns.codingcontract.getData(name, host);\\r\\n    const solution = 0;\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/template.js\",\"server\":\"home\"}}],[\"contracts/contract-634177.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-634177.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = [\\r\\n    [6],\\r\\n    [6, 4],\\r\\n    [2, 4, 3],\\r\\n    [4, 2, 3, 3], //\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction minBranch(triangle, i, j) {\\r\\n    if (i >= triangle.length || j >= triangle[i].length) {\\r\\n        return 0;\\r\\n    }\\r\\n    const value = triangle[i][j];\\r\\n    const left = value + minBranch(triangle, i + 1, j);\\r\\n    const right = value + minBranch(triangle, i + 1, j + 1);\\r\\n    return Math.min(left, right);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = minBranch(data, 0, 0);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-634177.js\",\"server\":\"home\"}}],[\"contracts/contract-276203.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-276203.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = \\\"((()(((aa()))()\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction isValid(text) {\\r\\n    let opened = 0;\\r\\n    for (const char of [...text]) {\\r\\n        if (char === \\\"(\\\")\\r\\n            opened++;\\r\\n        if (char === \\\")\\\")\\r\\n            opened--;\\r\\n        if (opened < 0)\\r\\n            return false;\\r\\n    }\\r\\n    return opened === 0;\\r\\n}\\r\\nfunction parenthesisSolutions(text, depth) {\\r\\n    if (depth === 0)\\r\\n        return [];\\r\\n    if (isValid(text) || !text) {\\r\\n        return [text || \\\"\\\"];\\r\\n    }\\r\\n    if (text.length < 2) {\\r\\n        return [\\\"\\\"];\\r\\n    }\\r\\n    return [...text]\\r\\n        .map((value, index) => parenthesisSolutions([...text]\\r\\n        .slice(0, index)\\r\\n        .concat([...text].slice(index + 1, text.length))\\r\\n        .join(\\\"\\\"), depth - 1))\\r\\n        .reduce((acc, value) => {\\r\\n        return acc.concat(value);\\r\\n    }, []);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    let solutions = [];\\r\\n    let depth = 1;\\r\\n    do {\\r\\n        solutions = parenthesisSolutions(data, depth++);\\r\\n    } while (!solutions.length);\\r\\n    solutions = [...new Set(solutions)];\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solutions);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solutions, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-276203.js\",\"server\":\"home\"}}],[\"contracts/contract-57834.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-57834.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = [\\r\\n    12,\\r\\n    [\\r\\n        [1, 8],\\r\\n        [3, 10],\\r\\n        [3, 6],\\r\\n        [3, 9],\\r\\n        [0, 1],\\r\\n        [9, 11],\\r\\n        [7, 10],\\r\\n        [0, 5],\\r\\n        [6, 7],\\r\\n        [2, 8],\\r\\n        [7, 8],\\r\\n        [0, 3],\\r\\n        [2, 6],\\r\\n        [1, 11],\\r\\n        [4, 9],\\r\\n        [1, 9],\\r\\n        [4, 10],\\r\\n        [7, 11],\\r\\n        [0, 7],\\r\\n        [3, 11],\\r\\n        [2, 11],\\r\\n        [7, 9],\\r\\n    ],\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction tryColor(data, acc, vertix = 0, color = 0) {\\r\\n    if (acc[vertix] !== undefined && acc[vertix] !== color) {\\r\\n        return [];\\r\\n    }\\r\\n    acc[vertix] = color;\\r\\n    if (data[vertix] === undefined) {\\r\\n        return acc;\\r\\n    }\\r\\n    for (const neighbor of data[vertix]) {\\r\\n        const result = tryColor(data, acc, neighbor, (color + 1) % 2);\\r\\n        if (!result.length) {\\r\\n            delete acc[vertix];\\r\\n            return [];\\r\\n        }\\r\\n    }\\r\\n    return acc;\\r\\n}\\r\\nfunction toMapOfVertice(data) {\\r\\n    return data.reduce((acc, [n1, n2]) => {\\r\\n        acc[n1] = acc[n1] || [];\\r\\n        acc[n2] = acc[n2] || [];\\r\\n        acc[n1] = acc[n1].concat([n2]);\\r\\n        acc[n2] = acc[n1].concat([n1]);\\r\\n        return acc;\\r\\n    }, {});\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = tryColor(toMapOfVertice(data[1]), []);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-57834.js\",\"server\":\"home\"}}],[\"upgrade-hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await upgradeHacknet(ns, flags);\\r\\n}\\r\\nexport async function upgradeHacknet(ns, { b: budgetRatio }) {\\r\\n    let budget = ns.getPlayer().money * budgetRatio;\\r\\n    const purchaseCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    if (budget >= purchaseCost &&\\r\\n        ns.hacknet.numNodes() < ns.hacknet.maxNumNodes()) {\\r\\n        ns.hacknet.purchaseNode();\\r\\n        budget -= purchaseCost;\\r\\n    }\\r\\n    while (budget) {\\r\\n        const server = getHackNodes(ns).shift();\\r\\n        if (!server)\\r\\n            return;\\r\\n        const upgradeCost = ns.hacknet.getLevelUpgradeCost(server.index, 10);\\r\\n        const ramCost = ns.hacknet.getRamUpgradeCost(server.index);\\r\\n        const cpuCost = ns.hacknet.getCoreUpgradeCost(server.index);\\r\\n        if (server.level < 100) {\\r\\n            if (budget < upgradeCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeLevel(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.ram < 64) {\\r\\n            if (budget < ramCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeRam(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.level < 140) {\\r\\n            if (budget < upgradeCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeLevel(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.cores < 5) {\\r\\n            if (budget < cpuCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeCores(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.level < 200) {\\r\\n            if (budget < upgradeCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeLevel(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.cores < 16) {\\r\\n            if (budget < cpuCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeCores(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n}\\r\\nfunction upgradeLevel(ns, server) {\\r\\n    const upgradeCost = ns.hacknet.getLevelUpgradeCost(server.index, 10);\\r\\n    if (ns.hacknet.upgradeLevel(server.index, 10)) {\\r\\n        ns.print(ns.sprintf(\\\"Upgraded %s to lvl %s\\\", server.index, server.level + 1));\\r\\n        return upgradeCost;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\nfunction upgradeRam(ns, server) {\\r\\n    const upgradeCost = ns.hacknet.getRamUpgradeCost(server.index);\\r\\n    if (ns.hacknet.upgradeRam(server.index)) {\\r\\n        ns.print(ns.sprintf(\\\"Upgraded %s to ram %s\\\", server.index, server.ram * 2));\\r\\n        return upgradeCost;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\nfunction upgradeCores(ns, server) {\\r\\n    const upgradeCost = ns.hacknet.getCoreUpgradeCost(server.index);\\r\\n    if (ns.hacknet.upgradeCore(server.index)) {\\r\\n        ns.print(ns.sprintf(\\\"Upgraded %s to cores %s\\\", server.index, server.cores + 1));\\r\\n        return upgradeCost;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\nfunction getHackNodes(ns) {\\r\\n    return new Array(ns.hacknet.numNodes())\\r\\n        .fill(0)\\r\\n        .map((_value, index) => index)\\r\\n        .map((index) => ({ ...ns.hacknet.getNodeStats(index), index }))\\r\\n        .sort((a, b) => a.production - b.production);\\r\\n}\\r\\n\",\"filename\":\"upgrade-hacknet.js\",\"server\":\"home\"}}],[\"contracts/contract-937534.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-937534.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = [\\r\\n    -4, -9, 0, 5, 5, 5, 6, 5, 7, -2, -2, -4, -6, 3, 5, -3, -1, 5, 10, -5, 0,\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction sumArray(array) {\\r\\n    return array.reduce((acc, value) => acc + value, 0);\\r\\n}\\r\\nfunction findMaxSubArraySum(array) {\\r\\n    let currentMax = sumArray(array);\\r\\n    for (let i = 0; i < array.length - 1; i++) {\\r\\n        for (let j = array.length - 1; j > i; j--) {\\r\\n            currentMax = Math.max(sumArray(array.slice(i, j)), currentMax);\\r\\n        }\\r\\n    }\\r\\n    return currentMax;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = findMaxSubArraySum(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-937534.js\",\"server\":\"home\"}}],[\"contracts/contract-169947.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-169947.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = 172413088;\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction primeFactor(integer) {\\r\\n    for (let i = 2; i < Math.sqrt(integer) + 1; i++) {\\r\\n        const factor = integer / i;\\r\\n        if (Number.isInteger(factor)) {\\r\\n            return primeFactor(factor);\\r\\n        }\\r\\n    }\\r\\n    return integer;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = primeFactor(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-169947.js\",\"server\":\"home\"}}],[\"contracts/contract-324759.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-324759.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = \\\"9716412766\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction isValidIp(ip) {\\r\\n    const splitted = ip.split(\\\".\\\").filter((value) => !!value);\\r\\n    if (splitted.length != 4)\\r\\n        return false;\\r\\n    return !splitted.find((value) => ((Number.parseInt(value) != 0 || value.length > 1) &&\\r\\n        value.startsWith(\\\"0\\\")) ||\\r\\n        Number.parseInt(value) > 255);\\r\\n}\\r\\nfunction parseIp(ip) {\\r\\n    const validIps = [];\\r\\n    for (let i = 1; i < 4; i++) {\\r\\n        for (let j = 1; j < 4; j++) {\\r\\n            for (let k = 1; k < 4; k++) {\\r\\n                const a1 = ip.substring(0, i);\\r\\n                const a2 = ip.substring(i, i + j);\\r\\n                const a3 = ip.substring(i + j, i + j + k);\\r\\n                const a4 = ip.substring(i + j + k, ip.length);\\r\\n                const candidate = `${a1}.${a2}.${a3}.${a4}`;\\r\\n                if (isValidIp(candidate))\\r\\n                    validIps.push(candidate);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return validIps;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = parseIp(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"127001: %s\\\", parseIp(\\\"127001\\\"));\\r\\n    ns.tprintf(\\\"255255255255: %s\\\", parseIp(\\\"255255255255\\\"));\\r\\n    ns.tprintf(\\\"1000: %s\\\", parseIp(\\\"1000\\\"));\\r\\n    ns.tprintf(\\\"1001: %s\\\", parseIp(\\\"1001\\\"));\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-324759.js\",\"server\":\"home\"}}],[\"contracts/contract-145349.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-145349.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = [\\r\\n    122, 188, 140, 50, 103, 126, 104, 136, 24, 58, 32, 30, 96, 147, 129, 134, 84, 100, 52, 24, 133, 158, 59, 25, 162, 48, 38, 190, 101, 12, 106, 190, 88, 125, 123, 142, 109\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction maxTxProfit(prices) {\\r\\n    let max = 0;\\r\\n    for (let i = 0; i < prices.length - 1; i++) {\\r\\n        for (let j = i; j < prices.length; j++) {\\r\\n            max = Math.max(max, prices[j] - prices[i]);\\r\\n        }\\r\\n    }\\r\\n    return max;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = maxTxProfit(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-145349.js\",\"server\":\"home\"}}],[\"contracts/contract-507056.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-507056.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction isFinished(data, i, j) {\\r\\n    return data.length === i + 1 && data[i].length === j + 1;\\r\\n}\\r\\nfunction canMoveRight(data, i, j) {\\r\\n    return data[i].length > j + 1 && data[i][j + 1] !== 1;\\r\\n}\\r\\nfunction canMoveDown(data, i, j) {\\r\\n    return data.length > i + 1 && data[i + 1][j] !== 1;\\r\\n}\\r\\nfunction walkDownFirst(data, i, j) {\\r\\n    if (isFinished(data, i, j)) {\\r\\n        return 1;\\r\\n    }\\r\\n    let count = 0;\\r\\n    if (canMoveDown(data, i, j)) {\\r\\n        count += walkDownFirst(data, i + 1, j);\\r\\n    }\\r\\n    if (canMoveRight(data, i, j)) {\\r\\n        count += walkDownFirst(data, i, j + 1);\\r\\n    }\\r\\n    return count;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const data = ns.codingcontract.getData(name, host);\\r\\n    const solution = walkDownFirst(data, 0, 0);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-507056.js\",\"server\":\"home\"}}],[\"upgrade-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { upgrade } from \\\"/lib/upgrade\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n    //prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await upgradeServers(ns, flags);\\r\\n}\\r\\nexport async function upgradeServers(ns, { b: budgetRatio, ...flags }) {\\r\\n    let budget = ns.getPlayer().money * budgetRatio;\\r\\n    while (budget) {\\r\\n        const server = ns\\r\\n            .getPurchasedServers()\\r\\n            .map((host) => ({ host, ram: ns.getServerMaxRam(host) }))\\r\\n            .sort(({ ram: ramA }, { ram: ramB }) => {\\r\\n            return ramA - ramB;\\r\\n        })\\r\\n            .shift();\\r\\n        if (!server)\\r\\n            return;\\r\\n        const price = await upgrade(ns, { host: server.host }, { ...flags, b: budget });\\r\\n        budget -= price;\\r\\n        if (!price) {\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"upgrade-servers.js\",\"server\":\"home\"}}],[\"gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { getGangMembers, upgradeGang } from \\\"/upgrade-gang\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await manageGang(ns, flags);\\r\\n}\\r\\nexport async function manageGang(ns, { b }) {\\r\\n    // let budget = ns.getPlayer().money * budgetRatio;\\r\\n    if (ns.gang.canRecruitMember()) {\\r\\n        ns.gang.recruitMember(`guy-${ns.gang.getMemberNames().length}`);\\r\\n    }\\r\\n    const gangInfo = ns.gang.getGangInformation();\\r\\n    const { wantedPenalty } = gangInfo;\\r\\n    for (const gangMember of getGangMembers(ns)) {\\r\\n        if (gangMember.agi_exp < 2000 ||\\r\\n            gangMember.def_exp < 2000 ||\\r\\n            gangMember.str_exp < 2000 ||\\r\\n            gangMember.dex_exp < 2000) {\\r\\n            ns.gang.setMemberTask(gangMember.name, \\\"Train Combat\\\");\\r\\n        }\\r\\n        else if (gangMember.hack_exp < 2000) {\\r\\n            ns.gang.setMemberTask(gangMember.name, \\\"Train Hacking\\\");\\r\\n        }\\r\\n        else if (gangMember.cha_exp < 2000) {\\r\\n            ns.gang.setMemberTask(gangMember.name, \\\"Train Charisma\\\");\\r\\n            // } else if (\\r\\n            //   gangMember.task === \\\"Vigilante Justice\\\" &&\\r\\n            //   wantedPenalty < 0.98 &&\\r\\n            //   gangInfo.wantedLevel > 50\\r\\n            // ) {\\r\\n            //   continue;\\r\\n            // } else if (wantedPenalty < 0.8 && gangInfo.wantedLevel > 100) {\\r\\n            //   ns.gang.setMemberTask(gangMember.name, \\\"Vigilante Justice\\\");\\r\\n        }\\r\\n        else {\\r\\n            const mostProfitTask = ns.gang\\r\\n                .getTaskNames()\\r\\n                .map((taskName) => ns.gang.getTaskStats(taskName))\\r\\n                .map((task) => {\\r\\n                return {\\r\\n                    ...task,\\r\\n                    moneyGain: calculateMoneyGain(gangInfo, gangMember, task),\\r\\n                };\\r\\n            })\\r\\n                .sort(({ moneyGain: A }, { moneyGain: B }) => B - A)\\r\\n                .find(() => true)?.name;\\r\\n            const mostRespectTask = ns.gang\\r\\n                .getTaskNames()\\r\\n                .map((taskName) => ns.gang.getTaskStats(taskName))\\r\\n                .map((task) => {\\r\\n                return {\\r\\n                    ...task,\\r\\n                    respectGain: calculateRespectGain(gangInfo, gangMember, task),\\r\\n                };\\r\\n            })\\r\\n                .sort(({ respectGain: A }, { respectGain: B }) => B - A)\\r\\n                .find(() => true)?.name;\\r\\n            ns.gang.setMemberTask(gangMember.name, \\\"Territory Warfare\\\" || mostProfitTask || mostRespectTask || \\\"Mug People\\\");\\r\\n        }\\r\\n    }\\r\\n    await upgradeGang(ns, { b });\\r\\n}\\r\\nfunction calculateMoneyGain(gang, member, task) {\\r\\n    if (task.baseMoney === 0)\\r\\n        return 0;\\r\\n    let statWeight = (task.hackWeight / 100) * member.hack +\\r\\n        (task.strWeight / 100) * member.str +\\r\\n        (task.defWeight / 100) * member.def +\\r\\n        (task.dexWeight / 100) * member.dex +\\r\\n        (task.agiWeight / 100) * member.agi +\\r\\n        (task.chaWeight / 100) * member.cha;\\r\\n    statWeight -= 3.2 * task.difficulty;\\r\\n    if (statWeight <= 0)\\r\\n        return 0;\\r\\n    const territoryMult = Math.max(0.005, Math.pow(gang.territory * 100, task.territory.money) / 100);\\r\\n    if (isNaN(territoryMult) || territoryMult <= 0)\\r\\n        return 0;\\r\\n    const respectMult = calculateWantedPenalty(gang);\\r\\n    const territoryPenalty = 0.2 * gang.territory + 0.8;\\r\\n    return Math.pow(5 * task.baseMoney * statWeight * territoryMult * respectMult, territoryPenalty);\\r\\n}\\r\\nfunction calculateWantedPenalty(gang) {\\r\\n    return gang.respect / (gang.respect + gang.wantedLevel);\\r\\n}\\r\\nfunction calculateRespectGain(gang, member, task) {\\r\\n    if (task.baseRespect === 0)\\r\\n        return 0;\\r\\n    let statWeight = (task.hackWeight / 100) * member.hack +\\r\\n        (task.strWeight / 100) * member.str +\\r\\n        (task.defWeight / 100) * member.def +\\r\\n        (task.dexWeight / 100) * member.dex +\\r\\n        (task.agiWeight / 100) * member.agi +\\r\\n        (task.chaWeight / 100) * member.cha;\\r\\n    statWeight -= 4 * task.difficulty;\\r\\n    if (statWeight <= 0)\\r\\n        return 0;\\r\\n    const territoryMult = Math.max(0.005, Math.pow(gang.territory * 100, task.territory.respect) / 100);\\r\\n    const territoryPenalty = 0.2 * gang.territory + 0.8;\\r\\n    if (isNaN(territoryMult) || territoryMult <= 0)\\r\\n        return 0;\\r\\n    const respectMult = calculateWantedPenalty(gang);\\r\\n    return Math.pow(11 * task.baseRespect * statWeight * territoryMult * respectMult, territoryPenalty);\\r\\n}\\r\\nfunction calculateWantedLevelGain(gang, member, task) {\\r\\n    if (task.baseWanted === 0)\\r\\n        return 0;\\r\\n    let statWeight = (task.hackWeight / 100) * member.hack +\\r\\n        (task.strWeight / 100) * member.str +\\r\\n        (task.defWeight / 100) * member.def +\\r\\n        (task.dexWeight / 100) * member.dex +\\r\\n        (task.agiWeight / 100) * member.agi +\\r\\n        (task.chaWeight / 100) * member.cha;\\r\\n    statWeight -= 3.5 * task.difficulty;\\r\\n    if (statWeight <= 0)\\r\\n        return 0;\\r\\n    const territoryMult = Math.max(0.005, Math.pow(gang.territory * 100, task.territory.wanted) / 100);\\r\\n    if (isNaN(territoryMult) || territoryMult <= 0)\\r\\n        return 0;\\r\\n    if (task.baseWanted < 0) {\\r\\n        return 0.4 * task.baseWanted * statWeight * territoryMult;\\r\\n    }\\r\\n    const calc = (7 * task.baseWanted) / Math.pow(3 * statWeight * territoryMult, 0.8);\\r\\n    // Put an arbitrary cap on this to prevent wanted level from rising too fast if the\\r\\n    // denominator is very small. Might want to rethink formula later\\r\\n    return Math.min(100, calc);\\r\\n}\\r\\n\",\"filename\":\"gang.js\",\"server\":\"home\"}}],[\"upgrade-stats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await template(ns, args, flags);\\r\\n}\\r\\nexport async function template(ns, { host }, { d: depth }) {\\r\\n    ns.stock.getForecast();\\r\\n}\\r\\n\",\"filename\":\"upgrade-stats.js\",\"server\":\"home\"}}],[\"contracts/contract-916421.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-916421.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction countCompose(integer) {\\r\\n    const composition = new Array(integer + 1).fill(0);\\r\\n    composition[0] = 1;\\r\\n    for (let i = 1; i < integer; i++) {\\r\\n        for (let j = i; j <= integer; j++) {\\r\\n            composition[j] = composition[j] + composition[j - i];\\r\\n        }\\r\\n    }\\r\\n    return composition[integer];\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const data = ns.codingcontract.getData(name, host);\\r\\n    const solution = countCompose(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"2: %s\\\", countCompose(2));\\r\\n    ns.tprintf(\\\"3: %s\\\", countCompose(3));\\r\\n    ns.tprintf(\\\"4: %s\\\", countCompose(4));\\r\\n    ns.tprintf(\\\"5: %s\\\", countCompose(5));\\r\\n    ns.tprintf(\\\"6: %s\\\", countCompose(6));\\r\\n    ns.tprintf(\\\"7: %s\\\", countCompose(7));\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-916421.js\",\"server\":\"home\"}}],[\"upgrade-gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await upgradeGang(ns, flags);\\r\\n}\\r\\nexport async function upgradeGang(ns, { b: budgetRatio }) {\\r\\n    let budget = ns.getPlayer().money * budgetRatio;\\r\\n    getEquipments(ns).forEach((equipment) => {\\r\\n        if (budget >= equipment.cost) {\\r\\n            for (const gangMember of getGangMembers(ns)) {\\r\\n                if (ns.gang.purchaseEquipment(gangMember.name, equipment.name)) {\\r\\n                    budget -= equipment.cost;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function getEquipments(ns) {\\r\\n    return ns.gang\\r\\n        .getEquipmentNames()\\r\\n        .map((equipmentName) => ({\\r\\n        name: equipmentName,\\r\\n        cost: ns.gang.getEquipmentCost(equipmentName),\\r\\n        stats: ns.gang.getEquipmentStats(equipmentName),\\r\\n        type: ns.gang.getEquipmentType(equipmentName),\\r\\n    }))\\r\\n        .sort(({ cost: a }, { cost: b }) => a - b);\\r\\n}\\r\\nexport function getGangMembers(ns) {\\r\\n    return ns.gang\\r\\n        .getMemberNames()\\r\\n        .map((name) => ns.gang.getMemberInformation(name));\\r\\n}\\r\\n\",\"filename\":\"upgrade-gang.js\",\"server\":\"home\"}}],[\"restart-script.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    script: \\\"bot.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await restart(ns, args);\\r\\n}\\r\\nexport async function restart(ns, { script }) {\\r\\n    const processes = ns.ps();\\r\\n    const process = processes.find((process) => process.filename === script);\\r\\n    if (!process) {\\r\\n        ns.toast(\\\"Process not found!\\\", \\\"error\\\");\\r\\n        return;\\r\\n    }\\r\\n    ns.kill(process.pid);\\r\\n    ns.spawn(script, {\\r\\n        spawnDelay: 1,\\r\\n    }, ...process.args);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.scripts;\\r\\n}\\r\\n\",\"filename\":\"restart-script.js\",\"server\":\"home\"}}],[\"get-karma.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    await template(ns);\\r\\n}\\r\\nexport async function template(ns) {\\r\\n    ns.tprint(\\\"Your karma is: \\\" + ns.heart.break());\\r\\n    ns.corporation.\\r\\n    ;\\r\\n}\\r\\n\",\"filename\":\"get-karma.js\",\"server\":\"home\"}}],[\"contracts/contract-936260.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-936260.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const data = ns.codingcontract.getData(name, host);\\r\\n    const solution = 0;\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-936260.js\",\"server\":\"home\"}}],[\"bot-hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { upgradeHacknet } from \\\"/upgrade-hacknet\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n    //prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await bot(ns, flags);\\r\\n}\\r\\nexport async function bot(ns, { ...flags }) {\\r\\n    for (;;) {\\r\\n        await upgradeHacknet(ns, { ...flags });\\r\\n        if (flags.p && !(await ns.prompt(\\\"Continue?\\\", { type: \\\"boolean\\\" }))) {\\r\\n            ns.exit();\\r\\n        }\\r\\n        await ns.sleep(1e3);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"bot-hacknet.js\",\"server\":\"home\"}}],[\"bot-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { upgradeServers } from \\\"./upgrade-servers\\\";\\r\\nimport { buy } from \\\"/buy\\\";\\r\\nimport { maxServers } from \\\"/lib/maxServers\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n    //prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await bot(ns, flags);\\r\\n}\\r\\nexport async function bot(ns, { ...flags }) {\\r\\n    for (;;) {\\r\\n        /**\\r\\n         * Early game getting the 25 servers\\r\\n         */\\r\\n        await buy(ns, { pool: maxServers, \\\"min-ram\\\": 2, ram: 2 });\\r\\n        /**\\r\\n         * Upgrade\\r\\n         */\\r\\n        await upgradeServers(ns, { ...flags });\\r\\n        if (flags.p && !(await ns.prompt(\\\"Continue?\\\", { type: \\\"boolean\\\" }))) {\\r\\n            ns.exit();\\r\\n        }\\r\\n        await ns.sleep(1e3);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"bot-servers.js\",\"server\":\"home\"}}],[\"bot-gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { manageGang } from \\\"/gang\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n    //prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await bot(ns, flags);\\r\\n}\\r\\nexport async function bot(ns, { ...flags }) {\\r\\n    for (;;) {\\r\\n        await manageGang(ns, { ...flags });\\r\\n        if (flags.p && !(await ns.prompt(\\\"Continue?\\\", { type: \\\"boolean\\\" }))) {\\r\\n            ns.exit();\\r\\n        }\\r\\n        await ns.sleep(1e3);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"bot-gang.js\",\"server\":\"home\"}}],[\"bot-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { deployall } from \\\"/deployall\\\";\\r\\nimport { killall } from \\\"/killall\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { ThreadCounts } from \\\"/lib/misc\\\";\\r\\nimport { hasFormulas, validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { ps } from \\\"/ps\\\";\\r\\nimport { pwn } from \\\"/pwn\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //use home in worker pool\\r\\n    w: false,\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n    //prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await bot(ns, flags);\\r\\n}\\r\\nconst library = {\\r\\n    specializedHack: \\\"lib/specialized-hack.js\\\",\\r\\n    specializedGrow: \\\"lib/specialized-grow.js\\\",\\r\\n    specializedWeaken: \\\"lib/specialized-weaken.js\\\",\\r\\n};\\r\\nexport async function bot(ns, { w, ...flags }) {\\r\\n    for (;;) {\\r\\n        await pwn(ns, { d: defaultDepth, p: false, dl: false });\\r\\n        await walkAllHackableServer(ns, async (data) => {\\r\\n            if (!data.weaken.inProgress && data.weaken.shouldPerform(data)) {\\r\\n                const weakenThreadsCounts = weakenThreads(ns, data);\\r\\n                return await deployall(ns, { script: library.specializedWeaken, target: data.server.hostname }, {\\r\\n                    d: defaultDepth,\\r\\n                    w,\\r\\n                    x: weakenThreadsCounts.threads,\\r\\n                    xh: weakenThreadsCounts.homeThreads,\\r\\n                });\\r\\n            }\\r\\n            return true;\\r\\n        }, async (data) => {\\r\\n            if (!data.grow.inProgress && data.grow.shouldPerform(data)) {\\r\\n                const growThreadsCounts = growThreads(ns, data);\\r\\n                return await deployall(ns, { script: library.specializedGrow, target: data.server.hostname }, {\\r\\n                    d: defaultDepth,\\r\\n                    w,\\r\\n                    x: growThreadsCounts.threads,\\r\\n                    xh: growThreadsCounts.homeThreads,\\r\\n                });\\r\\n            }\\r\\n            return true;\\r\\n        }, async (data) => {\\r\\n            if (!data.hack.inProgress && data.hack.shouldPerform(data)) {\\r\\n                const hackThreadsCounts = hackThreads(ns, data);\\r\\n                //For some reason, it return -1 in some case, I need to understand those\\r\\n                if (hackThreadsCounts.threads >= 0) {\\r\\n                    // await ns.sleep(1);\\r\\n                    return await deployall(ns, { script: library.specializedHack, target: data.server.hostname }, {\\r\\n                        d: defaultDepth,\\r\\n                        w,\\r\\n                        x: hackThreadsCounts.threads,\\r\\n                        xh: hackThreadsCounts.homeThreads,\\r\\n                    });\\r\\n                }\\r\\n                else {\\r\\n                    //Print all kill all workers\\r\\n                    ns.tprint(ns.sprintf(\\\"Could not hackAnalyse %s: %s %s\\\", data.server.hostname, hackThreads, JSON.stringify(data.server)));\\r\\n                    killall(ns, { d: defaultDepth });\\r\\n                    ns.exit();\\r\\n                }\\r\\n            }\\r\\n            return true;\\r\\n        });\\r\\n        if (flags.p && !(await ns.prompt(\\\"Continue?\\\", { type: \\\"boolean\\\" }))) {\\r\\n            ns.exit();\\r\\n        }\\r\\n        await ns.sleep(1e3);\\r\\n    }\\r\\n}\\r\\nasync function walkAllHackableServer(ns, ...callbacks) {\\r\\n    const servers = await allHackableServersSorted(ns, \\\"money-desc\\\");\\r\\n    let shouldContinue = true;\\r\\n    while (servers.length) {\\r\\n        const server = servers.pop();\\r\\n        if (!server)\\r\\n            break;\\r\\n        if (!shouldContinue)\\r\\n            break;\\r\\n        const { hostname } = server;\\r\\n        const processes = (await ps(ns, { d: defaultDepth, p: false })).filter((process) => process.args?.[0] === hostname);\\r\\n        for (const callback of callbacks) {\\r\\n            shouldContinue = await callback({\\r\\n                server,\\r\\n                processes,\\r\\n                weaken: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedWeaken),\\r\\n                    serverMinSecurity: ns.getServerMinSecurityLevel(hostname),\\r\\n                    serverSecurity: ns.getServerSecurityLevel(hostname),\\r\\n                    shouldPerform: (data) => data.weaken.serverSecurity > data.weaken.serverMinSecurity,\\r\\n                },\\r\\n                grow: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedGrow),\\r\\n                    maxMoney: ns.getServerMaxMoney(hostname),\\r\\n                    money: ns.getServerMoneyAvailable(hostname),\\r\\n                    shouldPerform: (data) => data.grow.money < data.grow.maxMoney,\\r\\n                },\\r\\n                hack: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedHack),\\r\\n                    hackChance: ns.hackAnalyzeChance(hostname),\\r\\n                    shouldPerform: (data) => !!data.grow.money && data.hack.hackChance > 0,\\r\\n                },\\r\\n            });\\r\\n            if (!shouldContinue)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\nasync function allHackableServersSorted(ns, order) {\\r\\n    const hosts = [];\\r\\n    await walkDeepFirst(ns, defaultDepth, async (host) => {\\r\\n        hosts.push(host);\\r\\n    });\\r\\n    return hosts\\r\\n        .map(ns.getServer)\\r\\n        .filter((server) => server.hasAdminRights)\\r\\n        .filter((server) => (server.requiredHackingSkill || 0) <= ns.getHackingLevel())\\r\\n        .filter((server) => !!server.moneyMax)\\r\\n        .sort(({ moneyMax: moneyMaxA }, { moneyMax: moneyMaxB }) => order === \\\"money-asc\\\"\\r\\n        ? (moneyMaxB || 0) - (moneyMaxA || 0)\\r\\n        : (moneyMaxA || 0) - (moneyMaxB || 0));\\r\\n}\\r\\nfunction hackThreads(ns, data) {\\r\\n    return new ThreadCounts(Math.ceil(ns.hackAnalyzeThreads(data.server.hostname, data.grow.money * 0.6)), Math.ceil(ns.hackAnalyzeThreads(data.server.hostname, data.grow.money * 0.6)));\\r\\n}\\r\\nfunction weakenThreads(ns, data) {\\r\\n    return new ThreadCounts(getOptimalThreadsToWeaken(ns, data, getHomeCpuCores(ns)), getOptimalThreadsToWeaken(ns, data));\\r\\n}\\r\\nfunction getOptimalThreadsToWeaken(ns, data, cpuCores) {\\r\\n    const { serverSecurity, serverMinSecurity } = data.weaken;\\r\\n    const target = serverSecurity - serverMinSecurity;\\r\\n    let lowerBound = 0, upperBound = 100e3;\\r\\n    let threadCount = 0;\\r\\n    while (lowerBound !== upperBound) {\\r\\n        threadCount = Math.floor((upperBound - lowerBound) / 2 + lowerBound);\\r\\n        const actual = ns.weakenAnalyze(threadCount, cpuCores);\\r\\n        if (actual >= target && actual <= target + 1) {\\r\\n            break;\\r\\n        }\\r\\n        if (actual > target) {\\r\\n            upperBound = threadCount;\\r\\n            continue;\\r\\n        }\\r\\n        if (actual < target) {\\r\\n            lowerBound = threadCount;\\r\\n            continue;\\r\\n        }\\r\\n    }\\r\\n    return threadCount;\\r\\n}\\r\\nfunction growThreads(ns, data) {\\r\\n    const formulasEnabled = hasFormulas(ns);\\r\\n    const cpuCores = getHomeCpuCores(ns);\\r\\n    if (formulasEnabled) {\\r\\n        return new ThreadCounts(ns.formulas.hacking.growThreads(data.server, ns.getPlayer(), data.grow.maxMoney, cpuCores), ns.formulas.hacking.growThreads(data.server, ns.getPlayer(), data.grow.maxMoney));\\r\\n    }\\r\\n    return new ThreadCounts(data.grow.money\\r\\n        ? Math.ceil(ns.growthAnalyze(data.server.hostname, data.grow.maxMoney / data.grow.money, cpuCores))\\r\\n        : 100, data.grow.money\\r\\n        ? Math.ceil(ns.growthAnalyze(data.server.hostname, data.grow.maxMoney / data.grow.money))\\r\\n        : 100);\\r\\n}\\r\\nfunction getHomeCpuCores(ns) {\\r\\n    return ns.getServer(\\\"home\\\").cpuCores;\\r\\n}\\r\\n\",\"filename\":\"bot-hacking.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"node-0\",\"node-1\",\"node-2\",\"node-3\",\"node-4\",\"node-5\",\"node-6\",\"node-7\",\"node-8\",\"node-9\",\"node-10\",\"node-11\",\"node-12\",\"node-13\",\"node-14\",\"node-15\",\"node-16\",\"node-17\",\"node-18\",\"node-19\",\"node-20\",\"node-21\",\"node-22\",\"node-23\",\"node-24\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71385.80600000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4426.2099999993425,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"univ-energy\\\"]\",\"title\":\"lib/specialized-weaken.js univ-energy\",\"threads\":48,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.311,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2578.4100000000562,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"ecorp\\\"]\",\"title\":\"lib/specialized-weaken.js ecorp\",\"threads\":103,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"bot-hacking.js\",\"offlineExpGained\":265560436.6988246,\"offlineMoneyMade\":3463262090618.036,\"offlineRunningTime\":65010.462,\"onlineExpGained\":111295471.98531316,\"onlineMoneyMade\":897589183987.9531,\"onlineRunningTime\":2305.6099999999956,\"ramUsage\":18.15,\"server\":\"home\",\"scriptKey\":\"bot-hacking.js*[]\",\"title\":\"bot-hacking.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":716.61000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omnitek\\\"]\",\"title\":\"lib/specialized-grow.js omnitek\",\"threads\":397,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":656.6100000000176,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"nwo\\\"]\",\"title\":\"lib/specialized-grow.js nwo\",\"threads\":289,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":656.6100000000176,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"zb-def\\\"]\",\"title\":\"lib/specialized-grow.js zb-def\",\"threads\":452,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":656.6100000000176,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"defcomm\\\"]\",\"title\":\"lib/specialized-weaken.js defcomm\",\"threads\":353,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":596.610000000004,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"omnitek\\\"]\",\"title\":\"lib/specialized-weaken.js omnitek\",\"threads\":341,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":596.610000000004,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"infocomm\\\"]\",\"title\":\"lib/specialized-weaken.js infocomm\",\"threads\":231,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"deltaone\\\"]\",\"title\":\"lib/specialized-grow.js deltaone\",\"threads\":517,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":476.6099999999949,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"nwo\\\"]\",\"title\":\"lib/specialized-weaken.js nwo\",\"threads\":243,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.6099999999949,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"b-and-a\\\"]\",\"title\":\"lib/specialized-hack.js b-and-a\",\"threads\":1046,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.6099999999949,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"zb-institute\\\"]\",\"title\":\"lib/specialized-weaken.js zb-institute\",\"threads\":109,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.60999999999495,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"blade\\\"]\",\"title\":\"lib/specialized-hack.js blade\",\"threads\":529,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":11324,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236.60999999999814,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"nova-med\\\"]\",\"title\":\"lib/specialized-weaken.js nova-med\",\"threads\":146,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236.60999999999814,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"stormtech\\\"]\",\"title\":\"lib/specialized-grow.js stormtech\",\"threads\":2082,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236.60999999999814,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"helios\\\"]\",\"title\":\"lib/specialized-grow.js helios\",\"threads\":3475,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.6100000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"ecorp\\\"]\",\"title\":\"lib/specialized-hack.js ecorp\",\"threads\":6805,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.21000000000026,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"clarkinc\\\"]\",\"title\":\"lib/specialized-grow.js clarkinc\",\"threads\":2475,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":137.01000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"microdyne\\\"]\",\"title\":\"lib/specialized-grow.js microdyne\",\"threads\":313,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"netlink\\\"]\",\"title\":\"lib/specialized-grow.js netlink\",\"threads\":166,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":126.21000000000038,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"galactic-cyber\\\"]\",\"title\":\"lib/specialized-grow.js galactic-cyber\",\"threads\":52,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.21000000000038,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-grow.js unitalife\",\"threads\":38,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":121.81000000000039,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-hack.js titan-labs\",\"threads\":13,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":119.6100000000004,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"snap-fitness\\\"]\",\"title\":\"lib/specialized-hack.js snap-fitness\",\"threads\":238,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":114.21000000000042,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"powerhouse-fitness\\\"]\",\"title\":\"lib/specialized-grow.js powerhouse-fitness\",\"threads\":188,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000036,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"icarus\\\"]\",\"title\":\"lib/specialized-hack.js icarus\",\"threads\":207,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.61000000000011,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"rho-construction\\\"]\",\"title\":\"lib/specialized-grow.js rho-construction\",\"threads\":503,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.61000000000011,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"the-hub\\\"]\",\"title\":\"lib/specialized-weaken.js the-hub\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.61000000000013,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"applied-energetics\\\"]\",\"title\":\"lib/specialized-hack.js applied-energetics\",\"threads\":77,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.21000000000015,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"applied-energetics\\\"]\",\"title\":\"lib/specialized-grow.js applied-energetics\",\"threads\":410,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.01000000000015,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"lexo-corp\\\"]\",\"title\":\"lib/specialized-hack.js lexo-corp\",\"threads\":25,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.81000000000016,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-grow.js omnia\",\"threads\":1069,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.61000000000017,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"galactic-cyber\\\"]\",\"title\":\"lib/specialized-weaken.js galactic-cyber\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.21000000000018,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"lib/specialized-grow.js johnson-ortho\",\"threads\":155,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.01000000000018,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"nwo\\\"]\",\"title\":\"lib/specialized-hack.js nwo\",\"threads\":188,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.01000000000018,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"omnitek\\\"]\",\"title\":\"lib/specialized-hack.js omnitek\",\"threads\":150,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.61000000000007,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"catalyst\\\"]\",\"title\":\"lib/specialized-weaken.js catalyst\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.61000000000007,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"millenium-fitness\\\"]\",\"title\":\"lib/specialized-hack.js millenium-fitness\",\"threads\":25,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":53.61000000000007,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"zb-def\\\"]\",\"title\":\"lib/specialized-weaken.js zb-def\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000007,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"aerocorp\\\"]\",\"title\":\"lib/specialized-hack.js aerocorp\",\"threads\":163,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000007,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"defcomm\\\"]\",\"title\":\"lib/specialized-grow.js defcomm\",\"threads\":34,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000007,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"nova-med\\\"]\",\"title\":\"lib/specialized-hack.js nova-med\",\"threads\":39,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.61000000000007,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"johnson-ortho\\\"]\",\"title\":\"lib/specialized-weaken.js johnson-ortho\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.61000000000007,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"aerocorp\\\"]\",\"title\":\"lib/specialized-weaken.js aerocorp\",\"threads\":211,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.61000000000007,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"lib/specialized-weaken.js global-pharm\",\"threads\":109,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.61000000000007,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"alpha-ent\\\"]\",\"title\":\"lib/specialized-hack.js alpha-ent\",\"threads\":48,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.61000000000007,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"netlink\\\"]\",\"title\":\"lib/specialized-weaken.js netlink\",\"threads\":72,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000007,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"zeus-med\\\"]\",\"title\":\"lib/specialized-hack.js zeus-med\",\"threads\":136,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000007,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"zb-institute\\\"]\",\"title\":\"lib/specialized-hack.js zb-institute\",\"threads\":18,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.61000000000008,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-hack.js unitalife\",\"threads\":80,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.61000000000008,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"syscore\\\"]\",\"title\":\"lib/specialized-hack.js syscore\",\"threads\":26,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"lib/specialized-grow.js crush-fitness\",\"threads\":402,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.61000000000003,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"microdyne\\\"]\",\"title\":\"lib/specialized-hack.js microdyne\",\"threads\":25,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.809999999999995,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"powerhouse-fitness\\\"]\",\"title\":\"lib/specialized-hack.js powerhouse-fitness\",\"threads\":26,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.40999999999998,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"the-hub\\\"]\",\"title\":\"lib/specialized-grow.js the-hub\",\"threads\":381,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.609999999999975,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"rothman-uni\\\"]\",\"title\":\"lib/specialized-hack.js rothman-uni\",\"threads\":37,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.609999999999978,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"zb-def\\\"]\",\"title\":\"lib/specialized-hack.js zb-def\",\"threads\":73,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999978,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"global-pharm\\\"]\",\"title\":\"lib/specialized-grow.js global-pharm\",\"threads\":28,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999978,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"deltaone\\\"]\",\"title\":\"lib/specialized-hack.js deltaone\",\"threads\":87,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999978,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"netlink\\\"]\",\"title\":\"lib/specialized-hack.js netlink\",\"threads\":10,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999976,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":286,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.609999999999989,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"catalyst\\\"]\",\"title\":\"lib/specialized-hack.js catalyst\",\"threads\":42,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.609999999999989,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"phantasy\\\"]\",\"title\":\"lib/specialized-grow.js phantasy\",\"threads\":259,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.609999999999989,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"iron-gym\\\"]\",\"title\":\"lib/specialized-grow.js iron-gym\",\"threads\":379,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"rho-construction\\\"]\",\"title\":\"lib/specialized-hack.js rho-construction\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"summit-uni\\\"]\",\"title\":\"lib/specialized-hack.js summit-uni\",\"threads\":32,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"iron-gym\\\"]\",\"title\":\"lib/specialized-weaken.js iron-gym\",\"threads\":97,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"omega-net\\\"]\",\"title\":\"lib/specialized-hack.js omega-net\",\"threads\":30,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"7.2.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"ecorp\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"ecorp\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"ecorp\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"ecorp\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"ecorp\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"ecorp\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"ecorp\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"ecorp\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"ecorp\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"ecorp\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"ecorp\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"ecorp\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"ecorp\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"ecorp\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"ecorp\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"ecorp\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"ecorp\"}}]]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":69172669378,\"moneyMax\":1729316734450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1192,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"28.2.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"megacorp\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"megacorp\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"megacorp\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"megacorp\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"megacorp\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"megacorp\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"megacorp\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"megacorp\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"megacorp\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"megacorp\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"megacorp\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"megacorp\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"megacorp\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"megacorp\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"megacorp\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"megacorp\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"megacorp\"}}]]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43316173230,\"moneyMax\":1082904330750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1168,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"28.6.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"b-and-a\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"b-and-a\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"b-and-a\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"b-and-a\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"b-and-a\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"b-and-a\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"b-and-a\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"b-and-a\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"b-and-a\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"b-and-a\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"b-and-a\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"b-and-a\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"b-and-a\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"b-and-a\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"b-and-a\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"b-and-a\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"b-and-a\"}}]]},\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":85,\"hackDifficulty\":86.102,\"minDifficulty\":28,\"moneyAvailable\":24351437015.244648,\"moneyMax\":722029292675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1147,\"serverGrowth\":72,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"68.6.3.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"blade\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"blade\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"blade\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"blade\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"blade\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"blade\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"blade\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"blade\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"blade\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"blade\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"blade\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"blade\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"blade\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"blade\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"blade\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"blade\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":97.174,\"minDifficulty\":30,\"moneyAvailable\":4977016671.6686,\"moneyMax\":391017745800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1147,\"serverGrowth\":68,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":716.61000000002,\"ramUsage\":1.75,\"server\":\"blade\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omnitek\\\"]\",\"title\":\"lib/specialized-grow.js omnitek\",\"threads\":146,\"temporary\":false}}]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"31.8.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"nwo\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"nwo\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"nwo\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"nwo\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"nwo\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"nwo\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"nwo\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"nwo\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"nwo\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"nwo\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"nwo\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"nwo\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"nwo\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"nwo\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"nwo\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"nwo\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"nwo\"}}]]},\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":47.2705,\"minDifficulty\":33,\"moneyAvailable\":213911014351.06958,\"moneyMax\":949872938800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1053,\"serverGrowth\":93,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"81.1.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"clarkinc\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"clarkinc\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"clarkinc\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"clarkinc\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"clarkinc\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"clarkinc\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"clarkinc\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"clarkinc\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"clarkinc\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"clarkinc\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"clarkinc\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"clarkinc\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"clarkinc\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"clarkinc\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"clarkinc\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"clarkinc\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"clarkinc\"}}]]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":96.80199999999999,\"minDifficulty\":19,\"moneyAvailable\":66654.63529978017,\"moneyMax\":563213759075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1170,\"serverGrowth\":52,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"27.7.9.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"omnitek\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"omnitek\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"omnitek\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"omnitek\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"omnitek\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"omnitek\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"omnitek\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"omnitek\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"omnitek\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"omnitek\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"omnitek\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"omnitek\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"omnitek\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"omnitek\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"omnitek\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"omnitek\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":53.292000000000016,\"minDifficulty\":33,\"moneyAvailable\":111652312315.62007,\"moneyMax\":366617188650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":928,\"serverGrowth\":99,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"omnitek\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":30,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.6100000000002,\"ramUsage\":1.7,\"server\":\"omnitek\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"ecorp\\\"]\",\"title\":\"lib/specialized-hack.js ecorp\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.21000000000038,\"ramUsage\":1.75,\"server\":\"omnitek\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-grow.js unitalife\",\"threads\":74,\"temporary\":false}}]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"33.0.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"4sigma\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"4sigma\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"4sigma\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"4sigma\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"4sigma\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"4sigma\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"4sigma\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"4sigma\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"4sigma\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"4sigma\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"4sigma\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"4sigma\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"4sigma\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"4sigma\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"4sigma\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"4sigma\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"4sigma\"}}]]},\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":80.82200000000003,\"minDifficulty\":24,\"moneyAvailable\":9612847832.095346,\"moneyMax\":412210021150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1100,\"serverGrowth\":78,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"24.5.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"kuai-gong\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"kuai-gong\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"kuai-gong\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"kuai-gong\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"kuai-gong\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"kuai-gong\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"kuai-gong\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"kuai-gong\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"kuai-gong\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"kuai-gong\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"kuai-gong\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"kuai-gong\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"kuai-gong\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"kuai-gong\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"kuai-gong\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"kuai-gong\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"kuai-gong\"}}]]},\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":24081218562,\"moneyMax\":602030464050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1252,\"serverGrowth\":94,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"65.1.3.5\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"fulcrumtech\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"fulcrumtech\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"fulcrumtech\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"fulcrumtech\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"fulcrumtech\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"fulcrumtech\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"fulcrumtech\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"fulcrumtech\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"fulcrumtech\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"fulcrumtech\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"fulcrumtech\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"fulcrumtech\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"fulcrumtech\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"fulcrumtech\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"fulcrumtech\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"fulcrumtech\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"microdyne\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1634452160,\"moneyMax\":40861304000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1176,\"serverGrowth\":89,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":716.61000000002,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omnitek\\\"]\",\"title\":\"lib/specialized-grow.js omnitek\",\"threads\":128,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-grow.js titan-labs\",\"threads\":106,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.6099999999949,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-hack.js omnia\",\"threads\":82,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.60999999999495,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"blade\\\"]\",\"title\":\"lib/specialized-hack.js blade\",\"threads\":19,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":438,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":126.21000000000038,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"galactic-cyber\\\"]\",\"title\":\"lib/specialized-grow.js galactic-cyber\",\"threads\":246,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.81000000000016,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-grow.js omnia\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000017,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"defcomm\\\"]\",\"title\":\"lib/specialized-hack.js defcomm\",\"threads\":121,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.809999999999995,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"powerhouse-fitness\\\"]\",\"title\":\"lib/specialized-hack.js powerhouse-fitness\",\"threads\":36,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.609999999999989,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"iron-gym\\\"]\",\"title\":\"lib/specialized-grow.js iron-gym\",\"threads\":13,\"temporary\":false}}]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"39.0.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"fulcrumassets\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"fulcrumassets\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"fulcrumassets\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"fulcrumassets\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"fulcrumassets\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"fulcrumassets\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"fulcrumassets\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"fulcrumassets\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"fulcrumassets\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"fulcrumassets\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"fulcrumassets\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"fulcrumassets\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"fulcrumassets\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"fulcrumassets\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"fulcrumassets\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"fulcrumassets\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"fulcrumassets\"}}]]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1229,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"17.7.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"stormtech\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"stormtech\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"stormtech\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"stormtech\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"stormtech\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"stormtech\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"stormtech\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"stormtech\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"stormtech\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"stormtech\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"stormtech\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"stormtech\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"stormtech\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"stormtech\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"stormtech\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"stormtech\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"stormtech\"}}]]},\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":93.96600000000001,\"minDifficulty\":31,\"moneyAvailable\":8112993485.332377,\"moneyMax\":29671730775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":891,\"serverGrowth\":84,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"87.7.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"defcomm\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"defcomm\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"defcomm\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"defcomm\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"defcomm\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"defcomm\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"defcomm\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"defcomm\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"defcomm\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"defcomm\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"defcomm\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"defcomm\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"defcomm\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"defcomm\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"defcomm\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"defcomm\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"defcomm\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":58.26799999999997,\"minDifficulty\":32,\"moneyAvailable\":14930982690.514141,\"moneyMax\":20066688475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":911,\"serverGrowth\":57,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"86.3.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"infocomm\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"infocomm\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"infocomm\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"infocomm\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"infocomm\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"infocomm\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"infocomm\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"infocomm\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"infocomm\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"infocomm\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"infocomm\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"infocomm\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"infocomm\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"infocomm\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"infocomm\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"infocomm\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"infocomm\"}}]]},\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":37.49099999999999,\"minDifficulty\":24,\"moneyAvailable\":1654108944.257119,\"moneyMax\":18399818275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":945,\"serverGrowth\":39,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"70.1.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"helios\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"helios\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"helios\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"helios\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"helios\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"helios\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"helios\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"helios\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"helios\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"helios\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"helios\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"helios\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"helios\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"helios\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"helios\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"helios\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":94.03999999999999,\"minDifficulty\":31,\"moneyAvailable\":669869065.5777628,\"moneyMax\":14319052675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":843,\"serverGrowth\":73,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":716.61000000002,\"ramUsage\":1.75,\"server\":\"helios\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omnitek\\\"]\",\"title\":\"lib/specialized-grow.js omnitek\",\"threads\":36,\"temporary\":false}}]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"97.9.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"vitalife\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"vitalife\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"vitalife\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"vitalife\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"vitalife\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"vitalife\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"vitalife\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"vitalife\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"vitalife\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"vitalife\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"vitalife\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"vitalife\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"vitalife\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"vitalife\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"vitalife\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"vitalife\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":86.266375,\"minDifficulty\":27,\"moneyAvailable\":160951410.23920545,\"moneyMax\":18785986275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":819,\"serverGrowth\":72,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":716.61000000002,\"ramUsage\":1.75,\"server\":\"vitalife\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omnitek\\\"]\",\"title\":\"lib/specialized-grow.js omnitek\",\"threads\":9,\"temporary\":false}}]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"67.7.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"icarus\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"icarus\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"icarus\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"icarus\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"icarus\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"icarus\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"icarus\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"icarus\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"icarus\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"icarus\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"icarus\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"icarus\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"icarus\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"icarus\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"icarus\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"icarus\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"icarus\"}}]]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":77.72000000000001,\"minDifficulty\":30,\"moneyAvailable\":171613213.88158974,\"moneyMax\":24546867200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":857,\"serverGrowth\":91,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"11.7.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"univ-energy\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"univ-energy\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"univ-energy\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"univ-energy\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"univ-energy\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"univ-energy\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"univ-energy\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"univ-energy\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"univ-energy\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"univ-energy\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"univ-energy\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"univ-energy\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"univ-energy\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"univ-energy\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"univ-energy\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"univ-energy\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":100,\"minDifficulty\":30,\"moneyAvailable\":9338805612.56841,\"moneyMax\":28761917750,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":885,\"serverGrowth\":85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"univ-energy\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":9,\"temporary\":false}}]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"14.7.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"titan-labs\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"titan-labs\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"titan-labs\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"titan-labs\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"titan-labs\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"titan-labs\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"titan-labs\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"titan-labs\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"titan-labs\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"titan-labs\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"titan-labs\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"titan-labs\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"titan-labs\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"titan-labs\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"titan-labs\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"titan-labs\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":54.196999999999996,\"minDifficulty\":26,\"moneyAvailable\":485735601.17638516,\"moneyMax\":19170585975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":61,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.21000000000038,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-grow.js unitalife\",\"threads\":18,\"temporary\":false}}]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"73.9.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"microdyne\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"microdyne\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"microdyne\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"microdyne\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"microdyne\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"microdyne\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"microdyne\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"microdyne\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"microdyne\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"microdyne\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"microdyne\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"microdyne\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"microdyne\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"microdyne\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"microdyne\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"microdyne\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":33.01737500000001,\"minDifficulty\":25,\"moneyAvailable\":6464140193.712395,\"moneyMax\":15808913575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":813,\"serverGrowth\":82,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"microdyne\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":13,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000017,\"ramUsage\":1.7,\"server\":\"microdyne\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"defcomm\\\"]\",\"title\":\"lib/specialized-hack.js defcomm\",\"threads\":5,\"temporary\":false}}]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"86.9.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"taiyang-digital\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"taiyang-digital\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"taiyang-digital\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"taiyang-digital\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"taiyang-digital\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"taiyang-digital\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"taiyang-digital\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"taiyang-digital\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"taiyang-digital\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"taiyang-digital\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"taiyang-digital\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"taiyang-digital\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"taiyang-digital\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"taiyang-digital\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"taiyang-digital\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"taiyang-digital\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"taiyang-digital\"}}]]},\"serversOnNetwork\":[\"univ-energy\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":50.42075000000003,\"minDifficulty\":27,\"moneyAvailable\":10824263919.142786,\"moneyMax\":22066924825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":891,\"serverGrowth\":78,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"0.9.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"galactic-cyber\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"galactic-cyber\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"galactic-cyber\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"galactic-cyber\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"galactic-cyber\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"galactic-cyber\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"galactic-cyber\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"galactic-cyber\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"galactic-cyber\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"galactic-cyber\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"galactic-cyber\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"galactic-cyber\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"galactic-cyber\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"galactic-cyber\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"galactic-cyber\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"galactic-cyber\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"galactic-cyber\"}}]]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":20.83987499999998,\"minDifficulty\":20,\"moneyAvailable\":6941502588.785635,\"moneyMax\":20347310500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":75,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"46.0.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"aerocorp\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"aerocorp\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"aerocorp\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"aerocorp\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"aerocorp\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"aerocorp\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"aerocorp\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"aerocorp\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"aerocorp\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"aerocorp\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"aerocorp\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"aerocorp\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"aerocorp\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"aerocorp\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"aerocorp\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"aerocorp\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"aerocorp\"}}]]},\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":41.194625,\"minDifficulty\":27,\"moneyAvailable\":27411223375,\"moneyMax\":27411223375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":922,\"serverGrowth\":57,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"6.1.0.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"omnia\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"omnia\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"omnia\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"omnia\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"omnia\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"omnia\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"omnia\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"omnia\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"omnia\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"omnia\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"omnia\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"omnia\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"omnia\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"omnia\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"omnia\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"omnia\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"aerocorp\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":100,\"minDifficulty\":30,\"moneyAvailable\":2524134256.9824185,\"moneyMax\":24301386500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":936,\"serverGrowth\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.6100000000002,\"ramUsage\":1.7,\"server\":\"omnia\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"ecorp\\\"]\",\"title\":\"lib/specialized-hack.js ecorp\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000036,\"ramUsage\":1.7,\"server\":\"omnia\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"icarus\\\"]\",\"title\":\"lib/specialized-hack.js icarus\",\"threads\":14,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000017,\"ramUsage\":1.7,\"server\":\"omnia\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"defcomm\\\"]\",\"title\":\"lib/specialized-hack.js defcomm\",\"threads\":17,\"temporary\":false}}]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"47.6.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"zb-def\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"zb-def\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"zb-def\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"zb-def\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"zb-def\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"zb-def\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"zb-def\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"zb-def\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"zb-def\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"zb-def\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"zb-def\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"zb-def\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"zb-def\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"zb-def\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"zb-def\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"zb-def\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":22.61075000000001,\"minDifficulty\":22,\"moneyAvailable\":3145073040.848221,\"moneyMax\":26091244500,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":821,\"serverGrowth\":74,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"38.9.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"applied-energetics\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"applied-energetics\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"applied-energetics\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"applied-energetics\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"applied-energetics\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"applied-energetics\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"applied-energetics\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"applied-energetics\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"applied-energetics\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"applied-energetics\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"applied-energetics\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"applied-energetics\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"applied-energetics\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"applied-energetics\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"applied-energetics\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"applied-energetics\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"applied-energetics\"}}]]},\"serversOnNetwork\":[\"taiyang-digital\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":21.869999999999983,\"minDifficulty\":20,\"moneyAvailable\":7832406045.440443,\"moneyMax\":17894440875,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":847,\"serverGrowth\":72,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"62.3.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"solaris\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"solaris\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"solaris\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"solaris\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"solaris\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"solaris\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"solaris\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"solaris\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"solaris\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"solaris\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"solaris\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"solaris\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"solaris\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"solaris\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"solaris\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"solaris\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":43.346000000000004,\"minDifficulty\":26,\"moneyAvailable\":17527715850,\"moneyMax\":17527715850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":848,\"serverGrowth\":76,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":716.61000000002,\"ramUsage\":1.75,\"server\":\"solaris\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omnitek\\\"]\",\"title\":\"lib/specialized-grow.js omnitek\",\"threads\":18,\"temporary\":false}}]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"11.3.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"deltaone\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"deltaone\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"deltaone\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"deltaone\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"deltaone\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"deltaone\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"deltaone\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"deltaone\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"deltaone\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"deltaone\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"deltaone\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"deltaone\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"deltaone\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"deltaone\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"deltaone\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"deltaone\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"deltaone\"}}]]},\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":36.31550000000001,\"minDifficulty\":25,\"moneyAvailable\":6694943835.535553,\"moneyMax\":34137770750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":810,\"serverGrowth\":68,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"69.3.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"global-pharm\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"global-pharm\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"global-pharm\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"global-pharm\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"global-pharm\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"global-pharm\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"global-pharm\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"global-pharm\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"global-pharm\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"global-pharm\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"global-pharm\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"global-pharm\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"global-pharm\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"global-pharm\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"global-pharm\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"global-pharm\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":33.126,\"minDifficulty\":27,\"moneyAvailable\":29215315165.65454,\"moneyMax\":42217870900,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":841,\"serverGrowth\":80,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-grow.js titan-labs\",\"threads\":9,\"temporary\":false}}]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-263679.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"wYY888QQQQQQywwwwwwwwwwxxShyyyyyyyyyyyyyy6MMMMMMMMMMGGBBUUUUUUUUXa5cc0\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"59.5.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"nova-med\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"nova-med\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"nova-med\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"nova-med\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"nova-med\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"nova-med\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"nova-med\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"nova-med\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"nova-med\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"nova-med\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"nova-med\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"nova-med\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"nova-med\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"nova-med\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"nova-med\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"nova-med\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":33.280250000000024,\"minDifficulty\":25,\"moneyAvailable\":14440406267.16372,\"moneyMax\":30350196975,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":815,\"serverGrowth\":77,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"34.0.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"zeus-med\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"zeus-med\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"zeus-med\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"zeus-med\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"zeus-med\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"zeus-med\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"zeus-med\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"zeus-med\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"zeus-med\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"zeus-med\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"zeus-med\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"zeus-med\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"zeus-med\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"zeus-med\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"zeus-med\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"zeus-med\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"zeus-med\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":57.417999999999985,\"minDifficulty\":26,\"moneyAvailable\":12747550820.482899,\"moneyMax\":34877633250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":836,\"serverGrowth\":75,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"21.3.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"unitalife\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"unitalife\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"unitalife\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"unitalife\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"unitalife\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"unitalife\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"unitalife\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"unitalife\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"unitalife\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"unitalife\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"unitalife\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"unitalife\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"unitalife\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"unitalife\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"unitalife\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"unitalife\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"aerocorp\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":31.579999999999984,\"minDifficulty\":24,\"moneyAvailable\":13108374559.0383,\"moneyMax\":25020897150,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":804,\"serverGrowth\":74,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"unitalife\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":18,\"temporary\":false}}]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"92.7.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"lexo-corp\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"lexo-corp\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"lexo-corp\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"lexo-corp\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"lexo-corp\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"lexo-corp\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"lexo-corp\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"lexo-corp\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"lexo-corp\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"lexo-corp\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"lexo-corp\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"lexo-corp\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"lexo-corp\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"lexo-corp\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"lexo-corp\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"lexo-corp\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":30.342000000000027,\"minDifficulty\":25,\"moneyAvailable\":4981826640.112648,\"moneyMax\":19567156450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":695,\"serverGrowth\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236.60999999999814,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"helios\\\"]\",\"title\":\"lib/specialized-grow.js helios\",\"threads\":18,\"temporary\":false}}]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"75.1.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"rho-construction\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"rho-construction\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"rho-construction\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"rho-construction\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"rho-construction\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"rho-construction\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"rho-construction\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"rho-construction\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"rho-construction\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"rho-construction\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"rho-construction\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"rho-construction\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"rho-construction\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"rho-construction\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"rho-construction\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"rho-construction\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":17.780625000000015,\"minDifficulty\":16,\"moneyAvailable\":3374419606.433666,\"moneyMax\":14742194375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":521,\"serverGrowth\":43,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"rho-construction\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":20,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.21000000000038,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-grow.js unitalife\",\"threads\":16,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000036,\"ramUsage\":1.7,\"server\":\"rho-construction\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"icarus\\\"]\",\"title\":\"lib/specialized-hack.js icarus\",\"threads\":1,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"29.7.8.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"alpha-ent\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"alpha-ent\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"alpha-ent\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"alpha-ent\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"alpha-ent\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"alpha-ent\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"alpha-ent\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"alpha-ent\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"alpha-ent\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"alpha-ent\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"alpha-ent\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"alpha-ent\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"alpha-ent\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"alpha-ent\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"alpha-ent\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"alpha-ent\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":20.306875000000005,\"minDifficulty\":19,\"moneyAvailable\":3045350311.482472,\"moneyMax\":15885188750,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":572,\"serverGrowth\":60,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":75,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"87.9.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"aevum-police\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"aevum-police\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"aevum-police\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"aevum-police\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"aevum-police\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"aevum-police\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"aevum-police\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"aevum-police\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"aevum-police\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"aevum-police\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"aevum-police\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"aevum-police\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"aevum-police\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"aevum-police\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"aevum-police\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"aevum-police\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":28.512,\"minDifficulty\":24,\"moneyAvailable\":2656613846.1729336,\"moneyMax\":7736673175,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":407,\"serverGrowth\":46,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-grow.js titan-labs\",\"threads\":18,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"14.4.7.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"rothman-uni\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"rothman-uni\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"rothman-uni\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"rothman-uni\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"rothman-uni\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"rothman-uni\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"rothman-uni\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"rothman-uni\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"rothman-uni\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"rothman-uni\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"rothman-uni\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"rothman-uni\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"rothman-uni\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"rothman-uni\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"rothman-uni\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"rothman-uni\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"computek\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":17.600000000000005,\"minDifficulty\":16,\"moneyAvailable\":1285361525.6781259,\"moneyMax\":5285394250,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":376,\"serverGrowth\":44,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":30,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":121.81000000000039,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-hack.js titan-labs\",\"threads\":15,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000036,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"icarus\\\"]\",\"title\":\"lib/specialized-hack.js icarus\",\"threads\":30,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"80.2.8.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"zb-institute\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"zb-institute\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"zb-institute\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"zb-institute\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"zb-institute\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"zb-institute\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"zb-institute\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"zb-institute\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"zb-institute\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"zb-institute\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"zb-institute\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"zb-institute\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"zb-institute\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"zb-institute\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"zb-institute\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"zb-institute\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"netlink\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":32.34375,\"minDifficulty\":25,\"moneyAvailable\":7001199517.19573,\"moneyMax\":25860928975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":741,\"serverGrowth\":81,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"zb-institute\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":21,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236.60999999999814,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"helios\\\"]\",\"title\":\"lib/specialized-grow.js helios\",\"threads\":10,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000036,\"ramUsage\":1.7,\"server\":\"zb-institute\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"icarus\\\"]\",\"title\":\"lib/specialized-hack.js icarus\",\"threads\":6,\"temporary\":false}}]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"20.5.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"summit-uni\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"summit-uni\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"summit-uni\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"summit-uni\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"summit-uni\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"summit-uni\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"summit-uni\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"summit-uni\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"summit-uni\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"summit-uni\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"summit-uni\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"summit-uni\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"summit-uni\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"summit-uni\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"summit-uni\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"summit-uni\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":20.483250000000005,\"minDifficulty\":17,\"moneyAvailable\":1689783291.949202,\"moneyMax\":6257871875,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":452,\"serverGrowth\":51,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-grow.js titan-labs\",\"threads\":36,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"88.4.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"syscore\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"syscore\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"syscore\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"syscore\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"syscore\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"syscore\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"syscore\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"syscore\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"syscore\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"syscore\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"syscore\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"syscore\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"syscore\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"syscore\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"syscore\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"syscore\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":21.671625000000027,\"minDifficulty\":20,\"moneyAvailable\":1918912935.9339051,\"moneyMax\":10050289375,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":589,\"serverGrowth\":70,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"5.0.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"catalyst\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"catalyst\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"catalyst\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"catalyst\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"catalyst\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"catalyst\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"catalyst\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"catalyst\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"catalyst\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"catalyst\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"catalyst\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"catalyst\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"catalyst\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"catalyst\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"catalyst\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"catalyst\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":21.178,\"minDifficulty\":21,\"moneyAvailable\":336246609.23197013,\"moneyMax\":9584286225,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":439,\"serverGrowth\":51,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.60999999999495,\"ramUsage\":1.7,\"server\":\"catalyst\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"blade\\\"]\",\"title\":\"lib/specialized-hack.js blade\",\"threads\":10,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"catalyst\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236.60999999999814,\"ramUsage\":1.75,\"server\":\"catalyst\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"helios\\\"]\",\"title\":\"lib/specialized-grow.js helios\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.21000000000038,\"ramUsage\":1.75,\"server\":\"catalyst\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-grow.js unitalife\",\"threads\":23,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"99.4.8.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"the-hub\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"the-hub\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"the-hub\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"the-hub\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"the-hub\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"the-hub\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"the-hub\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"the-hub\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"the-hub\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"the-hub\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"the-hub\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"the-hub\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"the-hub\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"the-hub\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"the-hub\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"the-hub\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":17.857000000000003,\"minDifficulty\":14,\"moneyAvailable\":1027332628.7514368,\"moneyMax\":4024877750,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":313,\"serverGrowth\":46,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\"the-hub\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-grow.js titan-labs\",\"threads\":26,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.6099999999949,\"ramUsage\":1.7,\"server\":\"the-hub\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-hack.js omnia\",\"threads\":9,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"the-hub\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":1,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"80.3.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"computek\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"computek\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"computek\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"computek\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"computek\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"computek\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"computek\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"computek\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"computek\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"computek\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"computek\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"computek\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"computek\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"computek\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"computek\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"computek\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":20.354000000000006,\"minDifficulty\":19,\"moneyAvailable\":983243761.7850766,\"moneyMax\":5624429350,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":348,\"serverGrowth\":62,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"6.7.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"netlink\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"netlink\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"netlink\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"netlink\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"netlink\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"netlink\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"netlink\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"netlink\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"netlink\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"netlink\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"netlink\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"netlink\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"netlink\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"netlink\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"netlink\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"netlink\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":28.519375000000032,\"minDifficulty\":25,\"moneyAvailable\":1684474086.5831325,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":391,\"serverGrowth\":50,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000036,\"ramUsage\":1.7,\"server\":\"netlink\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"icarus\\\"]\",\"title\":\"lib/specialized-hack.js icarus\",\"threads\":9,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"11.4.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"johnson-ortho\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"johnson-ortho\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"johnson-ortho\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"johnson-ortho\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"johnson-ortho\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"johnson-ortho\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"johnson-ortho\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"johnson-ortho\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"johnson-ortho\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"johnson-ortho\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"johnson-ortho\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"johnson-ortho\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"johnson-ortho\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"johnson-ortho\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"johnson-ortho\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"johnson-ortho\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":18.524874999999998,\"minDifficulty\":18,\"moneyAvailable\":217804962.26105034,\"moneyMax\":1957809500,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":281,\"serverGrowth\":46,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"42.6.4.0\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"n00dles\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"n00dles\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"n00dles\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"n00dles\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"n00dles\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"n00dles\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"n00dles\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"n00dles\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"n00dles\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"n00dles\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"n00dles\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"n00dles\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"n00dles\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"n00dles\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"n00dles\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"n00dles\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.1580000000000001,\"minDifficulty\":1,\"moneyAvailable\":399895.0736217349,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"n00dles\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"44.6.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"foodnstuff\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"foodnstuff\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"foodnstuff\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"foodnstuff\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"foodnstuff\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"foodnstuff\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"foodnstuff\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"foodnstuff\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"foodnstuff\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"foodnstuff\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"foodnstuff\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"foodnstuff\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"foodnstuff\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"foodnstuff\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"foodnstuff\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"foodnstuff\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":30.96800000000001,\"minDifficulty\":3,\"moneyAvailable\":26441287.59702228,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":9,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"8.7.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":6.5695000000000014,\"minDifficulty\":3,\"moneyAvailable\":19017313.54748531,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.60999999999495,\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"blade\\\"]\",\"title\":\"lib/specialized-hack.js blade\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":5,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"55.8.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"joesguns\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"joesguns\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"joesguns\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"joesguns\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"joesguns\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"joesguns\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"joesguns\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"joesguns\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"joesguns\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"joesguns\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"joesguns\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"joesguns\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"joesguns\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"joesguns\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"joesguns\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"joesguns\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":7.529500000000155,\"minDifficulty\":5,\"moneyAvailable\":21064075.09398254,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.21000000000038,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-grow.js unitalife\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"52.7.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"zer0\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"zer0\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"zer0\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"zer0\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"zer0\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"zer0\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"zer0\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"zer0\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"zer0\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"zer0\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"zer0\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"zer0\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"zer0\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"zer0\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"zer0\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"zer0\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":11.518499999999994,\"minDifficulty\":8,\"moneyAvailable\":47775263.11101691,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"zer0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.21000000000038,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-grow.js unitalife\",\"threads\":16,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"69.5.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"nectar-net\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"nectar-net\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"nectar-net\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"nectar-net\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"nectar-net\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"nectar-net\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"nectar-net\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"nectar-net\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"nectar-net\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"nectar-net\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"nectar-net\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"nectar-net\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"nectar-net\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"nectar-net\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"nectar-net\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"nectar-net\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":10.640000000000004,\"minDifficulty\":7,\"moneyAvailable\":18221498.169069625,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"nectar-net\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"81.7.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"neo-net\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"neo-net\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"neo-net\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"neo-net\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"neo-net\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"neo-net\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"neo-net\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"neo-net\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"neo-net\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"neo-net\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"neo-net\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"neo-net\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"neo-net\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"neo-net\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"neo-net\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"neo-net\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":13.78925,\"minDifficulty\":8,\"moneyAvailable\":46664366.20472827,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"neo-net\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":15,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000036,\"ramUsage\":1.7,\"server\":\"neo-net\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"icarus\\\"]\",\"title\":\"lib/specialized-hack.js icarus\",\"threads\":3,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"29.3.9.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"silver-helix\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"silver-helix\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"silver-helix\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"silver-helix\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"silver-helix\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"silver-helix\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"silver-helix\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"silver-helix\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"silver-helix\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"silver-helix\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"silver-helix\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"silver-helix\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"silver-helix\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"silver-helix\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"silver-helix\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"silver-helix\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":18.001999999999992,\"minDifficulty\":10,\"moneyAvailable\":318447801.0618632,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.697,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2779.010000000103,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"fulcrumtech\\\"]\",\"title\":\"lib/specialized-weaken.js fulcrumtech\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-grow.js titan-labs\",\"threads\":29,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.6099999999949,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-hack.js omnia\",\"threads\":6,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"92.9.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":9.69712500000002,\"minDifficulty\":5,\"moneyAvailable\":19019027.436460514,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.21000000000038,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-grow.js unitalife\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"66.4.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.611999999999992,\"minDifficulty\":5,\"moneyAvailable\":15424948.541995214,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.21000000000038,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-grow.js unitalife\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-918150-TheBlackHand.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[13,27,17,8,26,6,39,12,17,40,2],[9,40,45,29,48,16,44,26,47,12,2],[35,31,34,41,20,49,10,2,10,22,34],[47,25,39,43,41,30,32,28,24,47,2],[50,3,5,10,44,43,26,29,24,18,21],[40,49,27,21,4,26,47,20,2,34,18],[4,7,20,3,10,34,24,19,17,50,28],[1,45,34,14,1,31,14,41,14,27,10],[20,49,36,42,13,17,47,26,32,19,9],[21,5,2,43,29,31,11,36,46,15,39],[42,29,6,24,17,35,29,18,49,44,38]],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"98.8.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"phantasy\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"phantasy\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"phantasy\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"phantasy\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"phantasy\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"phantasy\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"phantasy\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"phantasy\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"phantasy\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"phantasy\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"phantasy\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"phantasy\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"phantasy\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"phantasy\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"phantasy\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"phantasy\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":10.574499999999999,\"minDifficulty\":7,\"moneyAvailable\":158803314.35523042,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"phantasy\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":18,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"44.4.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"max-hardware\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"max-hardware\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"max-hardware\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"max-hardware\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"max-hardware\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"max-hardware\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"max-hardware\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"max-hardware\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"max-hardware\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"max-hardware\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"max-hardware\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"max-hardware\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"max-hardware\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"max-hardware\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"max-hardware\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"max-hardware\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":7.822999999999986,\"minDifficulty\":5,\"moneyAvailable\":83426890.85572554,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":125.21000000000038,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-grow.js unitalife\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":121.81000000000039,\"ramUsage\":1.7,\"server\":\"max-hardware\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-hack.js titan-labs\",\"threads\":10,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"1.2.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"omega-net\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"omega-net\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"omega-net\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"omega-net\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"omega-net\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"omega-net\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"omega-net\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"omega-net\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"omega-net\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"omega-net\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"omega-net\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"omega-net\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"omega-net\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"omega-net\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"omega-net\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"omega-net\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":12.534000000000002,\"minDifficulty\":10,\"moneyAvailable\":181686798.20711303,\"moneyMax\":1506192775,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":195,\"serverGrowth\":39,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-grow.js titan-labs\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"omega-net\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":14,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"81.0.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"crush-fitness\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"crush-fitness\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"crush-fitness\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"crush-fitness\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"crush-fitness\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"crush-fitness\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"crush-fitness\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"crush-fitness\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"crush-fitness\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"crush-fitness\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"crush-fitness\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"crush-fitness\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"crush-fitness\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"crush-fitness\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"crush-fitness\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"crush-fitness\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":18.89925000000004,\"minDifficulty\":14,\"moneyAvailable\":190562358.85787857,\"moneyMax\":1054756775,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":234,\"serverGrowth\":33,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"71.9.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"iron-gym\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"iron-gym\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"iron-gym\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"iron-gym\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"iron-gym\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"iron-gym\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"iron-gym\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"iron-gym\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"iron-gym\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"iron-gym\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"iron-gym\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"iron-gym\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"iron-gym\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"iron-gym\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"iron-gym\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"iron-gym\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":18.368499999999983,\"minDifficulty\":10,\"moneyAvailable\":172428513.70631978,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-grow.js titan-labs\",\"threads\":18,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"82.4.0.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"millenium-fitness\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"millenium-fitness\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"millenium-fitness\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"millenium-fitness\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"millenium-fitness\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"millenium-fitness\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"millenium-fitness\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"millenium-fitness\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"millenium-fitness\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"millenium-fitness\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"millenium-fitness\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"millenium-fitness\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"millenium-fitness\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"millenium-fitness\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"millenium-fitness\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"millenium-fitness\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":40.684,\"minDifficulty\":18,\"moneyAvailable\":598716624.7758334,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":507,\"serverGrowth\":29,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-grow.js titan-labs\",\"threads\":36,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-595022.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,1],[1,0,0,0,1,1,0],[0,0,0,0,1,0,0],[0,0,0,1,0,0,0],[0,0,0,1,1,0,0],[1,0,1,0,0,1,0],[1,0,0,0,0,0,0],[0,1,0,0,0,0,0],[0,1,0,0,0,1,0],[1,0,0,0,1,0,0],[0,1,1,0,0,0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"5.9.4.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":25.559249999999974,\"minDifficulty\":18,\"moneyAvailable\":5585965275.37952,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1047,\"serverGrowth\":51,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":716.61000000002,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omnitek\\\"]\",\"title\":\"lib/specialized-grow.js omnitek\",\"threads\":36,\"temporary\":false}}]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"83.9.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"snap-fitness\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"snap-fitness\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"snap-fitness\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"snap-fitness\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"snap-fitness\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"snap-fitness\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"snap-fitness\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"snap-fitness\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"snap-fitness\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"snap-fitness\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"snap-fitness\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"snap-fitness\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"snap-fitness\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"snap-fitness\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"snap-fitness\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"snap-fitness\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":78.49600000000002,\"minDifficulty\":20,\"moneyAvailable\":2303046781.056208,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":769,\"serverGrowth\":45,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"7.4.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"run4theh111z\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"run4theh111z\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"run4theh111z\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"run4theh111z\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"run4theh111z\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"run4theh111z\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"run4theh111z\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"run4theh111z\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"run4theh111z\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"run4theh111z\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"run4theh111z\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"run4theh111z\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"run4theh111z\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"run4theh111z\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"run4theh111z\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"run4theh111z\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":518,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236.60999999999814,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"helios\\\"]\",\"title\":\"lib/specialized-grow.js helios\",\"threads\":18,\"temporary\":false}}]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"41.5.8.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"I.I.I.I\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"I.I.I.I\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"I.I.I.I\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"I.I.I.I\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"I.I.I.I\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"I.I.I.I\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"I.I.I.I\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"I.I.I.I\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"I.I.I.I\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"I.I.I.I\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"I.I.I.I\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"I.I.I.I\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"I.I.I.I\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"I.I.I.I\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"I.I.I.I\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"I.I.I.I\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":351,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-grow.js titan-labs\",\"threads\":133,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.60999999999495,\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"blade\\\"]\",\"title\":\"lib/specialized-hack.js blade\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.6100000000002,\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"ecorp\\\"]\",\"title\":\"lib/specialized-hack.js ecorp\",\"threads\":6,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"43.3.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"avmnite-02h\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"avmnite-02h\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"avmnite-02h\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"avmnite-02h\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"avmnite-02h\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"avmnite-02h\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"avmnite-02h\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"avmnite-02h\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"avmnite-02h\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"avmnite-02h\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"avmnite-02h\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"avmnite-02h\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"avmnite-02h\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"avmnite-02h\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"avmnite-02h\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"avmnite-02h\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":217,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-grow.js titan-labs\",\"threads\":32,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.6099999999949,\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-hack.js omnia\",\"threads\":4,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"87.0.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\".\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\".\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\".\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\".\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\".\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\".\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\".\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\".\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\".\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\".\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\".\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\".\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\".\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\".\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\".\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\".\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":539,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\".\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-grow.js titan-labs\",\"threads\":9,\"temporary\":false}}]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"25.9.0.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"CSEC\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"CSEC\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"CSEC\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"CSEC\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"CSEC\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"CSEC\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"CSEC\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"CSEC\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"CSEC\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"CSEC\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"CSEC\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"CSEC\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"CSEC\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"CSEC\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"CSEC\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"CSEC\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":53,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-grow.js titan-labs\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"73.5.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"The-Cave\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"The-Cave\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"The-Cave\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"The-Cave\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"The-Cave\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"The-Cave\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"The-Cave\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"The-Cave\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"The-Cave\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"The-Cave\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"The-Cave\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"The-Cave\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"The-Cave\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"The-Cave\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"The-Cave\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"The-Cave\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"The-Cave\"}}]]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"72.7.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"8.2.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"darkweb\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"darkweb\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"darkweb\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"darkweb\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"darkweb\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"darkweb\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"darkweb\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"darkweb\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"darkweb\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"darkweb\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"darkweb\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"darkweb\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"darkweb\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"darkweb\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"darkweb\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"darkweb\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"darkweb\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-0\",\"httpPortOpen\":false,\"ip\":\"40.1.5.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-0\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-0\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-0\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-0\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-0\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-0\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-0\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-0\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-0\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-0\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-0\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-0\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-0\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-0\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-0\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-0\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.32400000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4426.2099999993425,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"univ-energy\\\"]\",\"title\":\"lib/specialized-weaken.js univ-energy\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.779,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2879.6100000001265,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-weaken.js megacorp\",\"threads\":1329,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.779,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2879.6100000001265,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-grow.js megacorp\",\"threads\":5491,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.779,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2864.2100000001224,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"clarkinc\\\"]\",\"title\":\"lib/specialized-weaken.js clarkinc\",\"threads\":768,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.779,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2779.010000000103,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"fulcrumtech\\\"]\",\"title\":\"lib/specialized-weaken.js fulcrumtech\",\"threads\":118,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.779,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2578.4100000000562,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"ecorp\\\"]\",\"title\":\"lib/specialized-weaken.js ecorp\",\"threads\":38,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.784,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2267.409999999987,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"fulcrumassets\\\"]\",\"title\":\"lib/specialized-weaken.js fulcrumassets\",\"threads\":1329,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.784,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2267.409999999987,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"fulcrumassets\\\"]\",\"title\":\"lib/specialized-grow.js fulcrumassets\",\"threads\":477641,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":55511.072,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2078.210000000035,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"kuai-gong\\\"]\",\"title\":\"lib/specialized-weaken.js kuai-gong\",\"threads\":1268,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":55511.072,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2078.210000000035,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"kuai-gong\\\"]\",\"title\":\"lib/specialized-grow.js kuai-gong\",\"threads\":5544,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":896.61000000002,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"icarus\\\"]\",\"title\":\"lib/specialized-grow.js icarus\",\"threads\":7406,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":776.61000000002,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"icarus\\\"]\",\"title\":\"lib/specialized-weaken.js icarus\",\"threads\":963,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":776.61000000002,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"infocomm\\\"]\",\"title\":\"lib/specialized-grow.js infocomm\",\"threads\":1894,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":716.61000000002,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omnitek\\\"]\",\"title\":\"lib/specialized-grow.js omnitek\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":716.61000000002,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"zeus-med\\\"]\",\"title\":\"lib/specialized-weaken.js zeus-med\",\"threads\":487,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":716.61000000002,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"taiyang-digital\\\"]\",\"title\":\"lib/specialized-weaken.js taiyang-digital\",\"threads\":414,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-grow.js titan-labs\",\"threads\":5542,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"snap-fitness\\\"]\",\"title\":\"lib/specialized-grow.js snap-fitness\",\"threads\":2514,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.6099999999949,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-hack.js omnia\",\"threads\":2823,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.6099999999949,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"powerhouse-fitness\\\"]\",\"title\":\"lib/specialized-weaken.js powerhouse-fitness\",\"threads\":133,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.60999999999495,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"blade\\\"]\",\"title\":\"lib/specialized-hack.js blade\",\"threads\":4571,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.60999999999495,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"fulcrumtech\\\"]\",\"title\":\"lib/specialized-hack.js fulcrumtech\",\"threads\":1410,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.60999999999495,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-weaken.js unitalife\",\"threads\":121,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.60999999999495,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"lexo-corp\\\"]\",\"title\":\"lib/specialized-grow.js lexo-corp\",\"threads\":1409,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.60999999999495,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"vitalife\\\"]\",\"title\":\"lib/specialized-grow.js vitalife\",\"threads\":4331,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":4129,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"deltaone\\\"]\",\"title\":\"lib/specialized-weaken.js deltaone\",\"threads\":219,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-weaken.js titan-labs\",\"threads\":560,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":296.60999999999495,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"vitalife\\\"]\",\"title\":\"lib/specialized-hack.js vitalife\",\"threads\":458,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236.60999999999814,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"helios\\\"]\",\"title\":\"lib/specialized-grow.js helios\",\"threads\":3749,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236.60999999999814,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"syscore\\\"]\",\"title\":\"lib/specialized-grow.js syscore\",\"threads\":384,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236.60999999999814,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"millenium-fitness\\\"]\",\"title\":\"lib/specialized-weaken.js millenium-fitness\",\"threads\":408,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.6100000000002,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"ecorp\\\"]\",\"title\":\"lib/specialized-hack.js ecorp\",\"threads\":11749,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.6100000000002,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"kuai-gong\\\"]\",\"title\":\"lib/specialized-hack.js kuai-gong\",\"threads\":5956,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.6100000000002,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"4sigma\\\"]\",\"title\":\"lib/specialized-grow.js 4sigma\",\"threads\":6025,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.6100000000002,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"nova-med\\\"]\",\"title\":\"lib/specialized-grow.js nova-med\",\"threads\":282,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.6100000000002,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"taiyang-digital\\\"]\",\"title\":\"lib/specialized-hack.js taiyang-digital\",\"threads\":123,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.6100000000002,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"lexo-corp\\\"]\",\"title\":\"lib/specialized-weaken.js lexo-corp\",\"threads\":121,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.6100000000002,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"alpha-ent\\\"]\",\"title\":\"lib/specialized-grow.js alpha-ent\",\"threads\":391,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.6100000000002,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"fulcrumassets\\\"]\",\"title\":\"lib/specialized-hack.js fulcrumassets\",\"threads\":8025,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.21000000000026,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"clarkinc\\\"]\",\"title\":\"lib/specialized-grow.js clarkinc\",\"threads\":9630,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.21000000000026,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"aevum-police\\\"]\",\"title\":\"lib/specialized-weaken.js aevum-police\",\"threads\":48,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":136.01,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"netlink\\\"]\",\"title\":\"lib/specialized-grow.js netlink\",\"threads\":194,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":126.21000000000038,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"galactic-cyber\\\"]\",\"title\":\"lib/specialized-grow.js galactic-cyber\",\"threads\":132,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":121.81000000000039,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-hack.js titan-labs\",\"threads\":93,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":114.21000000000042,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"powerhouse-fitness\\\"]\",\"title\":\"lib/specialized-grow.js powerhouse-fitness\",\"threads\":719,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.61000000000011,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"the-hub\\\"]\",\"title\":\"lib/specialized-weaken.js the-hub\",\"threads\":16,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.01000000000015,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"lexo-corp\\\"]\",\"title\":\"lib/specialized-hack.js lexo-corp\",\"threads\":41,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.81000000000016,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-grow.js omnia\",\"threads\":190,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.21000000000018,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"lib/specialized-grow.js johnson-ortho\",\"threads\":119,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.61000000000014,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"computek\\\"]\",\"title\":\"lib/specialized-grow.js computek\",\"threads\":406,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.61000000000007,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"millenium-fitness\\\"]\",\"title\":\"lib/specialized-hack.js millenium-fitness\",\"threads\":35,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000007,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"defcomm\\\"]\",\"title\":\"lib/specialized-grow.js defcomm\",\"threads\":488,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000007,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"rho-construction\\\"]\",\"title\":\"lib/specialized-weaken.js rho-construction\",\"threads\":48,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000007,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"lib/specialized-grow.js rothman-uni\",\"threads\":772,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000007,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"nova-med\\\"]\",\"title\":\"lib/specialized-hack.js nova-med\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000007,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"galactic-cyber\\\"]\",\"title\":\"lib/specialized-hack.js galactic-cyber\",\"threads\":73,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.61000000000007,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"aevum-police\\\"]\",\"title\":\"lib/specialized-hack.js aevum-police\",\"threads\":43,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.61000000000007,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"aerocorp\\\"]\",\"title\":\"lib/specialized-weaken.js aerocorp\",\"threads\":117,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.61000000000007,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"zb-institute\\\"]\",\"title\":\"lib/specialized-hack.js zb-institute\",\"threads\":54,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.61000000000008,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"syscore\\\"]\",\"title\":\"lib/specialized-hack.js syscore\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.61000000000008,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-weaken.js silver-helix\",\"threads\":97,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.610000000000056,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"lib/specialized-grow.js crush-fitness\",\"threads\":692,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.61000000000003,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"microdyne\\\"]\",\"title\":\"lib/specialized-hack.js microdyne\",\"threads\":58,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.61000000000003,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"summit-uni\\\"]\",\"title\":\"lib/specialized-grow.js summit-uni\",\"threads\":463,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.809999999999995,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"powerhouse-fitness\\\"]\",\"title\":\"lib/specialized-hack.js powerhouse-fitness\",\"threads\":69,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.809999999999995,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"solaris\\\"]\",\"title\":\"lib/specialized-weaken.js solaris\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.809999999999995,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"solaris\\\"]\",\"title\":\"lib/specialized-hack.js solaris\",\"threads\":80,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.809999999999995,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omega-net\\\"]\",\"title\":\"lib/specialized-grow.js omega-net\",\"threads\":655,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.40999999999998,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"the-hub\\\"]\",\"title\":\"lib/specialized-grow.js the-hub\",\"threads\":353,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.609999999999975,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"rothman-uni\\\"]\",\"title\":\"lib/specialized-hack.js rothman-uni\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999975,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"computek\\\"]\",\"title\":\"lib/specialized-weaken.js computek\",\"threads\":36,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.609999999999975,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"omega-net\\\"]\",\"title\":\"lib/specialized-weaken.js omega-net\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999978,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"global-pharm\\\"]\",\"title\":\"lib/specialized-grow.js global-pharm\",\"threads\":237,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999978,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"global-pharm\\\"]\",\"title\":\"lib/specialized-hack.js global-pharm\",\"threads\":87,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999978,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"netlink\\\"]\",\"title\":\"lib/specialized-hack.js netlink\",\"threads\":34,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999976,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":701,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999976,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"crush-fitness\\\"]\",\"title\":\"lib/specialized-weaken.js crush-fitness\",\"threads\":97,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999976,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"phantasy\\\"]\",\"title\":\"lib/specialized-weaken.js phantasy\",\"threads\":48,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999976,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"zer0\\\"]\",\"title\":\"lib/specialized-weaken.js zer0\",\"threads\":48,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.60999999999998,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"aevum-police\\\"]\",\"title\":\"lib/specialized-grow.js aevum-police\",\"threads\":1130,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.60999999999998,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"lib/specialized-hack.js johnson-ortho\",\"threads\":35,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.609999999999989,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"iron-gym\\\"]\",\"title\":\"lib/specialized-grow.js iron-gym\",\"threads\":1185,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"summit-uni\\\"]\",\"title\":\"lib/specialized-hack.js summit-uni\",\"threads\":10,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"the-hub\\\"]\",\"title\":\"lib/specialized-hack.js the-hub\",\"threads\":35,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-hack.js silver-helix\",\"threads\":31,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"iron-gym\\\"]\",\"title\":\"lib/specialized-hack.js iron-gym\",\"threads\":32,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.609999999999998,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"neo-net\\\"]\",\"title\":\"lib/specialized-weaken.js neo-net\",\"threads\":72,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.610000000000005,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"max-hardware\\\"]\",\"title\":\"lib/specialized-weaken.js max-hardware\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.610000000000005,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"zer0\\\"]\",\"title\":\"lib/specialized-grow.js zer0\",\"threads\":316,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.610000000000005,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"lib/specialized-weaken.js hong-fang-tea\",\"threads\":72,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.610000000000005,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"nectar-net\\\"]\",\"title\":\"lib/specialized-weaken.js nectar-net\",\"threads\":48,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"computek\\\"]\",\"title\":\"lib/specialized-hack.js computek\",\"threads\":38,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"crush-fitness\\\"]\",\"title\":\"lib/specialized-hack.js crush-fitness\",\"threads\":33,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"lib/specialized-grow.js harakiri-sushi\",\"threads\":273,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"nectar-net\\\"]\",\"title\":\"lib/specialized-grow.js nectar-net\",\"threads\":430,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"iron-gym\\\"]\",\"title\":\"lib/specialized-weaken.js iron-gym\",\"threads\":87,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"lib/specialized-weaken.js harakiri-sushi\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"phantasy\\\"]\",\"title\":\"lib/specialized-hack.js phantasy\",\"threads\":27,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"max-hardware\\\"]\",\"title\":\"lib/specialized-hack.js max-hardware\",\"threads\":25,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"lib/specialized-grow.js hong-fang-tea\",\"threads\":835,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"n00dles\\\"]\",\"title\":\"lib/specialized-weaken.js n00dles\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"applied-energetics\\\"]\",\"title\":\"lib/specialized-weaken.js applied-energetics\",\"threads\":48,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"rothman-uni\\\"]\",\"title\":\"lib/specialized-weaken.js rothman-uni\",\"threads\":48,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"max-hardware\\\"]\",\"title\":\"lib/specialized-grow.js max-hardware\",\"threads\":536,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"neo-net\\\"]\",\"title\":\"lib/specialized-hack.js neo-net\",\"threads\":26,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"lib/specialized-hack.js hong-fang-tea\",\"threads\":25,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"nectar-net\\\"]\",\"title\":\"lib/specialized-hack.js nectar-net\",\"threads\":26,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"joesguns\\\"]\",\"title\":\"lib/specialized-weaken.js joesguns\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"joesguns\\\"]\",\"title\":\"lib/specialized-grow.js joesguns\",\"threads\":522,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"lib/specialized-weaken.js sigma-cosmetics\",\"threads\":72,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"lib/specialized-grow.js sigma-cosmetics\",\"threads\":1088,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"foodnstuff\\\"]\",\"title\":\"lib/specialized-weaken.js foodnstuff\",\"threads\":341,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"n00dles\\\"]\",\"title\":\"lib/specialized-grow.js n00dles\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"zer0\\\"]\",\"title\":\"lib/specialized-hack.js zer0\",\"threads\":27,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"lib/specialized-hack.js harakiri-sushi\",\"threads\":25,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.7,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"joesguns\\\"]\",\"title\":\"lib/specialized-hack.js joesguns\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"node-0\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"lib/specialized-grow.js foodnstuff\",\"threads\":4724,\"temporary\":false}}]}},\"node-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-1\",\"httpPortOpen\":false,\"ip\":\"12.3.0.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-1\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-1\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-1\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-1\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-1\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-1\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-1\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-1\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-1\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-1\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-1\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-1\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-1\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-1\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-1\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-1\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":776.61000000002,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"infocomm\\\"]\",\"title\":\"lib/specialized-grow.js infocomm\",\"threads\":1761,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":536.6099999999967,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"snap-fitness\\\"]\",\"title\":\"lib/specialized-grow.js snap-fitness\",\"threads\":1823,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.60999999999495,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"vitalife\\\"]\",\"title\":\"lib/specialized-grow.js vitalife\",\"threads\":4853,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.60999999999495,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"microdyne\\\"]\",\"title\":\"lib/specialized-weaken.js microdyne\",\"threads\":121,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.60999999999495,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"snap-fitness\\\"]\",\"title\":\"lib/specialized-weaken.js snap-fitness\",\"threads\":1171,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":356.60999999999495,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"catalyst\\\"]\",\"title\":\"lib/specialized-grow.js catalyst\",\"threads\":2488,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236.60999999999814,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"millenium-fitness\\\"]\",\"title\":\"lib/specialized-weaken.js millenium-fitness\",\"threads\":54,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":236.60999999999814,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"millenium-fitness\\\"]\",\"title\":\"lib/specialized-grow.js millenium-fitness\",\"threads\":901,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":176.6100000000002,\"ramUsage\":1.7,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"fulcrumassets\\\"]\",\"title\":\"lib/specialized-hack.js fulcrumassets\",\"threads\":16184,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.21000000000026,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"clarkinc\\\"]\",\"title\":\"lib/specialized-grow.js clarkinc\",\"threads\":37130,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.21000000000026,\"ramUsage\":1.7,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"clarkinc\\\"]\",\"title\":\"lib/specialized-hack.js clarkinc\",\"threads\":5116,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.21000000000026,\"ramUsage\":1.7,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"4sigma\\\"]\",\"title\":\"lib/specialized-hack.js 4sigma\",\"threads\":617,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.21000000000026,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"zeus-med\\\"]\",\"title\":\"lib/specialized-grow.js zeus-med\",\"threads\":915,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.21000000000026,\"ramUsage\":1.7,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"stormtech\\\"]\",\"title\":\"lib/specialized-hack.js stormtech\",\"threads\":1071,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.21000000000026,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"univ-energy\\\"]\",\"title\":\"lib/specialized-grow.js univ-energy\",\"threads\":2256,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.21000000000026,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"zb-institute\\\"]\",\"title\":\"lib/specialized-grow.js zb-institute\",\"threads\":643,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.21000000000026,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"taiyang-digital\\\"]\",\"title\":\"lib/specialized-grow.js taiyang-digital\",\"threads\":785,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.21000000000026,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"vitalife\\\"]\",\"title\":\"lib/specialized-weaken.js vitalife\",\"threads\":1195,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.21000000000026,\"ramUsage\":1.7,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"infocomm\\\"]\",\"title\":\"lib/specialized-hack.js infocomm\",\"threads\":118,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.21000000000026,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"alpha-ent\\\"]\",\"title\":\"lib/specialized-weaken.js alpha-ent\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.21000000000026,\"ramUsage\":1.7,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"helios\\\"]\",\"title\":\"lib/specialized-hack.js helios\",\"threads\":982,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.21000000000026,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"syscore\\\"]\",\"title\":\"lib/specialized-weaken.js syscore\",\"threads\":48,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.21000000000026,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"summit-uni\\\"]\",\"title\":\"lib/specialized-weaken.js summit-uni\",\"threads\":36,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.81000000000016,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-grow.js omnia\",\"threads\":5035,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":69.21000000000018,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"lib/specialized-grow.js johnson-ortho\",\"threads\":866,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.61000000000014,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"computek\\\"]\",\"title\":\"lib/specialized-grow.js computek\",\"threads\":200,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.61000000000003,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"summit-uni\\\"]\",\"title\":\"lib/specialized-grow.js summit-uni\",\"threads\":191,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"lib/specialized-grow.js foodnstuff\",\"threads\":2000,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.7,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"foodnstuff\\\"]\",\"title\":\"lib/specialized-hack.js foodnstuff\",\"threads\":32,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.7,\"server\":\"node-1\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"n00dles\\\"]\",\"title\":\"lib/specialized-hack.js n00dles\",\"threads\":23,\"temporary\":false}}]}},\"node-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-2\",\"httpPortOpen\":false,\"ip\":\"68.2.8.7\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-2\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-2\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-2\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-2\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-2\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-2\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-2\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-2\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-2\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-2\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-2\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-2\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-2\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-2\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-2\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-2\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.798,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2779.010000000103,\"ramUsage\":1.75,\"server\":\"node-2\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"fulcrumtech\\\"]\",\"title\":\"lib/specialized-weaken.js fulcrumtech\",\"threads\":1076,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.798,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2779.010000000103,\"ramUsage\":1.75,\"server\":\"node-2\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"fulcrumtech\\\"]\",\"title\":\"lib/specialized-grow.js fulcrumtech\",\"threads\":5430,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.798,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2578.4100000000562,\"ramUsage\":1.75,\"server\":\"node-2\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"ecorp\\\"]\",\"title\":\"lib/specialized-weaken.js ecorp\",\"threads\":1051,\"temporary\":false}}]}},\"node-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-3\",\"httpPortOpen\":false,\"ip\":\"91.3.8.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-3\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-3\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-3\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-3\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-3\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-3\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-3\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-3\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-3\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-3\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-3\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-3\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-3\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-3\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-3\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-3\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.356,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4320.209999999437,\"ramUsage\":1.75,\"server\":\"node-3\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-weaken.js omnia\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.806,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2578.4100000000562,\"ramUsage\":1.75,\"server\":\"node-3\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"ecorp\\\"]\",\"title\":\"lib/specialized-weaken.js ecorp\",\"threads\":149,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.806,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2578.4100000000562,\"ramUsage\":1.75,\"server\":\"node-3\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"ecorp\\\"]\",\"title\":\"lib/specialized-grow.js ecorp\",\"threads\":5491,\"temporary\":false}}]}},\"node-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-4\",\"httpPortOpen\":false,\"ip\":\"16.1.8.9\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-4\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-4\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-4\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-4\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-4\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-4\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-4\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-4\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-4\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-4\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-4\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-4\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-4\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-4\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-4\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-4\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-5\",\"httpPortOpen\":false,\"ip\":\"16.7.2.6\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-5\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-5\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-5\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-5\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-5\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-5\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-5\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-5\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-5\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-5\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-5\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-5\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-5\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-5\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-5\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-5\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-6\",\"httpPortOpen\":false,\"ip\":\"89.4.9.9\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-6\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-6\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-6\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-6\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-6\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-6\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-6\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-6\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-6\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-6\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-6\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-6\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-6\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-6\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-6\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-6\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.825,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2879.6100000001265,\"ramUsage\":1.75,\"server\":\"node-6\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"b-and-a\\\"]\",\"title\":\"lib/specialized-weaken.js b-and-a\",\"threads\":1146,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.825,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2879.6100000001265,\"ramUsage\":1.75,\"server\":\"node-6\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"b-and-a\\\"]\",\"title\":\"lib/specialized-grow.js b-and-a\",\"threads\":6483,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.825,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2879.6100000001265,\"ramUsage\":1.75,\"server\":\"node-6\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"blade\\\"]\",\"title\":\"lib/specialized-weaken.js blade\",\"threads\":1219,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":65010.825,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2879.6100000001265,\"ramUsage\":1.75,\"server\":\"node-6\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"blade\\\"]\",\"title\":\"lib/specialized-grow.js blade\",\"threads\":7268,\"temporary\":false}}]}},\"node-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-7\",\"httpPortOpen\":false,\"ip\":\"34.3.1.9\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-7\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-7\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-7\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-7\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-7\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-7\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-7\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-7\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-7\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-7\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-7\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-7\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-7\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-7\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-7\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-7\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.385,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4372.80999999939,\"ramUsage\":1.75,\"server\":\"node-7\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"stormtech\\\"]\",\"title\":\"lib/specialized-weaken.js stormtech\",\"threads\":373,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.385,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4320.209999999437,\"ramUsage\":1.75,\"server\":\"node-7\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-weaken.js omnia\",\"threads\":113,\"temporary\":false}}]}},\"node-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-8\",\"httpPortOpen\":false,\"ip\":\"50.6.9.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-8\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-8\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-8\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-8\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-8\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-8\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-8\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-8\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-8\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-8\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-8\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-8\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-8\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-8\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-8\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-8\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.4,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4320.209999999437,\"ramUsage\":1.75,\"server\":\"node-8\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-weaken.js omnia\",\"threads\":12,\"temporary\":false}}]}},\"node-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-9\",\"httpPortOpen\":false,\"ip\":\"7.7.1.7\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-9\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-9\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-9\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-9\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-9\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-9\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-9\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-9\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-9\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-9\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-9\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-9\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-9\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-9\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-9\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-9\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-10\",\"httpPortOpen\":false,\"ip\":\"98.8.3.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-10\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-10\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-10\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-10\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-10\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-10\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-10\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-10\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-10\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-10\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-10\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-10\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-10\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-10\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-10\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-10\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-11\",\"httpPortOpen\":false,\"ip\":\"79.6.7.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-11\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-11\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-11\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-11\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-11\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-11\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-11\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-11\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-11\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-11\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-11\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-11\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-11\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-11\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-11\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-11\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.422,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4372.80999999939,\"ramUsage\":1.75,\"server\":\"node-11\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"stormtech\\\"]\",\"title\":\"lib/specialized-weaken.js stormtech\",\"threads\":213,\"temporary\":false}}]}},\"node-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-12\",\"httpPortOpen\":false,\"ip\":\"0.6.8.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-12\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-12\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-12\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-12\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-12\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-12\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-12\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-12\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-12\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-12\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-12\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-12\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-12\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-12\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-12\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-12\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.428,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4426.2099999993425,\"ramUsage\":1.75,\"server\":\"node-12\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"univ-energy\\\"]\",\"title\":\"lib/specialized-weaken.js univ-energy\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.428,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4372.80999999939,\"ramUsage\":1.75,\"server\":\"node-12\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"stormtech\\\"]\",\"title\":\"lib/specialized-weaken.js stormtech\",\"threads\":201,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.428,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4320.209999999437,\"ramUsage\":1.75,\"server\":\"node-12\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-weaken.js omnia\",\"threads\":2,\"temporary\":false}}]}},\"node-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-13\",\"httpPortOpen\":false,\"ip\":\"40.5.5.7\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-13\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-13\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-13\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-13\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-13\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-13\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-13\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-13\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-13\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-13\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-13\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-13\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-13\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-13\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-13\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-13\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"node-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-14\",\"httpPortOpen\":false,\"ip\":\"91.6.4.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-14\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-14\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-14\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-14\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-14\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-14\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-14\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-14\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-14\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-14\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-14\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-14\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-14\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-14\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-14\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-14\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.446,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4372.80999999939,\"ramUsage\":1.75,\"server\":\"node-14\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"stormtech\\\"]\",\"title\":\"lib/specialized-weaken.js stormtech\",\"threads\":261,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.446,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4263.409999999488,\"ramUsage\":1.75,\"server\":\"node-14\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"4sigma\\\"]\",\"title\":\"lib/specialized-weaken.js 4sigma\",\"threads\":51,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.446,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4173.80999999957,\"ramUsage\":1.75,\"server\":\"node-14\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"helios\\\"]\",\"title\":\"lib/specialized-weaken.js helios\",\"threads\":5,\"temporary\":false}}]}},\"node-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-15\",\"httpPortOpen\":false,\"ip\":\"42.7.2.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-15\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-15\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-15\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-15\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-15\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-15\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-15\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-15\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-15\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-15\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-15\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-15\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-15\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-15\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-15\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-15\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.452,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4426.2099999993425,\"ramUsage\":1.75,\"server\":\"node-15\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"univ-energy\\\"]\",\"title\":\"lib/specialized-weaken.js univ-energy\",\"threads\":30,\"temporary\":false}}]}},\"node-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-16\",\"httpPortOpen\":false,\"ip\":\"59.0.7.6\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-16\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-16\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-16\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-16\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-16\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-16\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-16\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-16\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-16\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-16\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-16\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-16\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-16\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-16\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-16\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-16\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.458,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4263.409999999488,\"ramUsage\":1.75,\"server\":\"node-16\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"4sigma\\\"]\",\"title\":\"lib/specialized-weaken.js 4sigma\",\"threads\":490,\"temporary\":false}}]}},\"node-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-17\",\"httpPortOpen\":false,\"ip\":\"10.4.5.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-17\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-17\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-17\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-17\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-17\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-17\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-17\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-17\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-17\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-17\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-17\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-17\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-17\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-17\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-17\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-17\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.465,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4263.409999999488,\"ramUsage\":1.75,\"server\":\"node-17\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"4sigma\\\"]\",\"title\":\"lib/specialized-weaken.js 4sigma\",\"threads\":168,\"temporary\":false}}]}},\"node-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-18\",\"httpPortOpen\":false,\"ip\":\"32.2.8.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-18\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-18\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-18\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-18\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-18\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-18\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-18\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-18\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-18\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-18\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-18\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-18\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-18\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-18\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-18\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-18\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.472,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4263.409999999488,\"ramUsage\":1.75,\"server\":\"node-18\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"4sigma\\\"]\",\"title\":\"lib/specialized-weaken.js 4sigma\",\"threads\":123,\"temporary\":false}}]}},\"node-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-19\",\"httpPortOpen\":false,\"ip\":\"74.2.6.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-19\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-19\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-19\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-19\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-19\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-19\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-19\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-19\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-19\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-19\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-19\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-19\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-19\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-19\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-19\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-19\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.48,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4263.409999999488,\"ramUsage\":1.75,\"server\":\"node-19\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"4sigma\\\"]\",\"title\":\"lib/specialized-weaken.js 4sigma\",\"threads\":25,\"temporary\":false}}]}},\"node-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-20\",\"httpPortOpen\":false,\"ip\":\"98.5.6.6\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-20\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-20\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-20\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-20\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-20\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-20\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-20\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-20\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-20\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-20\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-20\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-20\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-20\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-20\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-20\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-20\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.486,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4263.409999999488,\"ramUsage\":1.75,\"server\":\"node-20\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"4sigma\\\"]\",\"title\":\"lib/specialized-weaken.js 4sigma\",\"threads\":23,\"temporary\":false}}]}},\"node-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-21\",\"httpPortOpen\":false,\"ip\":\"2.2.9.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-21\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-21\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-21\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-21\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-21\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-21\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-21\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-21\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-21\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-21\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-21\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-21\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-21\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-21\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-21\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-21\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.494,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4263.409999999488,\"ramUsage\":1.75,\"server\":\"node-21\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"4sigma\\\"]\",\"title\":\"lib/specialized-weaken.js 4sigma\",\"threads\":60,\"temporary\":false}}]}},\"node-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-22\",\"httpPortOpen\":false,\"ip\":\"70.5.7.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-22\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-22\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-22\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-22\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-22\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-22\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-22\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-22\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-22\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-22\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-22\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-22\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-22\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-22\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-22\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-22\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.50300000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4263.409999999488,\"ramUsage\":1.75,\"server\":\"node-22\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"4sigma\\\"]\",\"title\":\"lib/specialized-weaken.js 4sigma\",\"threads\":36,\"temporary\":false}}]}},\"node-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-23\",\"httpPortOpen\":false,\"ip\":\"46.2.1.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-23\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-23\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-23\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-23\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-23\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-23\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-23\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-23\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-23\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-23\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-23\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-23\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-23\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-23\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-23\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-23\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.50700000001,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4320.209999999437,\"ramUsage\":1.75,\"server\":\"node-23\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-weaken.js omnia\",\"threads\":4,\"temporary\":false}}]}},\"node-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node-24\",\"httpPortOpen\":false,\"ip\":\"34.2.1.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"node-24\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"node-24\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"node-24\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"node-24\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"node-24\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"node-24\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"node-24\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"node-24\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"node-24\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"node-24\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"node-24\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"node-24\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"node-24\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"node-24\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"node-24\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"node-24\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"node-24\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":71386.513,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4320.209999999437,\"ramUsage\":1.75,\"server\":\"node-24\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-weaken.js omnia\",\"threads\":21,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":58.8139,\"discovery\":\"known\",\"playerReputation\":534500.4512247804}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":163.8213,\"discovery\":\"known\",\"playerReputation\":453978.5552875073}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":107.0585,\"discovery\":\"known\",\"playerReputation\":358148.2750407117}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":66.8188,\"discovery\":\"known\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":38711.91580774208}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":556796.2826954373}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":99704.58693289051}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":69.1039,\"discovery\":\"known\",\"playerReputation\":234411.24526555178}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":42.4405,\"discovery\":\"known\",\"playerReputation\":137187.0194798235}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":76.8277,\"discovery\":\"known\",\"playerReputation\":267783.6453310261}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":34.8596,\"discovery\":\"known\",\"playerReputation\":110713.86660589997}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":34518.02800091474,\"lastPrice\":34566.39596621852,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":16.556588919125293,\"otlkMagForecast\":69.52915966664295,\"cap\":629904610,\"spreadPerc\":0.2,\"shareTxForMovement\":85000,\"shareTxUntilMovement\":85000,\"totalShares\":94500000,\"maxShares\":18900000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":36721.439602867446,\"lastPrice\":36678.26782388321,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":true,\"otlkMag\":17.57196494704046,\"otlkMagForecast\":68.85784948385921,\"cap\":367575243,\"spreadPerc\":0.1,\"shareTxForMovement\":68628,\"shareTxUntilMovement\":68628,\"totalShares\":80600000,\"maxShares\":16100000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":24953.18201845547,\"lastPrice\":24897.362617823535,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":11.699899983511846,\"otlkMagForecast\":62.71688926305504,\"cap\":399321015,\"spreadPerc\":0.5,\"shareTxForMovement\":53165,\"shareTxUntilMovement\":53165,\"totalShares\":83700000,\"maxShares\":16700000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":13569.694328060692,\"lastPrice\":13542.747542358287,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":13.461145559197778,\"otlkMagForecast\":37.67448258156946,\"cap\":434922758,\"spreadPerc\":0.5,\"shareTxForMovement\":69903,\"shareTxUntilMovement\":69903,\"totalShares\":85100000,\"maxShares\":17000000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":31647.003641582047,\"lastPrice\":31591.22744616456,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":12.106964876605154,\"otlkMagForecast\":38.71404941544128,\"cap\":546917259,\"spreadPerc\":0.2,\"shareTxForMovement\":43307,\"shareTxUntilMovement\":43307,\"totalShares\":55100000,\"maxShares\":11000000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":107074.17887209283,\"lastPrice\":106768.97707192242,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":true,\"otlkMag\":18.843202941541243,\"otlkMagForecast\":68.16744684405317,\"cap\":686920887,\"spreadPerc\":0.4,\"shareTxForMovement\":60207,\"shareTxUntilMovement\":60207,\"totalShares\":31100000,\"maxShares\":6200000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":23793.1721221637,\"lastPrice\":23849.849938468567,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":false,\"otlkMag\":8.339280322575036,\"otlkMagForecast\":39.61022481091655,\"cap\":85172888,\"spreadPerc\":0.5,\"shareTxForMovement\":34508,\"shareTxUntilMovement\":34508,\"totalShares\":78700000,\"maxShares\":15700000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":19839.695053137286,\"lastPrice\":19909.75138191988,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.26,\"b\":false,\"otlkMag\":17.23737842756604,\"otlkMagForecast\":33.33549794876249,\"cap\":53121079,\"spreadPerc\":0.8,\"shareTxForMovement\":35324,\"shareTxUntilMovement\":35324,\"totalShares\":62800000,\"maxShares\":12600000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":26977.0196543697,\"lastPrice\":27037.501605452537,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":7.083239110947798,\"otlkMagForecast\":56.92427585847166,\"cap\":177667375,\"spreadPerc\":0.9,\"shareTxForMovement\":82461,\"shareTxUntilMovement\":82461,\"totalShares\":58200000,\"maxShares\":11600000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":19445.91329665881,\"lastPrice\":19410.55485275505,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":10.758070406165883,\"otlkMagForecast\":60.306488041151354,\"cap\":380279527,\"spreadPerc\":0.7,\"shareTxForMovement\":85093,\"shareTxUntilMovement\":85093,\"totalShares\":48400000,\"maxShares\":9700000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":16331.531960215696,\"lastPrice\":16305.029181452739,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":8.822890063953231,\"otlkMagForecast\":58.60907117520385,\"cap\":299730530,\"spreadPerc\":0.2,\"shareTxForMovement\":96116,\"shareTxUntilMovement\":96116,\"totalShares\":51100000,\"maxShares\":10200000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":13401.932264446326,\"lastPrice\":13372.326525782686,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":6.732206973986184,\"otlkMagForecast\":56.57173580606446,\"cap\":79863806,\"spreadPerc\":0.5,\"shareTxForMovement\":36000,\"shareTxUntilMovement\":36000,\"totalShares\":92300000,\"maxShares\":18500000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":15352.069296277677,\"lastPrice\":15323.726013413405,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":8.266580496435006,\"otlkMagForecast\":57.72715844795769,\"cap\":143151777,\"spreadPerc\":0.7,\"shareTxForMovement\":38491,\"shareTxUntilMovement\":38491,\"totalShares\":52700000,\"maxShares\":10500000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":15692.231247200323,\"lastPrice\":15670.273467822764,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":10.145160469084443,\"otlkMagForecast\":60.2117308807517,\"cap\":120057115,\"spreadPerc\":0.4,\"shareTxForMovement\":77741,\"shareTxUntilMovement\":77741,\"totalShares\":55700000,\"maxShares\":11100000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":12020.057319917794,\"lastPrice\":12038.58457434039,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":6.128941141771808,\"otlkMagForecast\":56.203962420144435,\"cap\":174703058,\"spreadPerc\":1,\"shareTxForMovement\":57661,\"shareTxUntilMovement\":57661,\"totalShares\":59200000,\"maxShares\":11800000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":7982.103885682645,\"lastPrice\":7997.538945032544,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":5.463652866186483,\"otlkMagForecast\":45.90816596044398,\"cap\":141967977,\"spreadPerc\":1.1,\"shareTxForMovement\":110644,\"shareTxUntilMovement\":110644,\"totalShares\":80000000,\"maxShares\":16000000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":26833.18028320036,\"lastPrice\":26888.075795945897,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":9.59667676177275,\"otlkMagForecast\":58.59976253107428,\"cap\":516437046,\"spreadPerc\":1,\"shareTxForMovement\":59517,\"shareTxUntilMovement\":59517,\"totalShares\":29800000,\"maxShares\":6000000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":21164.763408669623,\"lastPrice\":21200.351648259195,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":10.474452251827621,\"otlkMagForecast\":60.21509862477092,\"cap\":429968486,\"spreadPerc\":0.4,\"shareTxForMovement\":121621,\"shareTxUntilMovement\":121621,\"totalShares\":29900000,\"maxShares\":6000000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":24430.69867209496,\"lastPrice\":24482.73316381753,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":5.165433878181479,\"otlkMagForecast\":54.71179142257104,\"cap\":485923525,\"spreadPerc\":0.8,\"shareTxForMovement\":91872,\"shareTxUntilMovement\":91872,\"totalShares\":23700000,\"maxShares\":4700000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":5760.230784450228,\"lastPrice\":5801.718053177277,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.57,\"b\":false,\"otlkMag\":6.007527471038033,\"otlkMagForecast\":48.52567410255849,\"cap\":112517109,\"spreadPerc\":1,\"shareTxForMovement\":36617,\"shareTxUntilMovement\":36617,\"totalShares\":78200000,\"maxShares\":15600000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":4238.801490284417,\"lastPrice\":4224.594303429911,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.2,\"b\":false,\"otlkMag\":6.459203691119762,\"otlkMagForecast\":44.089390174463944,\"cap\":39154587,\"spreadPerc\":0.5,\"shareTxForMovement\":49608,\"shareTxUntilMovement\":49608,\"totalShares\":62600000,\"maxShares\":12500000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":3459.7082842974014,\"lastPrice\":3454.8671938227203,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":2.7487196990297207,\"otlkMagForecast\":52.74523506390992,\"cap\":56423432,\"spreadPerc\":0.3,\"shareTxForMovement\":92818,\"shareTxUntilMovement\":92818,\"totalShares\":53900000,\"maxShares\":10800000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":13034.251099400926,\"lastPrice\":12961.240742410795,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.01,\"b\":true,\"otlkMag\":8.784780554680736,\"otlkMagForecast\":60.882265935314244,\"cap\":170271058,\"spreadPerc\":1.4,\"shareTxForMovement\":82395,\"shareTxUntilMovement\":82395,\"totalShares\":32300000,\"maxShares\":6500000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":6268.307118362098,\"lastPrice\":6241.89306149877,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.51,\"b\":true,\"otlkMag\":1.6205742580247673,\"otlkMagForecast\":47.25559059748523,\"cap\":81308198,\"spreadPerc\":0.8,\"shareTxForMovement\":65580,\"shareTxUntilMovement\":65580,\"totalShares\":35200000,\"maxShares\":7000000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":6353.586651852469,\"lastPrice\":6368.009326726354,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":false,\"otlkMag\":1.8647335300925927,\"otlkMagForecast\":47.370816674417824,\"cap\":114391764,\"spreadPerc\":0.8,\"shareTxForMovement\":97474,\"shareTxUntilMovement\":97474,\"totalShares\":35200000,\"maxShares\":7000000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":3363.1365483049685,\"lastPrice\":3383.777534945829,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.19,\"b\":true,\"otlkMag\":1.7955388759563835,\"otlkMagForecast\":56.83255729242927,\"cap\":100474677,\"spreadPerc\":1.1,\"shareTxForMovement\":42874,\"shareTxUntilMovement\":42874,\"totalShares\":12900000,\"maxShares\":2600000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":5042.680652185089,\"lastPrice\":5057.095281368008,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":false,\"otlkMag\":1.1373878060985818,\"otlkMagForecast\":49.57335715796862,\"cap\":14822892,\"spreadPerc\":1.3,\"shareTxForMovement\":37620,\"shareTxUntilMovement\":37620,\"totalShares\":10500000,\"maxShares\":2100000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2046.9874530321479,\"lastPrice\":2051.0030956796386,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":1.354432348889761,\"otlkMagForecast\":52.01610144688411,\"cap\":25178714,\"spreadPerc\":0.7,\"shareTxForMovement\":150022,\"shareTxUntilMovement\":150022,\"totalShares\":21800000,\"maxShares\":4400000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2486.249111551353,\"lastPrice\":2503.389536518376,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.46,\"b\":false,\"otlkMag\":4.982079003153722,\"otlkMagForecast\":53.773381505993,\"cap\":34986357,\"spreadPerc\":0.6,\"shareTxForMovement\":66691,\"shareTxUntilMovement\":66691,\"totalShares\":9000000,\"maxShares\":1800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":519.4147521516452,\"lastPrice\":515.2130843743156,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.91,\"b\":true,\"otlkMag\":5.385723135297179,\"otlkMagForecast\":51.166598079697316,\"cap\":12863151,\"spreadPerc\":0.6,\"shareTxForMovement\":41206,\"shareTxUntilMovement\":41206,\"totalShares\":53800000,\"maxShares\":10800000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":2711.23923101313,\"lastPrice\":2721.4967763642594,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.35,\"b\":false,\"otlkMag\":13.550126518174592,\"otlkMagForecast\":36.35771924883818,\"cap\":9438272,\"spreadPerc\":1,\"shareTxForMovement\":28127,\"shareTxUntilMovement\":28127,\"totalShares\":73900000,\"maxShares\":14800000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":18404.891407275853,\"lastPrice\":18444.607436518152,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":6.653208377895937,\"otlkMagForecast\":57.97187288124933,\"cap\":346286994,\"spreadPerc\":0.4,\"shareTxForMovement\":95525,\"shareTxUntilMovement\":95525,\"totalShares\":20400000,\"maxShares\":4100000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":15363.778850920682,\"lastPrice\":15385.737724609067,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":false,\"otlkMag\":10.661818550444544,\"otlkMagForecast\":38.92094262662236,\"cap\":368834909,\"spreadPerc\":0.5,\"shareTxForMovement\":162104,\"shareTxUntilMovement\":162104,\"totalShares\":27700000,\"maxShares\":5500000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":327350,\"lastUpdate\":1701678939400,\"ticksUntilCycle\":20}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":40,\"MaxPortCapacity\":60,\"MaxTerminalCapacity\":250,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.2,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"36","AllGangsSave":"","LastExportBonus":"1701598948007","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}