{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":9833,\"max\":9833},\"skills\":{\"hacking\":9178,\"strength\":120292,\"defense\":98237,\"dexterity\":18391,\"agility\":21544,\"charisma\":2720,\"intelligence\":0},\"exp\":{\"hacking\":390978229.4219674,\"strength\":50864.6751624982,\"defense\":50864.6751624982,\"dexterity\":58494.37643687292,\"agility\":50864.6751624982,\"charisma\":93391.68812743398,\"intelligence\":0},\"mults\":{\"hacking_chance\":3.8568516172187994,\"hacking_speed\":3.6775970415418313,\"hacking_money\":20.437331308070334,\"hacking_grow\":13.29039301353238,\"hacking\":26.491789483558357,\"hacking_exp\":31.02625910593699,\"strength\":817.6671453337375,\"strength_exp\":6.615080263551242,\"defense\":667.7528791806205,\"defense_exp\":6.615080263551242,\"dexterity\":121.35749512538911,\"dexterity_exp\":7.607342303083926,\"agility\":146.44827601734542,\"agility_exp\":6.615080263551242,\"charisma\":16.35084128807744,\"charisma_exp\":12.145826370420068,\"hacknet_node_money\":6.129301422532326,\"hacknet_node_purchase_cost\":0.32107543252994086,\"hacknet_node_ram_cost\":0.4197064477515566,\"hacknet_node_core_cost\":0.4197064477515566,\"hacknet_node_level_cost\":0.356750480588823,\"company_rep\":31.464731358153426,\"faction_rep\":4.762620918195959,\"work_money\":4.750396566592318,\"crime_success\":4.489527973296255,\"crime_money\":8.389805400097378,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":45,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"TITN-41 Gene-Modification Injection\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Graphene BrachiBlades Upgrade\"},{\"level\":1,\"name\":\"The Red Pill\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"Photosynthetic Cells\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Neotra\"},{\"level\":1,\"name\":\"OmniTek InfoLoad\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"Graphene Bionic Arms Upgrade\"},{\"level\":1,\"name\":\"Graphene Bone Lacings\"},{\"level\":1,\"name\":\"Xanipher\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"SPTN-97 Gene Modification\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"Unstable Circadian Modulator\"},{\"level\":1,\"name\":\"ECorp HVMind Implant\"},{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface NeuroNet Injector\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":2,\"corporation\":null,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":5493881.3125855755,\"hack\":23755,\"str\":176592,\"def\":61706,\"dex\":23527,\"agi\":1039,\"cha\":13276,\"hack_exp\":789067.6807394826,\"str_exp\":572791.3134218158,\"def_exp\":246245.52840671458,\"dex_exp\":812688.8263102395,\"agi_exp\":2584.2743708593043,\"cha_exp\":603093.9077799325,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":3973494.707650393,\"str_asc_points\":1453365.5978642032,\"def_asc_points\":812488.2704821529,\"dex_asc_points\":4050777.135228211,\"agi_asc_points\":12340.327105237928,\"cha_asc_points\":3242969.8290509703,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"guy-0\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":5443152.960784575,\"hack\":23611,\"str\":177585,\"def\":61975,\"dex\":23477,\"agi\":1068,\"cha\":13244,\"hack_exp\":778772.5510355006,\"str_exp\":571647.7154278377,\"def_exp\":245500.95583332612,\"dex_exp\":805086.1512518949,\"agi_exp\":2633.549582511791,\"cha_exp\":597218.241375821,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":3939676.3832909144,\"str_asc_points\":1470606.6387972818,\"def_asc_points\":820378.3180212529,\"dex_asc_points\":4043986.418891356,\"agi_asc_points\":12815.40776521805,\"cha_asc_points\":3236443.314301629,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"guy-1\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":5337323.709291582,\"hack\":23366,\"str\":176961,\"def\":61878,\"dex\":23270,\"agi\":1089,\"cha\":13093,\"hack_exp\":773041.2035056832,\"str_exp\":563162.3088849122,\"def_exp\":242297.99422543004,\"dex_exp\":786608.8982539945,\"agi_exp\":2668.3586695881295,\"cha_exp\":584074.9495188196,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":3866219.8670210806,\"str_asc_points\":1466538.7265223188,\"def_asc_points\":821316.8563274699,\"dex_asc_points\":3998023.1908817757,\"agi_asc_points\":13156.423385267137,\"cha_asc_points\":3183067.984264321,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"guy-2\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":4989325.952587545,\"hack\":21819,\"str\":168508,\"def\":58178,\"dex\":21286,\"agi\":949,\"cha\":12055,\"hack_exp\":722164.0755876648,\"str_exp\":535767.5128439537,\"def_exp\":228204.46306709383,\"dex_exp\":721731.0132858685,\"agi_exp\":2429.825287569951,\"cha_exp\":539091.1615060001,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":3434797.902207481,\"str_asc_points\":1348919.5995002657,\"def_asc_points\":740348.4961027256,\"dex_asc_points\":3425395.5740123354,\"agi_asc_points\":10909.366337039975,\"cha_asc_points\":2760820.3160057166,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"guy-3\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":4720675.452258924,\"hack\":21100,\"str\":153691,\"def\":54912,\"dex\":20556,\"agi\":892,\"cha\":11705,\"hack_exp\":695212.8653641837,\"str_exp\":490753.4905620341,\"def_exp\":215591.99713185936,\"dex_exp\":694012.8989872077,\"agi_exp\":2329.4223002127064,\"cha_exp\":520832.3102118334,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":3246276.9734026543,\"str_asc_points\":1151019.2554598236,\"def_asc_points\":672009.1367528931,\"dex_asc_points\":3229417.5329018743,\"agi_asc_points\":10026.419888791177,\"cha_asc_points\":2628846.6039636848,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"guy-4\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":4658277.915989696,\"hack\":21079,\"str\":152677,\"def\":54327,\"dex\":20511,\"agi\":891,\"cha\":11668,\"hack_exp\":689065.423540192,\"str_exp\":484447.10046482115,\"def_exp\":212129.41890388494,\"dex_exp\":687242.3068479403,\"agi_exp\":2327.6451276684083,\"cha_exp\":515232.92436209536,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":3247627.5035428423,\"str_asc_points\":1140177.5597294718,\"def_asc_points\":661309.5920389108,\"dex_asc_points\":3223920.863162375,\"agi_asc_points\":10011.12692882223,\"cha_asc_points\":2620182.834641038,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"guy-5\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":4360417.55699234,\"hack\":18889,\"str\":151874,\"def\":53854,\"dex\":18557,\"agi\":762,\"cha\":10508,\"hack_exp\":620727.331459201,\"str_exp\":477889.90617173485,\"def_exp\":208666.64657525154,\"dex_exp\":622080.5693209547,\"agi_exp\":2094.226446559095,\"cha_exp\":464552.48932624713,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":2685326.3089831225,\"str_asc_points\":1132711.6086093662,\"def_asc_points\":653407.4183667545,\"dex_asc_points\":2713593.908745371,\"agi_asc_points\":8103.949200424789,\"cha_asc_points\":2190267.964119282,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"guy-6\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":4315396.134980318,\"hack\":18836,\"str\":151799,\"def\":53881,\"dex\":18510,\"agi\":797,\"cha\":10489,\"hack_exp\":612424.3353117561,\"str_exp\":478850.45386870566,\"def_exp\":209269.70366036732,\"dex_exp\":617332.5327793483,\"agi_exp\":2254.171374938728,\"cha_exp\":460426.7854113736,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":2680479.8519919794,\"str_asc_points\":1130933.9073104025,\"def_asc_points\":653436.3539346075,\"dex_asc_points\":2705617.7683122004,\"agi_asc_points\":8252.125883946326,\"cha_asc_points\":2188189.0316849034,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"guy-7\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":4251329.471237744,\"hack\":18768,\"str\":149722,\"def\":52949,\"dex\":18449,\"agi\":730,\"cha\":10429,\"hack_exp\":597563.301404531,\"str_exp\":467150.727920266,\"def_exp\":203612.70130677815,\"dex_exp\":612632.2989396268,\"agi_exp\":2035.7948999974142,\"cha_exp\":456824.9373163269,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":2679744.195458236,\"str_asc_points\":1108206.5769466772,\"def_asc_points\":636805.141674538,\"dex_asc_points\":2693512.8039446855,\"agi_asc_points\":7658.037253375741,\"cha_asc_points\":2168434.413084209,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"guy-8\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":4206670.269963093,\"hack\":18677,\"str\":149956,\"def\":53157,\"dex\":18360,\"agi\":738,\"cha\":10377,\"hack_exp\":599297.039328799,\"str_exp\":463849.67882145493,\"def_exp\":202589.3341262596,\"dex_exp\":603263.7972129002,\"agi_exp\":2049.355623135919,\"cha_exp\":449606.6295627154,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":2651424.1756191156,\"str_asc_points\":1113990.4992115975,\"def_asc_points\":642899.549552385,\"dex_asc_points\":2679360.868043383,\"agi_asc_points\":7760.399625896021,\"cha_asc_points\":2156847.6984608006,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"guy-9\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":4051219.486506146,\"hack\":18046,\"str\":147558,\"def\":52196,\"dex\":17687,\"agi\":730,\"cha\":10038,\"hack_exp\":574942.9649710839,\"str_exp\":452473.4795980776,\"def_exp\":197366.65476775664,\"dex_exp\":577376.338895266,\"agi_exp\":2035.2523744979007,\"cha_exp\":431849.8965246279,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":2504796.3329824256,\"str_asc_points\":1086557.0520215898,\"def_asc_points\":625318.4365066334,\"dex_asc_points\":2517827.1486567175,\"agi_asc_points\":7653.956167516717,\"cha_asc_points\":2042340.83545048,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"guy-10\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":3520919.9090092946,\"hack\":14603,\"str\":135807,\"def\":46945,\"dex\":14552,\"agi\":767,\"cha\":8187,\"hack_exp\":463706.57216427854,\"str_exp\":442438.23322907597,\"def_exp\":189298.80984778435,\"dex_exp\":486537.77990487835,\"agi_exp\":2556.549875905729,\"cha_exp\":358297.82749590353,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1745408.9246602252,\"str_asc_points\":926505.3434482038,\"def_asc_points\":512982.8975963014,\"dex_asc_points\":1790450.6245659527,\"agi_asc_points\":6793.295355262239,\"cha_asc_points\":1437407.945510019,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Neuralstimulator\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"guy-11\"}}],\"wanted\":74554.06297463443,\"respect\":55348591.132186525,\"isHackingGang\":false,\"respectGainRate\":2452.491898742535,\"wantedGainRate\":0.017137508323745325,\"moneyGainRate\":16264103.673716594,\"storedCycles\":44245,\"storedTerritoryAndPowerCycles\":70,\"territoryClashChance\":0,\"territoryWarfareEngaged\":false,\"notifyMemberDeath\":true}},\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Illuminati\",\"Daedalus\",\"The Covenant\",\"BitRunners\",\"NiteSec\",\"Sector-12\",\"The Syndicate\",\"Slum Snakes\",\"CyberSec\"],\"factionInvitations\":[],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"Shadows of Anarchy\"]},\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-2248.352499999999,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":6463132486364.746,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":51345609048.59596,\"gang\":150468865352.10303,\"hacking\":6266622711964.052,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":6463131486364.746,\"work\":0,\"servers\":0,\"other\":-5305700000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-168096,\"codingcontract\":4312500000,\"corporation\":0,\"crime\":67048654787.55723,\"gang\":2013913167112.6382,\"hacking\":10035182217155.217,\"hacknet\":12926793995.660532,\"hacknet_expenses\":-19599293087.58117,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":7846963019637.524,\"work\":0,\"servers\":-968958841971.2644,\"other\":-7867000000,\"augmentations\":-3289995010256.594}},\"playtimeSinceLastAug\":10296400,\"playtimeSinceLastBitnode\":109980600,\"lastAugReset\":1702644616457,\"lastNodeReset\":1702544932321,\"purchasedServers\":[],\"scriptProdSinceLastAug\":6266622711964.052,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[2,2]]},\"exploits\":[\"N00dles\",\"EditSaveFile\",\"Unclickable\",\"UndocumentedFunctionCall\",\"RealityAlteration\",\"Bypass\",\"TimeCompression\",\"PrototypeTampering\",\"TrueRecursion\",\"INeedARainbow\",\"YoureNotMeantToAccessThis\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1700338719175},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1700339619175},{\"ID\":\"WORKOUT\",\"unlockedOn\":1700342079172},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1700345744715},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1700346077358},{\"ID\":\"TOR\",\"unlockedOn\":1700347817357},{\"ID\":\"TRAVEL\",\"unlockedOn\":1700348057357},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1700379458941},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1700384318934},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1700409222036},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1700415118310},{\"ID\":\"FROZE\",\"unlockedOn\":1700415885902},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1700419154037},{\"ID\":\"NITESEC\",\"unlockedOn\":1700424074038},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1700426054031},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1700429256501},{\"ID\":\"4S\",\"unlockedOn\":1700500248691},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1700500968683},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1700599162805},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1700655655173},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1700664198439},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1700689338435},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1700775178880},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1700847111216},{\"ID\":\"DONATION\",\"unlockedOn\":1700848851164},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1700869971216},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1700985627342},{\"ID\":\"SF1.1\",\"unlockedOn\":1701071007305},{\"ID\":\"GANG\",\"unlockedOn\":1701122018887},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1701206940124},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1701245393333},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1701270534441},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1701270834453},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1701275155165},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1701286692126},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1701286812133},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1701416524115},{\"ID\":\"SF2.1\",\"unlockedOn\":1701416824109},{\"ID\":\"N00DLES\",\"unlockedOn\":1701611424172},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1701680822473},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1701682850411},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1701683001234},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1701683091077},{\"ID\":\"BYPASS\",\"unlockedOn\":1701683151101},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1701685519812},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1701686195194},{\"ID\":\"TRUE_RECURSION\",\"unlockedOn\":1701686259755},{\"ID\":\"RAINBOW\",\"unlockedOn\":1701687797297},{\"ID\":\"DEVMENU\",\"unlockedOn\":1701691900897},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1702542278621}],\"terminalCommandHistory\":[\"run to-pwn.js \",\"  home;connect foodnstuff;connect CSEC;backdoor; \",\"  home;connect hong-fang-tea;connect zer0;connect phantasy;connect avmnite-02h;backdoor; \",\"run fi\",\"hom\",\"home\",\"run find-contracts.js \",\"run bot-hacking.js \",\"run bot-gang.js \",\"run bot-hacking.js; run bot-gang.js \",\"buy -l\",\"buy FTPCrack.exe ; buy relaySMTP.exe ; buy HTTPWorm.exe ; buy SQLInject.exe \",\"run bot-hacking.js; run bot-gang.js \",\"buy FTPCrack.exe ; buy relaySMTP.exe ; buy HTTPWorm.exe ; buy SQLInject.exe \",\"run bot-hacking.js; run bot-gang.js \",\"buy FTPCrack.exe ; buy relaySMTP.exe ; buy HTTPWorm.exe ; buy SQLInject.exe \",\"run buy.js \",\"run upgrade-servers.js \",\"run upgrade-servers.js ; run upgrade-hacknet.js \",\"ps\",\"kill 2\",\"run bot-gang.js -b 1\",\"run to-pwn.js \",\"  home;connect hong-fang-tea;connect CSEC;connect phantasy;backdoor; \",\"  home;connect iron-gym;connect zer0;connect neo-net;connect avmnite-02h;backdoor; \",\"  home;connect harakiri-sushi;connect nectar-net;connect omega-net;connect johnson-ortho;connect I.I.I.I;backdoor; \",\"  home;connect iron-gym;connect zer0;connect neo-net;connect computek;connect syscore;connect rho-construction;connect aerocorp;connect omnia;connect solaris;connect nova-med;connect run4theh111z;backdoor; \",\"home\",\"run find-contracts.js \",\"run bot-hacking.js; run bot-gang.js \",\"buy FTPCrack.exe ; buy relaySMTP.exe ; buy HTTPWorm.exe ; buy SQLInject.exe \",\"run bot-hacking.js; run bot-gang.js \",\"buy FTPCrack.exe ; buy relaySMTP.exe ; buy HTTPWorm.exe ; buy SQLInject.exe \",\"run bot-hacking.js; run bot-gang.js \",\"buy FTPCrack.exe ; buy relaySMTP.exe ; buy HTTPWorm.exe ; buy SQLInject.exe \",\"run bot-hacking.js; run bot-gang.js \",\"buy FTPCrack.exe ; buy relaySMTP.exe ; buy HTTPWorm.exe ; buy SQLInject.exe \",\"run bot-hacking.js; run bot-gang.js \",\"buy FTPCrack.exe ; buy relaySMTP.exe ; buy HTTPWorm.exe ; buy SQLInject.exe \",\"run to-pwn.js \",\"run bot-hacking.js; run bot-gang.js \",\"buy FTPCrack.exe ; buy relaySMTP.exe ; buy HTTPWorm.exe ; buy SQLInject.exe \",\"buy -a\",\"run to-pwn.js \",\"  home;connect harakiri-sushi;connect max-hardware;connect omega-net;connect avmnite-02h;backdoor; \",\"  home;connect iron-gym;connect CSEC;backdoor; \",\"  home;connect hong-fang-tea;connect nectar-net;connect silver-helix;connect netlink;connect summit-uni;connect alpha-ent;connect galactic-cyber;connect omnia;connect zeus-med;connect nova-med;connect titan-labs;connect fulcrumtech;connect .;connect blade;connect The-Cave;backdoor; \",\"  home;connect hong-fang-tea;connect nectar-net;connect silver-helix;connect netlink;connect summit-uni;connect alpha-ent;connect galactic-cyber;connect omnia;connect zeus-med;connect nova-med;connect run4theh111z;backdoor; \",\"  home;connect hong-fang-tea;connect nectar-net;connect silver-helix;connect netlink;connect summit-uni;connect alpha-ent;connect galactic-cyber;connect omnia;connect zeus-med;connect nova-med;connect run4theh111z;connect helios;connect 4sigma;connect b-and-a;backdoor; \",\"home\"],\"lastUpdate\":1702654912760,\"lastSave\":1702654858918,\"totalPlaytime\":2579713000,\"currentWork\":{\"ctor\":\"CrimeWork\",\"data\":{\"type\":\"CRIME\",\"singularity\":false,\"cyclesWorked\":51232,\"crimeType\":\"Heist\",\"unitCompleted\":46400}},\"focus\":false,\"entropy\":0,\"identifier\":\"183c0fbbe8b548\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":4,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"51.2.7.6\",\"isConnectedTo\":true,\"maxRam\":32768,\"messages\":[\"hackers-starting-handbook.lit\",\"truthgazer.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"foodnstuff.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nconst hostname = 'foodnstuff';\\nexport async function main(ns) {\\n  while (true) {\\n    for (let i = 0; i < 5; i++)\\n      await ns.hack(hostname);\\n\\n    await ns.grow(hostname);\\n    for (let i = 0; i < 3; i++)\\n      await ns.weaken(hostname);\\n  }\\n}\",\"filename\":\"foodnstuff.js\",\"server\":\"home\"}}],[\"deploy_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help || args._.length < 1) {\\n\\t\\tns.tprint(\\\"This script deploys hack.js on a server with maximum threads possible.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} HOST`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n  const host = args._[0];\\n  ns.run(\\\"deploy.js\\\", {}, host, \\\"hack.js\\\", host);\\n}\",\"filename\":\"deploy_hack.js\",\"server\":\"home\"}}],[\"template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await template(ns, args, flags);\\r\\n}\\r\\nexport async function template(ns, { host }, { d: depth }) {\\r\\n    console.log(\\\"template\\\");\\r\\n}\\r\\n\",\"filename\":\"template.js\",\"server\":\"home\"}}],[\"weakenall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nconst file = \\\"lib/weaken.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const { d: depth } = flags;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        await deploy(ns, { ...args, host, script: file }, { ...flags });\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"weakenall.js\",\"server\":\"home\"}}],[\"to-pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await toPwn(ns, flags);\\r\\n}\\r\\nexport async function toPwn(ns, { d: depth }) {\\r\\n    const serversToPwn = [];\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host == \\\"home\\\") {\\r\\n            return;\\r\\n        }\\r\\n        const server = ns.getServer(host);\\r\\n        if (!server.requiredHackingSkill) {\\r\\n            return;\\r\\n        }\\r\\n        if (ns.getHackingLevel() < server.requiredHackingSkill) {\\r\\n            return;\\r\\n        }\\r\\n        if (!server.backdoorInstalled && server.hasAdminRights) {\\r\\n            serversToPwn.push({ server, nodes: acc.nodes });\\r\\n        }\\r\\n    }, { excludes: ns.getPurchasedServers() });\\r\\n    serversToPwn\\r\\n        .sort(({ server: serverA }, { server: serverB }) => {\\r\\n        return ((serverB.requiredHackingSkill || 0) -\\r\\n            (serverA.requiredHackingSkill || 0));\\r\\n    })\\r\\n        .forEach((server) => {\\r\\n        ns.tprintf(generateConnect(server.nodes, server.server.hostname));\\r\\n    });\\r\\n}\\r\\nexport function generateConnect(nodes, host) {\\r\\n    return (\\\" home;\\\" +\\r\\n        nodes\\r\\n            .slice(1)\\r\\n            .concat([host])\\r\\n            .map((node) => `connect ${node};`)\\r\\n            .join(\\\"\\\") +\\r\\n        \\\"backdoor; \\\");\\r\\n}\\r\\n\",\"filename\":\"to-pwn.js\",\"server\":\"home\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"home\"}}],[\"trade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await trade(ns, args, flags);\\r\\n}\\r\\nexport async function trade(ns, {}, {}) {\\r\\n    const stock = ns.stock;\\r\\n    const fee = stock.getConstants().StockMarketCommission;\\r\\n    for (;;) {\\r\\n        //TODO\\r\\n        ns.sleep(stock.getConstants().msPerStockUpdate);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"trade.js\",\"server\":\"home\"}}],[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"home\"}}],[\"bot.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { buy } from \\\"/buy\\\";\\r\\nimport { deployall } from \\\"/deployall\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { hasFormulas, validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { ps } from \\\"/ps\\\";\\r\\nimport { upgradeServers } from \\\"./upgrade-servers\\\";\\r\\nimport { maxServers } from \\\"/lib/maxServers\\\";\\r\\nimport { pwn } from \\\"/pwn\\\";\\r\\nimport { killall } from \\\"/killall\\\";\\r\\nimport { ThreadCounts } from \\\"/lib/misc\\\";\\r\\nimport { upgradeHacknet } from \\\"/upgrade-hacknet\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //use home in worker pool\\r\\n    w: false,\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n    //prompt\\r\\n    p: false,\\r\\n    //upgrade nodes\\r\\n    u: false,\\r\\n    //upgrade hacknet nodes\\r\\n    uh: false,\\r\\n    //manage gang\\r\\n    g: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await bot(ns, flags);\\r\\n}\\r\\nconst library = {\\r\\n    specializedHack: \\\"lib/specialized-hack.js\\\",\\r\\n    specializedGrow: \\\"lib/specialized-grow.js\\\",\\r\\n    specializedWeaken: \\\"lib/specialized-weaken.js\\\",\\r\\n};\\r\\nexport async function bot(ns, { w, u, uh, g, ...flags }) {\\r\\n    for (;;) {\\r\\n        /**\\r\\n         * Early game getting the 25 servers\\r\\n         */\\r\\n        await buy(ns, { pool: maxServers, \\\"min-ram\\\": 2, ram: 2 });\\r\\n        /**\\r\\n         * Upgrade\\r\\n         */\\r\\n        if (u)\\r\\n            await upgradeServers(ns, { ...flags });\\r\\n        if (uh)\\r\\n            await upgradeHacknet(ns, { ...flags });\\r\\n        // if (g) await manageGang(ns, { ...flags });\\r\\n        await pwn(ns, { d: defaultDepth, p: false, dl: false });\\r\\n        await walkAllHackableServer(ns, async (data) => {\\r\\n            if (!data.weaken.inProgress && data.weaken.shouldPerform(data)) {\\r\\n                const weakenThreadsCounts = weakenThreads(ns, data);\\r\\n                return await deployall(ns, { script: library.specializedWeaken, target: data.server.hostname }, {\\r\\n                    d: defaultDepth,\\r\\n                    w,\\r\\n                    x: weakenThreadsCounts.threads,\\r\\n                    xh: weakenThreadsCounts.homeThreads,\\r\\n                });\\r\\n            }\\r\\n            return true;\\r\\n        }, async (data) => {\\r\\n            if (!data.grow.inProgress && data.grow.shouldPerform(data)) {\\r\\n                const growThreadsCounts = growThreads(ns, data);\\r\\n                return await deployall(ns, { script: library.specializedGrow, target: data.server.hostname }, {\\r\\n                    d: defaultDepth,\\r\\n                    w,\\r\\n                    x: growThreadsCounts.threads,\\r\\n                    xh: growThreadsCounts.homeThreads,\\r\\n                });\\r\\n            }\\r\\n            return true;\\r\\n        }, async (data) => {\\r\\n            if (!data.hack.inProgress && data.hack.shouldPerform(data)) {\\r\\n                const hackThreadsCounts = hackThreads(ns, data);\\r\\n                //For some reason, it return -1 in some case, I need to understand those\\r\\n                if (hackThreadsCounts.threads >= 0) {\\r\\n                    // await ns.sleep(1);\\r\\n                    return await deployall(ns, { script: library.specializedHack, target: data.server.hostname }, {\\r\\n                        d: defaultDepth,\\r\\n                        w,\\r\\n                        x: hackThreadsCounts.threads,\\r\\n                        xh: hackThreadsCounts.homeThreads,\\r\\n                    });\\r\\n                }\\r\\n                else {\\r\\n                    //Print all kill all workers\\r\\n                    ns.tprint(ns.sprintf(\\\"Could not hackAnalyse %s: %s %s\\\", data.server.hostname, hackThreads, JSON.stringify(data.server)));\\r\\n                    killall(ns, { d: defaultDepth });\\r\\n                    ns.exit();\\r\\n                }\\r\\n            }\\r\\n            return true;\\r\\n        });\\r\\n        if (flags.p && !(await ns.prompt(\\\"Continue?\\\", { type: \\\"boolean\\\" }))) {\\r\\n            ns.exit();\\r\\n        }\\r\\n        await ns.sleep(1e3);\\r\\n    }\\r\\n}\\r\\nasync function walkAllHackableServer(ns, ...callbacks) {\\r\\n    const servers = await allHackableServersSorted(ns, \\\"money-desc\\\");\\r\\n    let shouldContinue = true;\\r\\n    while (servers.length) {\\r\\n        const server = servers.pop();\\r\\n        if (!server)\\r\\n            break;\\r\\n        if (!shouldContinue)\\r\\n            break;\\r\\n        const { hostname } = server;\\r\\n        const processes = (await ps(ns, { d: defaultDepth, p: false })).filter((process) => process.args?.[0] === hostname);\\r\\n        for (const callback of callbacks) {\\r\\n            shouldContinue = await callback({\\r\\n                server,\\r\\n                processes,\\r\\n                weaken: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedWeaken),\\r\\n                    serverMinSecurity: ns.getServerMinSecurityLevel(hostname),\\r\\n                    serverSecurity: ns.getServerSecurityLevel(hostname),\\r\\n                    shouldPerform: (data) => data.weaken.serverSecurity > data.weaken.serverMinSecurity,\\r\\n                },\\r\\n                grow: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedGrow),\\r\\n                    maxMoney: ns.getServerMaxMoney(hostname),\\r\\n                    money: ns.getServerMoneyAvailable(hostname),\\r\\n                    shouldPerform: (data) => data.grow.money < data.grow.maxMoney,\\r\\n                },\\r\\n                hack: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedHack),\\r\\n                    hackChance: ns.hackAnalyzeChance(hostname),\\r\\n                    shouldPerform: (data) => !!data.grow.money && data.hack.hackChance > 0,\\r\\n                },\\r\\n            });\\r\\n            if (!shouldContinue)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\nasync function allHackableServersSorted(ns, order) {\\r\\n    const hosts = [];\\r\\n    await walkDeepFirst(ns, defaultDepth, async (host) => {\\r\\n        hosts.push(host);\\r\\n    });\\r\\n    return hosts\\r\\n        .map(ns.getServer)\\r\\n        .filter((server) => server.hasAdminRights)\\r\\n        .filter((server) => (server.requiredHackingSkill || 0) <= ns.getHackingLevel())\\r\\n        .filter((server) => !!server.moneyMax)\\r\\n        .sort(({ moneyMax: moneyMaxA }, { moneyMax: moneyMaxB }) => order === \\\"money-asc\\\"\\r\\n        ? (moneyMaxB || 0) - (moneyMaxA || 0)\\r\\n        : (moneyMaxA || 0) - (moneyMaxB || 0));\\r\\n}\\r\\nfunction hackThreads(ns, data) {\\r\\n    return new ThreadCounts(Math.ceil(ns.hackAnalyzeThreads(data.server.hostname, data.grow.money * 0.2)), Math.ceil(ns.hackAnalyzeThreads(data.server.hostname, data.grow.money * 0.2)));\\r\\n}\\r\\nfunction weakenThreads(ns, data) {\\r\\n    return new ThreadCounts(getOptimalThreadsToWeaken(ns, data, getHomeCpuCores(ns)), getOptimalThreadsToWeaken(ns, data));\\r\\n}\\r\\nfunction getOptimalThreadsToWeaken(ns, data, cpuCores) {\\r\\n    const { serverSecurity, serverMinSecurity } = data.weaken;\\r\\n    const target = serverSecurity - serverMinSecurity;\\r\\n    let lowerBound = 0, upperBound = 100e3;\\r\\n    let threadCount = 0;\\r\\n    while (lowerBound !== upperBound) {\\r\\n        threadCount = Math.floor((upperBound - lowerBound) / 2 + lowerBound);\\r\\n        const actual = ns.weakenAnalyze(threadCount, cpuCores);\\r\\n        if (actual >= target && actual <= target + 1) {\\r\\n            break;\\r\\n        }\\r\\n        if (actual > target) {\\r\\n            upperBound = threadCount;\\r\\n            continue;\\r\\n        }\\r\\n        if (actual < target) {\\r\\n            lowerBound = threadCount;\\r\\n            continue;\\r\\n        }\\r\\n    }\\r\\n    return threadCount;\\r\\n}\\r\\nfunction growThreads(ns, data) {\\r\\n    const formulasEnabled = hasFormulas(ns);\\r\\n    const cpuCores = getHomeCpuCores(ns);\\r\\n    if (formulasEnabled) {\\r\\n        return new ThreadCounts(ns.formulas.hacking.growThreads(data.server, ns.getPlayer(), data.grow.maxMoney, cpuCores), ns.formulas.hacking.growThreads(data.server, ns.getPlayer(), data.grow.maxMoney));\\r\\n    }\\r\\n    return new ThreadCounts(data.grow.money\\r\\n        ? Math.ceil(ns.growthAnalyze(data.server.hostname, data.grow.maxMoney / data.grow.money, cpuCores))\\r\\n        : 100, data.grow.money\\r\\n        ? Math.ceil(ns.growthAnalyze(data.server.hostname, data.grow.maxMoney / data.grow.money))\\r\\n        : 100);\\r\\n}\\r\\nfunction getHomeCpuCores(ns) {\\r\\n    return ns.getServer(\\\"home\\\").cpuCores;\\r\\n}\\r\\n\",\"filename\":\"bot.js\",\"server\":\"home\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"home\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"home\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"home\"}}],[\"test-contract.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { solve } from \\\"/contracts/solve\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    await template(ns);\\r\\n}\\r\\nconst contractType = \\\"Algorithmic Stock Trader IV\\\";\\r\\nexport async function template(ns) {\\r\\n    if (!ns\\r\\n        .ls(\\\"home\\\")\\r\\n        .filter((file) => file.endsWith(\\\".cct\\\"))\\r\\n        .map((script) => ns.codingcontract.getContractType(script))\\r\\n        .find((type) => type === contractType))\\r\\n        ns.codingcontract.createDummyContract(contractType);\\r\\n    ns.ls(\\\"home\\\")\\r\\n        .filter((file) => file.endsWith(\\\".cct\\\"))\\r\\n        .forEach((contract) => {\\r\\n        solve(ns, { host: \\\"home\\\", script: contract });\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"test-contract.js\",\"server\":\"home\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"home\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"home\"}}],[\"buy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { maxServers } from \\\"/lib/maxServers\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    pool: maxServers,\\r\\n    \\\"min-ram\\\": 8,\\r\\n    ram: 128,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await buy(ns, flags);\\r\\n}\\r\\nexport async function buy(ns, { pool, \\\"min-ram\\\": minRam, ram: initialRam }) {\\r\\n    const purchase = (ram = initialRam, index = ns.getPurchasedServers().length) => {\\r\\n        if (ram < minRam) {\\r\\n            return;\\r\\n        }\\r\\n        if (ns.getPurchasedServers().length >= pool) {\\r\\n            return;\\r\\n        }\\r\\n        const newHost = ns.purchaseServer(\\\"node-\\\" + index, ram);\\r\\n        if (newHost) {\\r\\n            ns.toast(ns.sprintf(\\\"Purchased %s with %sGB \\\", newHost, ram), \\\"info\\\");\\r\\n            purchase(ram, index + 1);\\r\\n        }\\r\\n        else {\\r\\n            purchase(ram / 2, index);\\r\\n        }\\r\\n    };\\r\\n    purchase();\\r\\n}\\r\\n\",\"filename\":\"buy.js\",\"server\":\"home\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"home\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"home\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"home\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"home\"}}],[\"contracts/solve.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { lineHeader } from \\\"/lib/misc\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    script: \\\"contract-XX.cct\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await solve(ns, args);\\r\\n}\\r\\nexport async function solve(ns, { host, script }) {\\r\\n    const contractDefinition = types[ns.codingcontract.getContractType(script, host)];\\r\\n    if (contractDefinition.solvable) {\\r\\n        if (!contractDefinition.solve(ns, script, host, ns.codingcontract.getData(script, host))) {\\r\\n            const errorMessage = ns.sprintf(\\\"Failed to solve %s on %s\\\", script, host);\\r\\n            ns.toast(errorMessage, \\\"error\\\");\\r\\n            ns.tprint(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction attemp(ns, script, host, data, solution) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(\\\"%s: %s (%s)\\\", host, script, ns.codingcontract.getContractType(script, host));\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    const reward = ns.codingcontract.attempt(solution, script, host);\\r\\n    if (reward) {\\r\\n        const message = `Contract solved successfully! Reward: ${reward}`;\\r\\n        ns.toast(message, \\\"success\\\");\\r\\n        ns.tprint(message);\\r\\n        return true;\\r\\n    }\\r\\n    else {\\r\\n        const message = \\\"Failed to solve contract\\\";\\r\\n        ns.toast(message, \\\"error\\\");\\r\\n        ns.tprint(message);\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\nconst types = {\\r\\n    \\\"Find Largest Prime Factor\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, primeFactor(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Subarray with Maximum Sum\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, findMaxSubArraySum(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Total Ways to Sum\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, countCompose(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Total Ways to Sum II\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, countComposeRestricted(data[0], data[1]));\\r\\n        },\\r\\n    },\\r\\n    \\\"Spiralize Matrix\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Array Jumping Game\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, _data) => {\\r\\n            const data = _data;\\r\\n            const n = data.length;\\r\\n            let i = 0;\\r\\n            for (let reach = 0; i < n && i <= reach; ++i) {\\r\\n                reach = Math.max(i + data[i], reach);\\r\\n            }\\r\\n            const solution = i === n;\\r\\n            return attemp(ns, script, host, data, solution ? \\\"1\\\" : \\\"0\\\");\\r\\n        },\\r\\n    },\\r\\n    \\\"Array Jumping Game II\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, countJumps(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Merge Overlapping Intervals\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, mergeIntervals(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Generate IP Addresses\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, parseIp(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Algorithmic Stock Trader I\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, maxTxProfit(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Algorithmic Stock Trader II\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Algorithmic Stock Trader III\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            const prices = data;\\r\\n            let max = maxTxProfit(prices);\\r\\n            for (let i = 1; i < prices.length - 1; i++) {\\r\\n                max = Math.max(max, maxTxProfit(prices.slice(0, i + 1)) +\\r\\n                    maxTxProfit(prices.slice(i + 1, prices.length)));\\r\\n            }\\r\\n            return attemp(ns, script, host, data, max);\\r\\n        },\\r\\n    },\\r\\n    \\\"Algorithmic Stock Trader IV\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, _data) => {\\r\\n            const data = _data;\\r\\n            const k = data[0];\\r\\n            const prices = data[1];\\r\\n            function maxProfit(k, prices) {\\r\\n                const len = prices.length;\\r\\n                if (k > len / 2) {\\r\\n                    let res = 0;\\r\\n                    for (let i = 1; i < len; ++i) {\\r\\n                        res += Math.max(prices[i] - prices[i - 1], 0);\\r\\n                    }\\r\\n                    return res;\\r\\n                }\\r\\n                const hold = [];\\r\\n                const rele = [];\\r\\n                hold.length = k + 1;\\r\\n                rele.length = k + 1;\\r\\n                for (let i = 0; i <= k; ++i) {\\r\\n                    hold[i] = Number.MIN_SAFE_INTEGER;\\r\\n                    rele[i] = 0;\\r\\n                }\\r\\n                let cur;\\r\\n                for (let i = 0; i < len; ++i) {\\r\\n                    cur = prices[i];\\r\\n                    for (let j = k; j > 0; --j) {\\r\\n                        rele[j] = Math.max(rele[j], hold[j] + cur);\\r\\n                        hold[j] = Math.max(hold[j], rele[j - 1] - cur);\\r\\n                    }\\r\\n                }\\r\\n                return rele[k];\\r\\n            }\\r\\n            return attemp(ns, script, host, data, maxProfit(k, prices));\\r\\n        },\\r\\n    },\\r\\n    \\\"Minimum Path Sum in a Triangle\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, TriangleMinSum(data, 0, 0));\\r\\n        },\\r\\n    },\\r\\n    \\\"Unique Paths in a Grid I\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, walkDownFirst(createAndFillTwoDArray(data[0], data[1], () => 0), 0, 0));\\r\\n        },\\r\\n    },\\r\\n    \\\"Unique Paths in a Grid II\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, walkDownFirst(data, 0, 0));\\r\\n        },\\r\\n    },\\r\\n    \\\"Shortest Path in a Grid\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Sanitize Parentheses in Expression\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            let solutions = [];\\r\\n            let depth = 1;\\r\\n            do {\\r\\n                solutions = parenthesisSolutions(data, new Set(), depth++);\\r\\n            } while (!solutions.length);\\r\\n            solutions = [...new Set(solutions)];\\r\\n            return attemp(ns, script, host, data, solutions);\\r\\n        },\\r\\n    },\\r\\n    \\\"Find All Valid Math Expressions\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, _data) => {\\r\\n            const data = _data;\\r\\n            const num = data[0];\\r\\n            const target = data[1];\\r\\n            return attemp(ns, script, host, data, findMathExpressions(\\\"\\\", num, target, 0, 0, 0));\\r\\n        },\\r\\n    },\\r\\n    \\\"HammingCodes: Integer to Encoded Binary\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, HammingEncode(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"HammingCodes: Encoded Binary to Integer\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, HammingDecode(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Proper 2-Coloring of a Graph\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, \\r\\n            // tryColorGraph(toMapOfVertice((data as any)[1] as number[][]), [])\\r\\n            tryColorGraphV2(data[0], toMapOfVertice(data[1])));\\r\\n        },\\r\\n    },\\r\\n    \\\"Compression I: RLE Compression\\\": {\\r\\n        solvable: false,\\r\\n        solve: () => false,\\r\\n    },\\r\\n    \\\"Compression II: LZ Decompression\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, comprLZDecode(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Compression III: LZ Compression\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            return attemp(ns, script, host, data, comprLZEncode(data));\\r\\n        },\\r\\n    },\\r\\n    \\\"Encryption I: Caesar Cipher\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            const [text, rotation] = data;\\r\\n            return attemp(ns, script, host, data, CaesarCipher(text, rotation));\\r\\n        },\\r\\n    },\\r\\n    \\\"Encryption II: Vigenère Cipher\\\": {\\r\\n        solvable: true,\\r\\n        solve: (ns, script, host, data) => {\\r\\n            const [text, keyword] = data;\\r\\n            return attemp(ns, script, host, data, VigenereCipher(text, keyword));\\r\\n        },\\r\\n    },\\r\\n};\\r\\n// compress plaintest string\\r\\nexport function comprLZEncode(plain) {\\r\\n    // for state[i][j]:\\r\\n    //      if i is 0, we're adding a literal of length j\\r\\n    //      else, we're adding a backreference of offset i and length j\\r\\n    let cur_state = Array.from(Array(10), () => Array(10).fill(null));\\r\\n    let new_state = Array.from(Array(10), () => Array(10));\\r\\n    function set(state, i, j, str) {\\r\\n        const current = state[i][j];\\r\\n        if (current == null || str.length < current.length) {\\r\\n            state[i][j] = str;\\r\\n        }\\r\\n        else if (str.length === current.length && Math.random() < 0.5) {\\r\\n            // if two strings are the same length, pick randomly so that\\r\\n            // we generate more possible inputs to Compression II\\r\\n            state[i][j] = str;\\r\\n        }\\r\\n    }\\r\\n    // initial state is a literal of length 1\\r\\n    cur_state[0][1] = \\\"\\\";\\r\\n    for (let i = 1; i < plain.length; ++i) {\\r\\n        for (const row of new_state) {\\r\\n            row.fill(null);\\r\\n        }\\r\\n        const c = plain[i];\\r\\n        // handle literals\\r\\n        for (let length = 1; length <= 9; ++length) {\\r\\n            const string = cur_state[0][length];\\r\\n            if (string == null) {\\r\\n                continue;\\r\\n            }\\r\\n            if (length < 9) {\\r\\n                // extend current literal\\r\\n                set(new_state, 0, length + 1, string);\\r\\n            }\\r\\n            else {\\r\\n                // start new literal\\r\\n                set(new_state, 0, 1, string + \\\"9\\\" + plain.substring(i - 9, i) + \\\"0\\\");\\r\\n            }\\r\\n            for (let offset = 1; offset <= Math.min(9, i); ++offset) {\\r\\n                if (plain[i - offset] === c) {\\r\\n                    // start new backreference\\r\\n                    set(new_state, offset, 1, string + String(length) + plain.substring(i - length, i));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // handle backreferences\\r\\n        for (let offset = 1; offset <= 9; ++offset) {\\r\\n            for (let length = 1; length <= 9; ++length) {\\r\\n                const string = cur_state[offset][length];\\r\\n                if (string == null) {\\r\\n                    continue;\\r\\n                }\\r\\n                if (plain[i - offset] === c) {\\r\\n                    if (length < 9) {\\r\\n                        // extend current backreference\\r\\n                        set(new_state, offset, length + 1, string);\\r\\n                    }\\r\\n                    else {\\r\\n                        // start new backreference\\r\\n                        set(new_state, offset, 1, string + \\\"9\\\" + String(offset) + \\\"0\\\");\\r\\n                    }\\r\\n                }\\r\\n                // start new literal\\r\\n                set(new_state, 0, 1, string + String(length) + String(offset));\\r\\n                // end current backreference and start new backreference\\r\\n                for (let new_offset = 1; new_offset <= Math.min(9, i); ++new_offset) {\\r\\n                    if (plain[i - new_offset] === c) {\\r\\n                        set(new_state, new_offset, 1, string + String(length) + String(offset) + \\\"0\\\");\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        const tmp_state = new_state;\\r\\n        new_state = cur_state;\\r\\n        cur_state = tmp_state;\\r\\n    }\\r\\n    let result = null;\\r\\n    for (let len = 1; len <= 9; ++len) {\\r\\n        let string = cur_state[0][len];\\r\\n        if (string == null) {\\r\\n            continue;\\r\\n        }\\r\\n        string += String(len) + plain.substring(plain.length - len, plain.length);\\r\\n        if (result == null || string.length < result.length) {\\r\\n            result = string;\\r\\n        }\\r\\n        else if (string.length == result.length && Math.random() < 0.5) {\\r\\n            result = string;\\r\\n        }\\r\\n    }\\r\\n    for (let offset = 1; offset <= 9; ++offset) {\\r\\n        for (let len = 1; len <= 9; ++len) {\\r\\n            let string = cur_state[offset][len];\\r\\n            if (string == null) {\\r\\n                continue;\\r\\n            }\\r\\n            string += String(len) + \\\"\\\" + String(offset);\\r\\n            if (result == null || string.length < result.length) {\\r\\n                result = string;\\r\\n            }\\r\\n            else if (string.length == result.length && Math.random() < 0.5) {\\r\\n                result = string;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return result ?? \\\"\\\";\\r\\n}\\r\\n// decompress LZ-compressed string, or return null if input is invalid\\r\\nexport function comprLZDecode(compr) {\\r\\n    let plain = \\\"\\\";\\r\\n    for (let i = 0; i < compr.length;) {\\r\\n        const literal_length = compr.charCodeAt(i) - 0x30;\\r\\n        if (literal_length < 0 ||\\r\\n            literal_length > 9 ||\\r\\n            i + 1 + literal_length > compr.length) {\\r\\n            return null;\\r\\n        }\\r\\n        plain += compr.substring(i + 1, i + 1 + literal_length);\\r\\n        i += 1 + literal_length;\\r\\n        if (i >= compr.length) {\\r\\n            break;\\r\\n        }\\r\\n        const backref_length = compr.charCodeAt(i) - 0x30;\\r\\n        if (backref_length < 0 || backref_length > 9) {\\r\\n            return null;\\r\\n        }\\r\\n        else if (backref_length === 0) {\\r\\n            ++i;\\r\\n        }\\r\\n        else {\\r\\n            if (i + 1 >= compr.length) {\\r\\n                return null;\\r\\n            }\\r\\n            const backref_offset = compr.charCodeAt(i + 1) - 0x30;\\r\\n            if ((backref_length > 0 && (backref_offset < 1 || backref_offset > 9)) ||\\r\\n                backref_offset > plain.length) {\\r\\n                return null;\\r\\n            }\\r\\n            for (let j = 0; j < backref_length; ++j) {\\r\\n                plain += plain[plain.length - backref_offset];\\r\\n            }\\r\\n            i += 2;\\r\\n        }\\r\\n    }\\r\\n    return plain;\\r\\n}\\r\\nfunction findMathExpressions(path, num, target, pos, evaluated, multed) {\\r\\n    const result = [];\\r\\n    if (pos === num.length) {\\r\\n        if (target === evaluated) {\\r\\n            result.push(path);\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n    for (let i = pos; i < num.length; ++i) {\\r\\n        if (i != pos && num[pos] == \\\"0\\\") {\\r\\n            break;\\r\\n        }\\r\\n        const cur = parseInt(num.substring(pos, i + 1));\\r\\n        if (pos === 0) {\\r\\n            result.push(...findMathExpressions(path + cur, num, target, i + 1, cur, cur));\\r\\n        }\\r\\n        else {\\r\\n            result.push(...findMathExpressions(path + \\\"+\\\" + cur, num, target, i + 1, evaluated + cur, cur));\\r\\n            result.push(...findMathExpressions(path + \\\"-\\\" + cur, num, target, i + 1, evaluated - cur, -cur));\\r\\n            result.push(...findMathExpressions(path + \\\"*\\\" + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur));\\r\\n        }\\r\\n    }\\r\\n    return result;\\r\\n}\\r\\nfunction VigenereCipher(text, keyword) {\\r\\n    const cipher = [...text]\\r\\n        .map((a, i) => {\\r\\n        return a === \\\" \\\"\\r\\n            ? a\\r\\n            : String.fromCharCode(((a.charCodeAt(0) -\\r\\n                2 * 65 +\\r\\n                keyword.charCodeAt(i % keyword.length)) %\\r\\n                26) +\\r\\n                65);\\r\\n    })\\r\\n        .join(\\\"\\\");\\r\\n    return cipher;\\r\\n}\\r\\nfunction mergeIntervals(data) {\\r\\n    const intervals = [...data];\\r\\n    intervals.sort((a, b) => {\\r\\n        return a[0] - b[0];\\r\\n    });\\r\\n    const result = [];\\r\\n    let start = intervals[0][0];\\r\\n    let end = intervals[0][1];\\r\\n    for (const interval of intervals) {\\r\\n        if (interval[0] <= end) {\\r\\n            end = Math.max(end, interval[1]);\\r\\n        }\\r\\n        else {\\r\\n            result.push([start, end]);\\r\\n            start = interval[0];\\r\\n            end = interval[1];\\r\\n        }\\r\\n    }\\r\\n    result.push([start, end]);\\r\\n    return result;\\r\\n}\\r\\nfunction createAndFillTwoDArray(rows, cols, valueProvider) {\\r\\n    return Array.from({ length: rows }, () => Array.from({ length: cols }, valueProvider));\\r\\n}\\r\\nfunction countJumps(data) {\\r\\n    const n = data.length;\\r\\n    let reach = 0;\\r\\n    let jumps = 0;\\r\\n    let lastJump = -1;\\r\\n    while (reach < n - 1) {\\r\\n        let jumpedFrom = -1;\\r\\n        for (let i = reach; i > lastJump; i--) {\\r\\n            if (i + data[i] > reach) {\\r\\n                reach = i + data[i];\\r\\n                jumpedFrom = i;\\r\\n            }\\r\\n        }\\r\\n        if (jumpedFrom === -1) {\\r\\n            jumps = 0;\\r\\n            break;\\r\\n        }\\r\\n        lastJump = jumpedFrom;\\r\\n        jumps++;\\r\\n    }\\r\\n    return jumps;\\r\\n}\\r\\nfunction countComposeRestricted(integer, dataset) {\\r\\n    const composition = new Array(integer + 1).fill(0);\\r\\n    composition[0] = 1;\\r\\n    for (let i = 0; i < dataset.length; i++) {\\r\\n        for (let j = dataset[i]; j <= integer; j++) {\\r\\n            composition[j] += composition[j - dataset[i]];\\r\\n        }\\r\\n    }\\r\\n    return composition[integer];\\r\\n}\\r\\nfunction countCompose(integer) {\\r\\n    const composition = new Array(integer + 1).fill(0);\\r\\n    composition[0] = 1;\\r\\n    for (let i = 1; i < integer; i++) {\\r\\n        for (let j = i; j <= integer; j++) {\\r\\n            composition[j] = composition[j] + composition[j - i];\\r\\n        }\\r\\n    }\\r\\n    return composition[integer];\\r\\n}\\r\\nfunction isFinished(data, i, j) {\\r\\n    return data.length === i + 1 && data[i].length === j + 1;\\r\\n}\\r\\nfunction canMoveRight(data, i, j) {\\r\\n    return data[i].length > j + 1 && data[i][j + 1] !== 1;\\r\\n}\\r\\nfunction canMoveDown(data, i, j) {\\r\\n    return data.length > i + 1 && data[i + 1][j] !== 1;\\r\\n}\\r\\nfunction walkDownFirst(data, i, j) {\\r\\n    if (isFinished(data, i, j)) {\\r\\n        return 1;\\r\\n    }\\r\\n    let count = 0;\\r\\n    if (canMoveDown(data, i, j)) {\\r\\n        count += walkDownFirst(data, i + 1, j);\\r\\n    }\\r\\n    if (canMoveRight(data, i, j)) {\\r\\n        count += walkDownFirst(data, i, j + 1);\\r\\n    }\\r\\n    return count;\\r\\n}\\r\\nfunction maxTxProfit(prices) {\\r\\n    let max = 0;\\r\\n    for (let i = 0; i < prices.length - 1; i++) {\\r\\n        for (let j = i; j < prices.length; j++) {\\r\\n            max = Math.max(max, prices[j] - prices[i]);\\r\\n        }\\r\\n    }\\r\\n    return max;\\r\\n}\\r\\nfunction isValidIp(ip) {\\r\\n    const splitted = ip.split(\\\".\\\").filter((value) => !!value);\\r\\n    if (splitted.length != 4)\\r\\n        return false;\\r\\n    return !splitted.find((value) => ((Number.parseInt(value) != 0 || value.length > 1) &&\\r\\n        value.startsWith(\\\"0\\\")) ||\\r\\n        Number.parseInt(value) > 255);\\r\\n}\\r\\nfunction parseIp(ip) {\\r\\n    const validIps = [];\\r\\n    for (let i = 1; i < 4; i++) {\\r\\n        for (let j = 1; j < 4; j++) {\\r\\n            for (let k = 1; k < 4; k++) {\\r\\n                const a1 = ip.substring(0, i);\\r\\n                const a2 = ip.substring(i, i + j);\\r\\n                const a3 = ip.substring(i + j, i + j + k);\\r\\n                const a4 = ip.substring(i + j + k, ip.length);\\r\\n                const candidate = `${a1}.${a2}.${a3}.${a4}`;\\r\\n                if (isValidIp(candidate))\\r\\n                    validIps.push(candidate);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return validIps;\\r\\n}\\r\\nfunction primeFactor(integer) {\\r\\n    for (let i = 2; i < Math.sqrt(integer) + 1; i++) {\\r\\n        const factor = integer / i;\\r\\n        if (Number.isInteger(factor)) {\\r\\n            return primeFactor(factor);\\r\\n        }\\r\\n    }\\r\\n    return integer;\\r\\n}\\r\\nfunction sumArray(array) {\\r\\n    return array.reduce((acc, value) => acc + value, 0);\\r\\n}\\r\\nfunction findMaxSubArraySum(array) {\\r\\n    let currentMax = sumArray(array);\\r\\n    for (let i = 0; i < array.length - 1; i++) {\\r\\n        for (let j = array.length; j > i; j--) {\\r\\n            currentMax = Math.max(sumArray(array.slice(i, j)), currentMax);\\r\\n        }\\r\\n    }\\r\\n    return currentMax;\\r\\n}\\r\\nfunction tryColorGraphV2(count, data) {\\r\\n    const defaultColor = -1;\\r\\n    const tryColorIn = 1;\\r\\n    const solution = new Array(count).fill(defaultColor);\\r\\n    const checklist = [];\\r\\n    checklist.push({ vertix: 0, color: tryColorIn });\\r\\n    while (checklist.length) {\\r\\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\\r\\n        const { vertix, color } = checklist.pop();\\r\\n        solution[vertix] = color;\\r\\n        for (const neighbor of data[vertix] || []) {\\r\\n            if (solution[neighbor] === color)\\r\\n                return [];\\r\\n            if (solution[neighbor] === defaultColor)\\r\\n                checklist.push({ vertix: neighbor, color: (color + 1) % 2 });\\r\\n        }\\r\\n        if (!checklist.length) {\\r\\n            const vertixToPush = solution\\r\\n                .map((value, index) => ({ value, index }))\\r\\n                .find(({ value }) => value === defaultColor)?.index;\\r\\n            if (vertixToPush != undefined)\\r\\n                checklist.push({ vertix: vertixToPush, color: tryColorIn });\\r\\n        }\\r\\n    }\\r\\n    return solution;\\r\\n}\\r\\nfunction tryColorGraph(data, acc, vertix = 0, color = 0) {\\r\\n    //Bugged, need to figure it out. Cleaning of acc does not bubble up\\r\\n    if (acc[vertix] !== undefined && acc[vertix] !== color) {\\r\\n        return [];\\r\\n    }\\r\\n    acc[vertix] = color;\\r\\n    if (data[vertix] === undefined) {\\r\\n        return acc;\\r\\n    }\\r\\n    for (const neighbor of data[vertix]) {\\r\\n        const result = tryColorGraph(data, acc, neighbor, (color + 1) % 2);\\r\\n        if (!result.length) {\\r\\n            delete acc[vertix];\\r\\n            return [];\\r\\n        }\\r\\n    }\\r\\n    return acc;\\r\\n}\\r\\nfunction toMapOfVertice(data) {\\r\\n    return data.reduce((acc, [n1, n2]) => {\\r\\n        acc[n1] = acc[n1] || [];\\r\\n        acc[n2] = acc[n2] || [];\\r\\n        acc[n1] = acc[n1].concat([n2]);\\r\\n        acc[n2] = acc[n2].concat([n1]);\\r\\n        return acc;\\r\\n    }, {});\\r\\n}\\r\\nfunction isValidParenthesis(text) {\\r\\n    let opened = 0;\\r\\n    for (const char of [...text]) {\\r\\n        if (char === \\\"(\\\")\\r\\n            opened++;\\r\\n        if (char === \\\")\\\")\\r\\n            opened--;\\r\\n        if (opened < 0)\\r\\n            return false;\\r\\n    }\\r\\n    return opened === 0;\\r\\n}\\r\\nfunction parenthesisSolutions(text, acc, depth) {\\r\\n    if (depth === 0)\\r\\n        return [];\\r\\n    if (acc.has(text)) {\\r\\n        return [];\\r\\n    }\\r\\n    acc.add(text);\\r\\n    if (isValidParenthesis(text) || !text) {\\r\\n        return [text || \\\"\\\"];\\r\\n    }\\r\\n    if (text.startsWith(\\\")\\\")) {\\r\\n        return parenthesisSolutions(text.substring(1), acc, depth - 1);\\r\\n    }\\r\\n    return [...text]\\r\\n        .map((value, index) => {\\r\\n        return parenthesisSolutions([...text]\\r\\n            .slice(0, index)\\r\\n            .concat([...text].slice(index + 1, text.length))\\r\\n            .join(\\\"\\\"), acc, depth - 1);\\r\\n    })\\r\\n        .reduce((acc, value) => {\\r\\n        return acc.concat(value);\\r\\n    }, []);\\r\\n}\\r\\nfunction TriangleMinSum(triangle, i, j) {\\r\\n    if (i >= triangle.length || j >= triangle[i].length) {\\r\\n        return 0;\\r\\n    }\\r\\n    const value = triangle[i][j];\\r\\n    const left = value + TriangleMinSum(triangle, i + 1, j);\\r\\n    const right = value + TriangleMinSum(triangle, i + 1, j + 1);\\r\\n    return Math.min(left, right);\\r\\n}\\r\\nfunction CaesarCipher(text, rotation) {\\r\\n    // A: 65 .... Z: 90\\r\\n    const AcharCode = \\\"A\\\".charCodeAt(0);\\r\\n    const spaceCode = \\\" \\\".charCodeAt(0);\\r\\n    return [...text]\\r\\n        .map((char) => (char === \\\" \\\" ? spaceCode : char.charCodeAt(0) - rotation))\\r\\n        .map((charCode) => charCode === spaceCode\\r\\n        ? spaceCode\\r\\n        : charCode < AcharCode\\r\\n            ? charCode + 26\\r\\n            : charCode)\\r\\n        .map((charCode) => String.fromCharCode(charCode))\\r\\n        .join(\\\"\\\");\\r\\n}\\r\\n//Shamefully stolen from https://github.com/bitburner-official/bitburner-src/blob/6a76e1a9ab58d9b6f103c90793307c61a668334f/src/utils/HammingCodeTools.ts could not figure it out myself\\r\\nfunction HammingEncode(data) {\\r\\n    const enc = [0];\\r\\n    const data_bits = data.toString(2).split(\\\"\\\").reverse();\\r\\n    data_bits.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    let k = data_bits.length;\\r\\n    /* NOTE: writing the data like this flips the endianness, this is what the\\r\\n     * original implementation by Hedrauta did so I'm keeping it like it was. */\\r\\n    for (let i = 1; k > 0; i++) {\\r\\n        if ((i & (i - 1)) != 0) {\\r\\n            enc[i] = data_bits[--k];\\r\\n        }\\r\\n        else {\\r\\n            enc[i] = 0;\\r\\n        }\\r\\n    }\\r\\n    let parity = 0;\\r\\n    /* Figure out the subsection parities */\\r\\n    for (let i = 0; i < enc.length; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity ^= i;\\r\\n        }\\r\\n    }\\r\\n    parity = parity.toString(2).split(\\\"\\\").reverse();\\r\\n    parity.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    /* Set the parity bits accordingly */\\r\\n    for (let i = 0; i < parity.length; i++) {\\r\\n        enc[2 ** i] = parity[i] ? 1 : 0;\\r\\n    }\\r\\n    parity = 0;\\r\\n    /* Figure out the overall parity for the entire block */\\r\\n    for (let i = 0; i < enc.length; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity++;\\r\\n        }\\r\\n    }\\r\\n    /* Finally set the overall parity bit */\\r\\n    enc[0] = parity % 2 == 0 ? 0 : 1;\\r\\n    return enc.join(\\\"\\\");\\r\\n}\\r\\nfunction HammingEncodeProperly(data) {\\r\\n    /* How many bits do we need?\\r\\n     * n = 2^m\\r\\n     * k = 2^m - m - 1\\r\\n     * where k is the number of data bits, m the number\\r\\n     * of parity bits and n the number of total bits. */\\r\\n    let m = 1;\\r\\n    while (2 ** (2 ** m - m - 1) - 1 < data) {\\r\\n        m++;\\r\\n    }\\r\\n    const n = 2 ** m;\\r\\n    const k = 2 ** m - m - 1;\\r\\n    const enc = [0];\\r\\n    const data_bits = data.toString(2).split(\\\"\\\").reverse();\\r\\n    data_bits.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    /* Flip endianness as in the original implementation by Hedrauta\\r\\n     * and write the data back to front\\r\\n     * XXX why do we do this? */\\r\\n    for (let i = 1, j = k; i < n; i++) {\\r\\n        if ((i & (i - 1)) != 0) {\\r\\n            enc[i] = data_bits[--j] ? data_bits[j] : 0;\\r\\n        }\\r\\n    }\\r\\n    let parity = 0;\\r\\n    /* Figure out the subsection parities */\\r\\n    for (let i = 0; i < n; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity ^= i;\\r\\n        }\\r\\n    }\\r\\n    parity = parity.toString(2).split(\\\"\\\").reverse();\\r\\n    parity.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    /* Set the parity bits accordingly */\\r\\n    for (let i = 0; i < m; i++) {\\r\\n        enc[2 ** i] = parity[i] ? 1 : 0;\\r\\n    }\\r\\n    parity = 0;\\r\\n    /* Figure out the overall parity for the entire block */\\r\\n    for (let i = 0; i < n; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity++;\\r\\n        }\\r\\n    }\\r\\n    /* Finally set the overall parity bit */\\r\\n    enc[0] = parity % 2 == 0 ? 0 : 1;\\r\\n    return enc.join(\\\"\\\");\\r\\n}\\r\\nfunction HammingDecode(data) {\\r\\n    let err = 0;\\r\\n    const bits = [];\\r\\n    /* TODO why not just work with an array of digits from the start? */\\r\\n    for (const i in data.split(\\\"\\\")) {\\r\\n        const bit = parseInt(data[i]);\\r\\n        bits[i] = bit;\\r\\n        if (bit) {\\r\\n            err ^= +i;\\r\\n        }\\r\\n    }\\r\\n    /* If err != 0 then it spells out the index of the bit that was flipped */\\r\\n    if (err) {\\r\\n        /* Flip to correct */\\r\\n        bits[err] = bits[err] ? 0 : 1;\\r\\n    }\\r\\n    /* Now we have to read the message, bit 0 is unused (it's the overall parity bit\\r\\n     * which we don't care about). Each bit at an index that is a power of 2 is\\r\\n     * a parity bit and not part of the actual message. */\\r\\n    let ans = \\\"\\\";\\r\\n    for (let i = 1; i < bits.length; i++) {\\r\\n        /* i is not a power of two so it's not a parity bit */\\r\\n        if ((i & (i - 1)) != 0) {\\r\\n            ans += bits[i];\\r\\n        }\\r\\n    }\\r\\n    /* TODO to avoid ambiguity about endianness why not let the player return the extracted (and corrected)\\r\\n     * data bits, rather than guessing at how to convert it to a decimal string? */\\r\\n    return parseInt(ans, 2);\\r\\n}\\r\\n\",\"filename\":\"contracts/solve.js\",\"server\":\"home\"}}],[\"deployall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy as _deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { ThreadCounts } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/specialized-hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n    // max home threads\\r\\n    xh: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deployall(ns, args, flags);\\r\\n}\\r\\nexport async function deployall(ns, { script, ...args }, { d: depth, x: maxThreads, xh: maxHomeThreads, ...flags }, ...scriptArgs) {\\r\\n    const threadRemaining = new ThreadCounts(maxHomeThreads, maxThreads);\\r\\n    if (!threadRemaining.isEmpty())\\r\\n        await walkDeepFirst(ns, depth, async (host) => {\\r\\n            if (threadRemaining.isEmpty()) {\\r\\n                return;\\r\\n            }\\r\\n            const startedThreads = await _deploy(ns, { ...args, host, script }, { ...flags, x: threadRemaining.getThreadCount(host) }, ...scriptArgs);\\r\\n            threadRemaining.removeThreads(startedThreads, host);\\r\\n        });\\r\\n    return threadRemaining.isEmpty();\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return [...data.servers, ...data.scripts];\\r\\n}\\r\\n\",\"filename\":\"deployall.js\",\"server\":\"home\"}}],[\"ps.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n    //print\\r\\n    p: true,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await ps(ns, flags);\\r\\n}\\r\\nexport async function ps(ns, { d: depth, p: print }) {\\r\\n    const processes = [];\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        processes.push(...ns.ps(host).map((process) => ({ ...process, host })));\\r\\n    });\\r\\n    const linePattern = \\\"%s %s %s %s\\\";\\r\\n    const fileNamePadding = 20;\\r\\n    const threadPadding = 4;\\r\\n    const argsPadding = 30;\\r\\n    const hostsPadding = 30;\\r\\n    if (print) {\\r\\n        ns.tprintf(linePattern, \\\"Filename\\\".padEnd(fileNamePadding), \\\"T\\\".padEnd(threadPadding), \\\"...Args\\\".padEnd(argsPadding), \\\"...hosts\\\".padEnd(hostsPadding));\\r\\n        ns.tprintf(\\\"-\\\".padStart(fileNamePadding + threadPadding + argsPadding + hostsPadding, \\\"-\\\"));\\r\\n    }\\r\\n    const consolidated = processes.reduce((acc, { host, ...process }) => {\\r\\n        const accProcess = acc.find((accProcess) => process.filename === accProcess.filename &&\\r\\n            process.args.join() === accProcess.args.join());\\r\\n        if (!accProcess)\\r\\n            acc.push({ ...process, hosts: [host] });\\r\\n        else {\\r\\n            accProcess.hosts.push(host);\\r\\n            accProcess.threads += process.threads;\\r\\n        }\\r\\n        return acc;\\r\\n    }, []);\\r\\n    if (print)\\r\\n        consolidated.forEach((process) => {\\r\\n            ns.tprintf(linePattern, process.filename.padEnd(fileNamePadding), process.threads.toString().padEnd(threadPadding), `[${process.args.join(\\\"] [\\\")}]`.padEnd(argsPadding), `[${process.hosts.join(\\\"] [\\\")}]`.padEnd(hostsPadding));\\r\\n        });\\r\\n    return consolidated;\\r\\n}\\r\\n\",\"filename\":\"ps.js\",\"server\":\"home\"}}],[\"pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { analyze } from \\\"/lib/analyze\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { getAvailableExes } from \\\"/lib/getAvailableExes\\\";\\r\\nimport { scpExtensions } from \\\"/lib/misc\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    dl: false,\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    //print\\r\\n    p: true,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await pwn(ns, flags);\\r\\n}\\r\\nexport async function pwn(ns, { d: depth, p: print, dl }) {\\r\\n    const availablesPwn = getAvailableExes(ns);\\r\\n    const run = (name, cmd, host) => print ? ns.tprintf(\\\"%s:\\\\t\\\\t\\\\t%s\\\", name, cmd(host)) : cmd(host);\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        ns.printf(\\\"%s\\\", host);\\r\\n        /**Gain root access */\\r\\n        if (!ns.hasRootAccess(host) &&\\r\\n            ns.getServerNumPortsRequired(host) < availablesPwn.length) {\\r\\n            availablesPwn.forEach((availablePwn) => run(availablePwn.name, availablePwn.fn, host));\\r\\n        }\\r\\n        /** download all files located on server that does not already exist */\\r\\n        if (dl)\\r\\n            ns.ls(host)\\r\\n                .filter((file) => !ns.fileExists(file))\\r\\n                .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension))\\r\\n                .length)\\r\\n                .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n                .forEach((file) => ns.scp(file, \\\"home\\\", host));\\r\\n        if (print)\\r\\n            analyze(ns, acc.nodes.concat([host]).join(\\\" -> \\\"), host);\\r\\n    }, { excludes: ns.getPurchasedServers() });\\r\\n}\\r\\n\",\"filename\":\"pwn.js\",\"server\":\"home\"}}],[\"killall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await killall(ns, flags);\\r\\n}\\r\\nexport async function killall(ns, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        ns.killall(host);\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"killall.js\",\"server\":\"home\"}}],[\"find-contracts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { newLine } from \\\"/lib/misc\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { generateConnect } from \\\"/to-pwn\\\";\\r\\nimport { solve } from \\\"/contracts/solve\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await findContract(ns, flags);\\r\\n}\\r\\nexport async function findContract(ns, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        const contracts = ns.ls(host).filter((file) => file.endsWith(\\\".cct\\\"));\\r\\n        if (contracts.length) {\\r\\n            ns.tprintf(generateConnect(acc.nodes, host));\\r\\n            ns.tprintf(contracts\\r\\n                .map((contract) => `${contract} (${ns.codingcontract.getContractType(contract, host)})`)\\r\\n                .join(\\\", \\\"));\\r\\n            ns.tprintf(newLine);\\r\\n            for (const script of contracts) {\\r\\n                await solve(ns, { host, script });\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"find-contracts.js\",\"server\":\"home\"}}],[\"growall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nconst file = \\\"lib/grow.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const { d: depth } = flags;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        await deploy(ns, { ...args, host, script: file }, { ...flags });\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"growall.js\",\"server\":\"home\"}}],[\"hackall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n    //hack chance threshold\\r\\n    c: 0.9,\\r\\n};\\r\\nconst file = \\\"lib/hack.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const { d: depth, x: maxThreads, c } = flags;\\r\\n    let threadRemaining = maxThreads;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        if (threadRemaining === 0) {\\r\\n            return;\\r\\n        }\\r\\n        if (threadRemaining < 0) {\\r\\n            throw new Error();\\r\\n        }\\r\\n        const startedThreads = await deploy(ns, { ...args, host, script: file }, { ...flags, x: threadRemaining }, \\\"-c\\\", c);\\r\\n        threadRemaining = threadRemaining - startedThreads;\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"hackall.js\",\"server\":\"home\"}}],[\"kill.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    script: \\\"lib/weaken.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const depth = flags.d;\\r\\n    const { script } = args;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        ns.ps(host)\\r\\n            .filter((process) => process.filename === script)\\r\\n            .forEach((process) => ns.kill(process.pid));\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.scripts;\\r\\n}\\r\\n\",\"filename\":\"kill.js\",\"server\":\"home\"}}],[\"scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n    m: true,\\r\\n    s: true,\\r\\n};\\r\\nconst indent = 1;\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await scan(ns, flags);\\r\\n}\\r\\nexport async function scan(ns, { d: depth, m: moneyEnabled, s: securityEnabled }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        const padding = \\\"\\\".padEnd(acc.depth * indent);\\r\\n        const paddingInverted = \\\"\\\".padEnd((30 - acc.depth) * indent);\\r\\n        const server = ns.getServer(host);\\r\\n        ns.tprintf(\\\"%s┣ %s\\\", padding, host);\\r\\n        const money = server.moneyAvailable || 0;\\r\\n        const maxMoney = server.moneyMax || 0;\\r\\n        if (moneyEnabled && maxMoney) {\\r\\n            const line = \\\"%s┃%sm_avail=%-10s\\\\tm_max=%-10s\\\\tm_ratio=%-10s\\\";\\r\\n            ns.tprintf(line, padding, paddingInverted, ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        }\\r\\n        if (securityEnabled) {\\r\\n            const line = \\\"%s┃%sminSec=%-10s\\\\tsecurity=%-.10s\\\\tmin_hack=%-10s\\\";\\r\\n            ns.tprintf(line, padding, paddingInverted, server.minDifficulty, server.hackDifficulty?.toFixed(2).padEnd(10), server.requiredHackingSkill);\\r\\n        }\\r\\n    }, {\\r\\n        excludes: ns.getPurchasedServers(),\\r\\n    });\\r\\n}\\r\\n\",\"filename\":\"scan.js\",\"server\":\"home\"}}],[\"shrinkall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { deploy } from \\\"/lib/deploy\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // depth\\r\\n    d: defaultDepth,\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nconst file = \\\"lib/shrink.js\\\";\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const { d: depth } = flags;\\r\\n    await walkDeepFirst(ns, depth, async (host) => {\\r\\n        await deploy(ns, { ...args, host, script: file }, { ...flags });\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"shrinkall.js\",\"server\":\"home\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"home\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"home\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"home\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"home\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"home\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"home\"}}],[\"contracts/contract-134441.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-134441.cct\\\";\\r\\nconst host = \\\"zer0\\\";\\r\\nconst prices = [\\r\\n    109, 134, 48, 16, 63, 186, 178, 81, 140, 156, 177, 91, 61, 13, 46, 102, 51,\\r\\n    149, 111, 160, 57, 78, 142, 188, 195, 178, 173, 133, 49, 129, 117, 44, 61,\\r\\n    104, 58, 97, 88, 24, 104,\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const calc = (prices) => {\\r\\n        let max = 0;\\r\\n        for (let i = 0; i < prices.length - 1; i++) {\\r\\n            for (let j = i; j < prices.length; j++) {\\r\\n                max = Math.max(max, prices[j] - prices[i]);\\r\\n            }\\r\\n        }\\r\\n        return max;\\r\\n    };\\r\\n    let max = calc(prices);\\r\\n    for (let i = 1; i < prices.length - 1; i++) {\\r\\n        max = Math.max(max, calc(prices.slice(0, i + 1)) + calc(prices.slice(i + 1, prices.length)));\\r\\n    }\\r\\n    ns.tprintf(\\\"solution: %s\\\", max);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(max, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-134441.js\",\"server\":\"home\"}}],[\"contracts/contract-2410.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-2410.cct\\\";\\r\\nconst host = \\\"foodnstuff\\\";\\r\\nconst data = 14806590036;\\r\\nconst data2 = \\\"pppdpdddpd\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    const controlBitIndexes = [...data2]\\r\\n        .map((value, index) => (value === \\\"p\\\" ? index + 1 : -1))\\r\\n        .filter((value) => value > 0);\\r\\n    const solution = HammingEncode(data);\\r\\n    // setConfig({pow:4}).encode()\\r\\n    ns.tprintf(\\\"debug: %s\\\", controlBitIndexes);\\r\\n    ns.tprintf(\\\"debug: %s\\\", \\\"8 -> 1000 -> 11110000\\\");\\r\\n    ns.tprintf(\\\"debug: %s\\\", HammingEncode(8));\\r\\n    ns.tprintf(\\\"debug: %s\\\", \\\"21 -> 10101 -> 1001101011\\\");\\r\\n    ns.tprintf(\\\"debug: %s\\\", HammingEncode(21));\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\nfunction HammingEncode(data) {\\r\\n    const enc = [0];\\r\\n    const data_bits = data.toString(2).split(\\\"\\\").reverse();\\r\\n    data_bits.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    let k = data_bits.length;\\r\\n    /* NOTE: writing the data like this flips the endianness, this is what the\\r\\n     * original implementation by Hedrauta did so I'm keeping it like it was. */\\r\\n    for (let i = 1; k > 0; i++) {\\r\\n        if ((i & (i - 1)) != 0) {\\r\\n            enc[i] = data_bits[--k];\\r\\n        }\\r\\n        else {\\r\\n            enc[i] = 0;\\r\\n        }\\r\\n    }\\r\\n    let parity = 0;\\r\\n    /* Figure out the subsection parities */\\r\\n    for (let i = 0; i < enc.length; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity ^= i;\\r\\n        }\\r\\n    }\\r\\n    parity = parity.toString(2).split(\\\"\\\").reverse();\\r\\n    parity.forEach((e, i, a) => {\\r\\n        a[i] = parseInt(e);\\r\\n    });\\r\\n    /* Set the parity bits accordingly */\\r\\n    for (let i = 0; i < parity.length; i++) {\\r\\n        enc[2 ** i] = parity[i] ? 1 : 0;\\r\\n    }\\r\\n    parity = 0;\\r\\n    /* Figure out the overall parity for the entire block */\\r\\n    for (let i = 0; i < enc.length; i++) {\\r\\n        if (enc[i]) {\\r\\n            parity++;\\r\\n        }\\r\\n    }\\r\\n    /* Finally set the overall parity bit */\\r\\n    enc[0] = parity % 2 == 0 ? 0 : 1;\\r\\n    return enc.join(\\\"\\\");\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-2410.js\",\"server\":\"home\"}}],[\"contracts/contract-40081.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-40081.cct\\\";\\r\\nconst host = \\\"joesguns\\\";\\r\\nconst data = [\\\"ARRAY QUEUE MACRO VIRUS CACHE\\\", 8];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = cipher(data[0], data[1]);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\nfunction cipher(text, rotation) {\\r\\n    // A: 65 .... Z: 90\\r\\n    const AcharCode = \\\"A\\\".charCodeAt(0);\\r\\n    const spaceCode = \\\" \\\".charCodeAt(0);\\r\\n    return [...text]\\r\\n        .map((char) => (char === \\\" \\\" ? spaceCode : char.charCodeAt(0) - rotation))\\r\\n        .map((charCode) => charCode === spaceCode\\r\\n        ? spaceCode\\r\\n        : charCode < AcharCode\\r\\n            ? charCode + 26\\r\\n            : charCode)\\r\\n        .map((charCode) => String.fromCharCode(charCode))\\r\\n        .join(\\\"\\\");\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-40081.js\",\"server\":\"home\"}}],[\"contracts/template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-XX.cct\\\";\\r\\nconst host = \\\"zer0\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const data = ns.codingcontract.getData(name, host);\\r\\n    const solution = 0;\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/template.js\",\"server\":\"home\"}}],[\"contracts/contract-634177.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-634177.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = [\\r\\n    [6],\\r\\n    [6, 4],\\r\\n    [2, 4, 3],\\r\\n    [4, 2, 3, 3], //\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction minBranch(triangle, i, j) {\\r\\n    if (i >= triangle.length || j >= triangle[i].length) {\\r\\n        return 0;\\r\\n    }\\r\\n    const value = triangle[i][j];\\r\\n    const left = value + minBranch(triangle, i + 1, j);\\r\\n    const right = value + minBranch(triangle, i + 1, j + 1);\\r\\n    return Math.min(left, right);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = minBranch(data, 0, 0);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-634177.js\",\"server\":\"home\"}}],[\"contracts/contract-276203.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-276203.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = \\\"((()(((aa()))()\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction isValid(text) {\\r\\n    let opened = 0;\\r\\n    for (const char of [...text]) {\\r\\n        if (char === \\\"(\\\")\\r\\n            opened++;\\r\\n        if (char === \\\")\\\")\\r\\n            opened--;\\r\\n        if (opened < 0)\\r\\n            return false;\\r\\n    }\\r\\n    return opened === 0;\\r\\n}\\r\\nfunction parenthesisSolutions(text, depth) {\\r\\n    if (depth === 0)\\r\\n        return [];\\r\\n    if (isValid(text) || !text) {\\r\\n        return [text || \\\"\\\"];\\r\\n    }\\r\\n    if (text.length < 2) {\\r\\n        return [\\\"\\\"];\\r\\n    }\\r\\n    return [...text]\\r\\n        .map((value, index) => parenthesisSolutions([...text]\\r\\n        .slice(0, index)\\r\\n        .concat([...text].slice(index + 1, text.length))\\r\\n        .join(\\\"\\\"), depth - 1))\\r\\n        .reduce((acc, value) => {\\r\\n        return acc.concat(value);\\r\\n    }, []);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    let solutions = [];\\r\\n    let depth = 1;\\r\\n    do {\\r\\n        solutions = parenthesisSolutions(data, depth++);\\r\\n    } while (!solutions.length);\\r\\n    solutions = [...new Set(solutions)];\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solutions);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solutions, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-276203.js\",\"server\":\"home\"}}],[\"contracts/contract-57834.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-57834.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = [\\r\\n    12,\\r\\n    [\\r\\n        [1, 8],\\r\\n        [3, 10],\\r\\n        [3, 6],\\r\\n        [3, 9],\\r\\n        [0, 1],\\r\\n        [9, 11],\\r\\n        [7, 10],\\r\\n        [0, 5],\\r\\n        [6, 7],\\r\\n        [2, 8],\\r\\n        [7, 8],\\r\\n        [0, 3],\\r\\n        [2, 6],\\r\\n        [1, 11],\\r\\n        [4, 9],\\r\\n        [1, 9],\\r\\n        [4, 10],\\r\\n        [7, 11],\\r\\n        [0, 7],\\r\\n        [3, 11],\\r\\n        [2, 11],\\r\\n        [7, 9],\\r\\n    ],\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction tryColor(data, acc, vertix = 0, color = 0) {\\r\\n    if (acc[vertix] !== undefined && acc[vertix] !== color) {\\r\\n        return [];\\r\\n    }\\r\\n    acc[vertix] = color;\\r\\n    if (data[vertix] === undefined) {\\r\\n        return acc;\\r\\n    }\\r\\n    for (const neighbor of data[vertix]) {\\r\\n        const result = tryColor(data, acc, neighbor, (color + 1) % 2);\\r\\n        if (!result.length) {\\r\\n            delete acc[vertix];\\r\\n            return [];\\r\\n        }\\r\\n    }\\r\\n    return acc;\\r\\n}\\r\\nfunction toMapOfVertice(data) {\\r\\n    return data.reduce((acc, [n1, n2]) => {\\r\\n        acc[n1] = acc[n1] || [];\\r\\n        acc[n2] = acc[n2] || [];\\r\\n        acc[n1] = acc[n1].concat([n2]);\\r\\n        acc[n2] = acc[n1].concat([n1]);\\r\\n        return acc;\\r\\n    }, {});\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = tryColor(toMapOfVertice(data[1]), []);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-57834.js\",\"server\":\"home\"}}],[\"upgrade-hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await upgradeHacknet(ns, flags);\\r\\n}\\r\\nexport async function upgradeHacknet(ns, { b: budgetRatio }) {\\r\\n    let budget = ns.getPlayer().money * budgetRatio;\\r\\n    const purchaseCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    if (budget >= purchaseCost &&\\r\\n        ns.hacknet.numNodes() < ns.hacknet.maxNumNodes()) {\\r\\n        ns.hacknet.purchaseNode();\\r\\n        budget -= purchaseCost;\\r\\n    }\\r\\n    while (budget) {\\r\\n        const server = getHackNodes(ns).shift();\\r\\n        if (!server)\\r\\n            return;\\r\\n        const upgradeCost = ns.hacknet.getLevelUpgradeCost(server.index, 10);\\r\\n        const ramCost = ns.hacknet.getRamUpgradeCost(server.index);\\r\\n        const cpuCost = ns.hacknet.getCoreUpgradeCost(server.index);\\r\\n        if (server.level < 100) {\\r\\n            if (budget < upgradeCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeLevel(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.ram < 64) {\\r\\n            if (budget < ramCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeRam(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.level < 140) {\\r\\n            if (budget < upgradeCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeLevel(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.cores < 5) {\\r\\n            if (budget < cpuCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeCores(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.level < 200) {\\r\\n            if (budget < upgradeCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeLevel(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        if (server.cores < 16) {\\r\\n            if (budget < cpuCost) {\\r\\n                return;\\r\\n            }\\r\\n            budget -= upgradeCores(ns, server);\\r\\n            continue;\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n}\\r\\nfunction upgradeLevel(ns, server) {\\r\\n    const upgradeCost = ns.hacknet.getLevelUpgradeCost(server.index, 10);\\r\\n    if (ns.hacknet.upgradeLevel(server.index, 10)) {\\r\\n        ns.print(ns.sprintf(\\\"Upgraded %s to lvl %s\\\", server.index, server.level + 1));\\r\\n        return upgradeCost;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\nfunction upgradeRam(ns, server) {\\r\\n    const upgradeCost = ns.hacknet.getRamUpgradeCost(server.index);\\r\\n    if (ns.hacknet.upgradeRam(server.index)) {\\r\\n        ns.print(ns.sprintf(\\\"Upgraded %s to ram %s\\\", server.index, server.ram * 2));\\r\\n        return upgradeCost;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\nfunction upgradeCores(ns, server) {\\r\\n    const upgradeCost = ns.hacknet.getCoreUpgradeCost(server.index);\\r\\n    if (ns.hacknet.upgradeCore(server.index)) {\\r\\n        ns.print(ns.sprintf(\\\"Upgraded %s to cores %s\\\", server.index, server.cores + 1));\\r\\n        return upgradeCost;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\nfunction getHackNodes(ns) {\\r\\n    return new Array(ns.hacknet.numNodes())\\r\\n        .fill(0)\\r\\n        .map((_value, index) => index)\\r\\n        .map((index) => ({ ...ns.hacknet.getNodeStats(index), index }))\\r\\n        .sort((a, b) => a.production - b.production);\\r\\n}\\r\\n\",\"filename\":\"upgrade-hacknet.js\",\"server\":\"home\"}}],[\"contracts/contract-937534.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-937534.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = [\\r\\n    -4, -9, 0, 5, 5, 5, 6, 5, 7, -2, -2, -4, -6, 3, 5, -3, -1, 5, 10, -5, 0,\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction sumArray(array) {\\r\\n    return array.reduce((acc, value) => acc + value, 0);\\r\\n}\\r\\nfunction findMaxSubArraySum(array) {\\r\\n    let currentMax = sumArray(array);\\r\\n    for (let i = 0; i < array.length - 1; i++) {\\r\\n        for (let j = array.length - 1; j > i; j--) {\\r\\n            currentMax = Math.max(sumArray(array.slice(i, j)), currentMax);\\r\\n        }\\r\\n    }\\r\\n    return currentMax;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = findMaxSubArraySum(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-937534.js\",\"server\":\"home\"}}],[\"contracts/contract-169947.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-169947.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = 172413088;\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction primeFactor(integer) {\\r\\n    for (let i = 2; i < Math.sqrt(integer) + 1; i++) {\\r\\n        const factor = integer / i;\\r\\n        if (Number.isInteger(factor)) {\\r\\n            return primeFactor(factor);\\r\\n        }\\r\\n    }\\r\\n    return integer;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = primeFactor(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-169947.js\",\"server\":\"home\"}}],[\"contracts/contract-324759.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-324759.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = \\\"9716412766\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction isValidIp(ip) {\\r\\n    const splitted = ip.split(\\\".\\\").filter((value) => !!value);\\r\\n    if (splitted.length != 4)\\r\\n        return false;\\r\\n    return !splitted.find((value) => ((Number.parseInt(value) != 0 || value.length > 1) &&\\r\\n        value.startsWith(\\\"0\\\")) ||\\r\\n        Number.parseInt(value) > 255);\\r\\n}\\r\\nfunction parseIp(ip) {\\r\\n    const validIps = [];\\r\\n    for (let i = 1; i < 4; i++) {\\r\\n        for (let j = 1; j < 4; j++) {\\r\\n            for (let k = 1; k < 4; k++) {\\r\\n                const a1 = ip.substring(0, i);\\r\\n                const a2 = ip.substring(i, i + j);\\r\\n                const a3 = ip.substring(i + j, i + j + k);\\r\\n                const a4 = ip.substring(i + j + k, ip.length);\\r\\n                const candidate = `${a1}.${a2}.${a3}.${a4}`;\\r\\n                if (isValidIp(candidate))\\r\\n                    validIps.push(candidate);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return validIps;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = parseIp(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"127001: %s\\\", parseIp(\\\"127001\\\"));\\r\\n    ns.tprintf(\\\"255255255255: %s\\\", parseIp(\\\"255255255255\\\"));\\r\\n    ns.tprintf(\\\"1000: %s\\\", parseIp(\\\"1000\\\"));\\r\\n    ns.tprintf(\\\"1001: %s\\\", parseIp(\\\"1001\\\"));\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-324759.js\",\"server\":\"home\"}}],[\"contracts/contract-145349.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-145349.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst data = [\\r\\n    122, 188, 140, 50, 103, 126, 104, 136, 24, 58, 32, 30, 96, 147, 129, 134, 84, 100, 52, 24, 133, 158, 59, 25, 162, 48, 38, 190, 101, 12, 106, 190, 88, 125, 123, 142, 109\\r\\n];\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction maxTxProfit(prices) {\\r\\n    let max = 0;\\r\\n    for (let i = 0; i < prices.length - 1; i++) {\\r\\n        for (let j = i; j < prices.length; j++) {\\r\\n            max = Math.max(max, prices[j] - prices[i]);\\r\\n        }\\r\\n    }\\r\\n    return max;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const solution = maxTxProfit(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-145349.js\",\"server\":\"home\"}}],[\"contracts/contract-507056.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-507056.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction isFinished(data, i, j) {\\r\\n    return data.length === i + 1 && data[i].length === j + 1;\\r\\n}\\r\\nfunction canMoveRight(data, i, j) {\\r\\n    return data[i].length > j + 1 && data[i][j + 1] !== 1;\\r\\n}\\r\\nfunction canMoveDown(data, i, j) {\\r\\n    return data.length > i + 1 && data[i + 1][j] !== 1;\\r\\n}\\r\\nfunction walkDownFirst(data, i, j) {\\r\\n    if (isFinished(data, i, j)) {\\r\\n        return 1;\\r\\n    }\\r\\n    let count = 0;\\r\\n    if (canMoveDown(data, i, j)) {\\r\\n        count += walkDownFirst(data, i + 1, j);\\r\\n    }\\r\\n    if (canMoveRight(data, i, j)) {\\r\\n        count += walkDownFirst(data, i, j + 1);\\r\\n    }\\r\\n    return count;\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const data = ns.codingcontract.getData(name, host);\\r\\n    const solution = walkDownFirst(data, 0, 0);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-507056.js\",\"server\":\"home\"}}],[\"upgrade-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { upgrade } from \\\"/lib/upgrade\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n    //prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await upgradeServers(ns, flags);\\r\\n}\\r\\nexport async function upgradeServers(ns, { b: budgetRatio, ...flags }) {\\r\\n    let budget = ns.getPlayer().money * budgetRatio;\\r\\n    while (budget) {\\r\\n        const server = ns\\r\\n            .getPurchasedServers()\\r\\n            .map((host) => ({ host, ram: ns.getServerMaxRam(host) }))\\r\\n            .sort(({ ram: ramA }, { ram: ramB }) => {\\r\\n            return ramA - ramB;\\r\\n        })\\r\\n            .shift();\\r\\n        if (!server)\\r\\n            return;\\r\\n        const price = await upgrade(ns, { host: server.host }, { ...flags, b: budget });\\r\\n        budget -= price;\\r\\n        if (!price) {\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"upgrade-servers.js\",\"server\":\"home\"}}],[\"gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { getGangMembers, upgradeGang } from \\\"/upgrade-gang\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await manageGang(ns, flags);\\r\\n}\\r\\nexport async function manageGang(ns, { b }) {\\r\\n    // let budget = ns.getPlayer().money * budgetRatio;\\r\\n    if (ns.gang.canRecruitMember()) {\\r\\n        ns.gang.recruitMember(`guy-${ns.gang.getMemberNames().length}`);\\r\\n    }\\r\\n    const gangInfo = ns.gang.getGangInformation();\\r\\n    const { wantedPenalty } = gangInfo;\\r\\n    for (const gangMember of getGangMembers(ns)) {\\r\\n        if (gangMember.agi_exp < 2000 ||\\r\\n            gangMember.def_exp < 2000 ||\\r\\n            gangMember.str_exp < 2000 ||\\r\\n            gangMember.dex_exp < 2000) {\\r\\n            ns.gang.setMemberTask(gangMember.name, \\\"Train Combat\\\");\\r\\n        }\\r\\n        else if (gangMember.hack_exp < 2000) {\\r\\n            ns.gang.setMemberTask(gangMember.name, \\\"Train Hacking\\\");\\r\\n        }\\r\\n        else if (gangMember.cha_exp < 2000) {\\r\\n            ns.gang.setMemberTask(gangMember.name, \\\"Train Charisma\\\");\\r\\n            // } else if (\\r\\n            //   gangMember.task === \\\"Vigilante Justice\\\" &&\\r\\n            //   wantedPenalty < 0.98 &&\\r\\n            //   gangInfo.wantedLevel > 50\\r\\n            // ) {\\r\\n            //   continue;\\r\\n            // } else if (wantedPenalty < 0.8 && gangInfo.wantedLevel > 100) {\\r\\n            //   ns.gang.setMemberTask(gangMember.name, \\\"Vigilante Justice\\\");\\r\\n        }\\r\\n        else {\\r\\n            const mostProfitTask = ns.gang\\r\\n                .getTaskNames()\\r\\n                .map((taskName) => ns.gang.getTaskStats(taskName))\\r\\n                .map((task) => {\\r\\n                return {\\r\\n                    ...task,\\r\\n                    moneyGain: calculateMoneyGain(gangInfo, gangMember, task),\\r\\n                };\\r\\n            })\\r\\n                .sort(({ moneyGain: A }, { moneyGain: B }) => B - A)\\r\\n                .find(() => true)?.name;\\r\\n            const mostRespectTask = ns.gang\\r\\n                .getTaskNames()\\r\\n                .map((taskName) => ns.gang.getTaskStats(taskName))\\r\\n                .map((task) => {\\r\\n                return {\\r\\n                    ...task,\\r\\n                    respectGain: calculateRespectGain(gangInfo, gangMember, task),\\r\\n                };\\r\\n            })\\r\\n                .sort(({ respectGain: A }, { respectGain: B }) => B - A)\\r\\n                .find(() => true)?.name;\\r\\n            // ns.gang.setMemberTask(gangMember.name, \\\"Territory Warfare\\\" || mostProfitTask || mostRespectTask || \\\"Mug People\\\");\\r\\n            \\r\\n            ns.gang.setMemberTask(gangMember.name, mostProfitTask || mostRespectTask || \\\"Mug People\\\");\\r\\n        }\\r\\n    }\\r\\n    await upgradeGang(ns, { b });\\r\\n}\\r\\nfunction calculateMoneyGain(gang, member, task) {\\r\\n    if (task.baseMoney === 0)\\r\\n        return 0;\\r\\n    let statWeight = (task.hackWeight / 100) * member.hack +\\r\\n        (task.strWeight / 100) * member.str +\\r\\n        (task.defWeight / 100) * member.def +\\r\\n        (task.dexWeight / 100) * member.dex +\\r\\n        (task.agiWeight / 100) * member.agi +\\r\\n        (task.chaWeight / 100) * member.cha;\\r\\n    statWeight -= 3.2 * task.difficulty;\\r\\n    if (statWeight <= 0)\\r\\n        return 0;\\r\\n    const territoryMult = Math.max(0.005, Math.pow(gang.territory * 100, task.territory.money) / 100);\\r\\n    if (isNaN(territoryMult) || territoryMult <= 0)\\r\\n        return 0;\\r\\n    const respectMult = calculateWantedPenalty(gang);\\r\\n    const territoryPenalty = 0.2 * gang.territory + 0.8;\\r\\n    return Math.pow(5 * task.baseMoney * statWeight * territoryMult * respectMult, territoryPenalty);\\r\\n}\\r\\nfunction calculateWantedPenalty(gang) {\\r\\n    return gang.respect / (gang.respect + gang.wantedLevel);\\r\\n}\\r\\nfunction calculateRespectGain(gang, member, task) {\\r\\n    if (task.baseRespect === 0)\\r\\n        return 0;\\r\\n    let statWeight = (task.hackWeight / 100) * member.hack +\\r\\n        (task.strWeight / 100) * member.str +\\r\\n        (task.defWeight / 100) * member.def +\\r\\n        (task.dexWeight / 100) * member.dex +\\r\\n        (task.agiWeight / 100) * member.agi +\\r\\n        (task.chaWeight / 100) * member.cha;\\r\\n    statWeight -= 4 * task.difficulty;\\r\\n    if (statWeight <= 0)\\r\\n        return 0;\\r\\n    const territoryMult = Math.max(0.005, Math.pow(gang.territory * 100, task.territory.respect) / 100);\\r\\n    const territoryPenalty = 0.2 * gang.territory + 0.8;\\r\\n    if (isNaN(territoryMult) || territoryMult <= 0)\\r\\n        return 0;\\r\\n    const respectMult = calculateWantedPenalty(gang);\\r\\n    return Math.pow(11 * task.baseRespect * statWeight * territoryMult * respectMult, territoryPenalty);\\r\\n}\\r\\nfunction calculateWantedLevelGain(gang, member, task) {\\r\\n    if (task.baseWanted === 0)\\r\\n        return 0;\\r\\n    let statWeight = (task.hackWeight / 100) * member.hack +\\r\\n        (task.strWeight / 100) * member.str +\\r\\n        (task.defWeight / 100) * member.def +\\r\\n        (task.dexWeight / 100) * member.dex +\\r\\n        (task.agiWeight / 100) * member.agi +\\r\\n        (task.chaWeight / 100) * member.cha;\\r\\n    statWeight -= 3.5 * task.difficulty;\\r\\n    if (statWeight <= 0)\\r\\n        return 0;\\r\\n    const territoryMult = Math.max(0.005, Math.pow(gang.territory * 100, task.territory.wanted) / 100);\\r\\n    if (isNaN(territoryMult) || territoryMult <= 0)\\r\\n        return 0;\\r\\n    if (task.baseWanted < 0) {\\r\\n        return 0.4 * task.baseWanted * statWeight * territoryMult;\\r\\n    }\\r\\n    const calc = (7 * task.baseWanted) / Math.pow(3 * statWeight * territoryMult, 0.8);\\r\\n    // Put an arbitrary cap on this to prevent wanted level from rising too fast if the\\r\\n    // denominator is very small. Might want to rethink formula later\\r\\n    return Math.min(100, calc);\\r\\n}\\r\\n\",\"filename\":\"gang.js\",\"server\":\"home\"}}],[\"upgrade-stats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //depth\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await template(ns, args, flags);\\r\\n}\\r\\nexport async function template(ns, { host }, { d: depth }) {\\r\\n    ns.stock.getForecast();\\r\\n}\\r\\n\",\"filename\":\"upgrade-stats.js\",\"server\":\"home\"}}],[\"contracts/contract-916421.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-916421.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nfunction countCompose(integer) {\\r\\n    const composition = new Array(integer + 1).fill(0);\\r\\n    composition[0] = 1;\\r\\n    for (let i = 1; i < integer; i++) {\\r\\n        for (let j = i; j <= integer; j++) {\\r\\n            composition[j] = composition[j] + composition[j - i];\\r\\n        }\\r\\n    }\\r\\n    return composition[integer];\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const data = ns.codingcontract.getData(name, host);\\r\\n    const solution = countCompose(data);\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"2: %s\\\", countCompose(2));\\r\\n    ns.tprintf(\\\"3: %s\\\", countCompose(3));\\r\\n    ns.tprintf(\\\"4: %s\\\", countCompose(4));\\r\\n    ns.tprintf(\\\"5: %s\\\", countCompose(5));\\r\\n    ns.tprintf(\\\"6: %s\\\", countCompose(6));\\r\\n    ns.tprintf(\\\"7: %s\\\", countCompose(7));\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-916421.js\",\"server\":\"home\"}}],[\"upgrade-gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await upgradeGang(ns, flags);\\r\\n}\\r\\nexport async function upgradeGang(ns, { b: budgetRatio }) {\\r\\n    let budget = ns.getPlayer().money * budgetRatio;\\r\\n    getEquipments(ns).forEach((equipment) => {\\r\\n        if (budget >= equipment.cost) {\\r\\n            for (const gangMember of getGangMembers(ns)) {\\r\\n                if (ns.gang.purchaseEquipment(gangMember.name, equipment.name)) {\\r\\n                    budget -= equipment.cost;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function getEquipments(ns) {\\r\\n    return ns.gang\\r\\n        .getEquipmentNames()\\r\\n        .map((equipmentName) => ({\\r\\n        name: equipmentName,\\r\\n        cost: ns.gang.getEquipmentCost(equipmentName),\\r\\n        stats: ns.gang.getEquipmentStats(equipmentName),\\r\\n        type: ns.gang.getEquipmentType(equipmentName),\\r\\n    }))\\r\\n        .sort(({ cost: a }, { cost: b }) => a - b);\\r\\n}\\r\\nexport function getGangMembers(ns) {\\r\\n    return ns.gang\\r\\n        .getMemberNames()\\r\\n        .map((name) => ns.gang.getMemberInformation(name));\\r\\n}\\r\\n\",\"filename\":\"upgrade-gang.js\",\"server\":\"home\"}}],[\"restart-script.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    script: \\\"bot.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await restart(ns, args);\\r\\n}\\r\\nexport async function restart(ns, { script }) {\\r\\n    const processes = ns.ps();\\r\\n    const process = processes.find((process) => process.filename === script);\\r\\n    if (!process) {\\r\\n        ns.toast(\\\"Process not found!\\\", \\\"error\\\");\\r\\n        return;\\r\\n    }\\r\\n    ns.kill(process.pid);\\r\\n    ns.spawn(script, {\\r\\n        spawnDelay: 1,\\r\\n    }, ...process.args);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.scripts;\\r\\n}\\r\\n\",\"filename\":\"restart-script.js\",\"server\":\"home\"}}],[\"get-karma.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    await template(ns);\\r\\n}\\r\\nexport async function template(ns) {\\r\\n    ns.tprint(\\\"Your karma is: \\\" + ns.heart.break());\\r\\n    ns.corporation.\\r\\n    ;\\r\\n}\\r\\n\",\"filename\":\"get-karma.js\",\"server\":\"home\"}}],[\"contracts/contract-936260.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst name = \\\"contract-936260.cct\\\";\\r\\nconst host = \\\"home\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //dry-run\\r\\n    d: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await solve(ns, flags);\\r\\n}\\r\\nasync function solve(ns, { d: dryRun }) {\\r\\n    const data = ns.codingcontract.getData(name, host);\\r\\n    const solution = 0;\\r\\n    ns.tprintf(\\\"data: %s\\\", data);\\r\\n    ns.tprintf(\\\"solution: %s\\\", solution);\\r\\n    if (!dryRun) {\\r\\n        const reward = ns.codingcontract.attempt(solution, name, host);\\r\\n        if (reward) {\\r\\n            ns.tprint(`Contract solved successfully! Reward: ${reward}`);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(\\\"Failed to solve contract.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"contracts/contract-936260.js\",\"server\":\"home\"}}],[\"bot-hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { upgradeHacknet } from \\\"/upgrade-hacknet\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n    //prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await bot(ns, flags);\\r\\n}\\r\\nexport async function bot(ns, { ...flags }) {\\r\\n    for (;;) {\\r\\n        await upgradeHacknet(ns, { ...flags });\\r\\n        if (flags.p && !(await ns.prompt(\\\"Continue?\\\", { type: \\\"boolean\\\" }))) {\\r\\n            ns.exit();\\r\\n        }\\r\\n        await ns.sleep(1e3);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"bot-hacknet.js\",\"server\":\"home\"}}],[\"bot-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { upgradeServers } from \\\"./upgrade-servers\\\";\\r\\nimport { buy } from \\\"/buy\\\";\\r\\nimport { maxServers } from \\\"/lib/maxServers\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n    //prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await bot(ns, flags);\\r\\n}\\r\\nexport async function bot(ns, { ...flags }) {\\r\\n    for (;;) {\\r\\n        /**\\r\\n         * Early game getting the 25 servers\\r\\n         */\\r\\n        await buy(ns, { pool: maxServers, \\\"min-ram\\\": 2, ram: 2 });\\r\\n        /**\\r\\n         * Upgrade\\r\\n         */\\r\\n        await upgradeServers(ns, { ...flags });\\r\\n        if (flags.p && !(await ns.prompt(\\\"Continue?\\\", { type: \\\"boolean\\\" }))) {\\r\\n            ns.exit();\\r\\n        }\\r\\n        await ns.sleep(1e3);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"bot-servers.js\",\"server\":\"home\"}}],[\"bot-gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { manageGang } from \\\"/gang\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n    //prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await bot(ns, flags);\\r\\n}\\r\\nexport async function bot(ns, { ...flags }) {\\r\\n    for (;;) {\\r\\n        await manageGang(ns, { ...flags });\\r\\n        if (flags.p && !(await ns.prompt(\\\"Continue?\\\", { type: \\\"boolean\\\" }))) {\\r\\n            ns.exit();\\r\\n        }\\r\\n        await ns.sleep(1e3);\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"bot-gang.js\",\"server\":\"home\"}}],[\"bot-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { deployall } from \\\"/deployall\\\";\\r\\nimport { killall } from \\\"/killall\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nimport { ThreadCounts } from \\\"/lib/misc\\\";\\r\\nimport { hasFormulas, validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { ps } from \\\"/ps\\\";\\r\\nimport { pwn } from \\\"/pwn\\\";\\r\\nconst argsTemplate = {};\\r\\nconst flagsTemplate = {\\r\\n    //use home in worker pool\\r\\n    w: false,\\r\\n    //budget in percentage of owning money\\r\\n    b: 0.1,\\r\\n    //prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { flags } = validationReport;\\r\\n    await bot(ns, flags);\\r\\n}\\r\\nconst library = {\\r\\n    specializedHack: \\\"lib/specialized-hack.js\\\",\\r\\n    specializedGrow: \\\"lib/specialized-grow.js\\\",\\r\\n    specializedWeaken: \\\"lib/specialized-weaken.js\\\",\\r\\n};\\r\\nexport async function bot(ns, { w, ...flags }) {\\r\\n    for (;;) {\\r\\n        await pwn(ns, { d: defaultDepth, p: false, dl: false });\\r\\n        await walkAllHackableServer(ns, async (data) => {\\r\\n            if (!data.weaken.inProgress && data.weaken.shouldPerform(data)) {\\r\\n                const weakenThreadsCounts = weakenThreads(ns, data);\\r\\n                return await deployall(ns, { script: library.specializedWeaken, target: data.server.hostname }, {\\r\\n                    d: defaultDepth,\\r\\n                    w,\\r\\n                    x: weakenThreadsCounts.threads,\\r\\n                    xh: weakenThreadsCounts.homeThreads,\\r\\n                });\\r\\n            }\\r\\n            return true;\\r\\n        }, async (data) => {\\r\\n            if (!data.grow.inProgress && data.grow.shouldPerform(data)) {\\r\\n                const growThreadsCounts = growThreads(ns, data);\\r\\n                return await deployall(ns, { script: library.specializedGrow, target: data.server.hostname }, {\\r\\n                    d: defaultDepth,\\r\\n                    w,\\r\\n                    x: growThreadsCounts.threads,\\r\\n                    xh: growThreadsCounts.homeThreads,\\r\\n                });\\r\\n            }\\r\\n            return true;\\r\\n        }, async (data) => {\\r\\n            if (!data.hack.inProgress && data.hack.shouldPerform(data)) {\\r\\n                const hackThreadsCounts = hackThreads(ns, data);\\r\\n                //For some reason, it return -1 in some case, I need to understand those\\r\\n                if (hackThreadsCounts.threads >= 0) {\\r\\n                    // await ns.sleep(1);\\r\\n                    return await deployall(ns, { script: library.specializedHack, target: data.server.hostname }, {\\r\\n                        d: defaultDepth,\\r\\n                        w,\\r\\n                        x: hackThreadsCounts.threads,\\r\\n                        xh: hackThreadsCounts.homeThreads,\\r\\n                    });\\r\\n                }\\r\\n                else {\\r\\n                    //Print all kill all workers\\r\\n                    ns.tprint(ns.sprintf(\\\"Could not hackAnalyse %s: %s %s\\\", data.server.hostname, hackThreads, JSON.stringify(data.server)));\\r\\n                    killall(ns, { d: defaultDepth });\\r\\n                    ns.exit();\\r\\n                }\\r\\n            }\\r\\n            return true;\\r\\n        });\\r\\n        if (flags.p && !(await ns.prompt(\\\"Continue?\\\", { type: \\\"boolean\\\" }))) {\\r\\n            ns.exit();\\r\\n        }\\r\\n        await ns.sleep(1e3);\\r\\n    }\\r\\n}\\r\\nasync function walkAllHackableServer(ns, ...callbacks) {\\r\\n    const servers = await allHackableServersSorted(ns, \\\"money-desc\\\");\\r\\n    let shouldContinue = true;\\r\\n    while (servers.length) {\\r\\n        const server = servers.pop();\\r\\n        if (!server)\\r\\n            break;\\r\\n        if (!shouldContinue)\\r\\n            break;\\r\\n        const { hostname } = server;\\r\\n        const processes = (await ps(ns, { d: defaultDepth, p: false })).filter((process) => process.args?.[0] === hostname);\\r\\n        for (const callback of callbacks) {\\r\\n            shouldContinue = await callback({\\r\\n                server,\\r\\n                processes,\\r\\n                weaken: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedWeaken),\\r\\n                    serverMinSecurity: ns.getServerMinSecurityLevel(hostname),\\r\\n                    serverSecurity: ns.getServerSecurityLevel(hostname),\\r\\n                    shouldPerform: (data) => data.weaken.serverSecurity > data.weaken.serverMinSecurity,\\r\\n                },\\r\\n                grow: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedGrow),\\r\\n                    maxMoney: ns.getServerMaxMoney(hostname),\\r\\n                    money: ns.getServerMoneyAvailable(hostname),\\r\\n                    shouldPerform: (data) => data.grow.money < data.grow.maxMoney,\\r\\n                },\\r\\n                hack: {\\r\\n                    inProgress: !!processes.find((process) => process.filename === library.specializedHack),\\r\\n                    hackChance: ns.hackAnalyzeChance(hostname),\\r\\n                    shouldPerform: (data) => !!data.grow.money && data.hack.hackChance > 0,\\r\\n                },\\r\\n            });\\r\\n            if (!shouldContinue)\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\nasync function allHackableServersSorted(ns, order) {\\r\\n    const hosts = [];\\r\\n    await walkDeepFirst(ns, defaultDepth, async (host) => {\\r\\n        hosts.push(host);\\r\\n    });\\r\\n    return hosts\\r\\n        .map(ns.getServer)\\r\\n        .filter((server) => server.hasAdminRights)\\r\\n        .filter((server) => (server.requiredHackingSkill || 0) <= ns.getHackingLevel())\\r\\n        .filter((server) => !!server.moneyMax)\\r\\n        .sort(({ moneyMax: moneyMaxA }, { moneyMax: moneyMaxB }) => order === \\\"money-asc\\\"\\r\\n        ? (moneyMaxB || 0) - (moneyMaxA || 0)\\r\\n        : (moneyMaxA || 0) - (moneyMaxB || 0));\\r\\n}\\r\\nfunction hackThreads(ns, data) {\\r\\n    return new ThreadCounts(Math.ceil(ns.hackAnalyzeThreads(data.server.hostname, data.grow.money * 0.2)), Math.ceil(ns.hackAnalyzeThreads(data.server.hostname, data.grow.money * 0.2)));\\r\\n}\\r\\nfunction weakenThreads(ns, data) {\\r\\n    return new ThreadCounts(getOptimalThreadsToWeaken(ns, data, getHomeCpuCores(ns)), getOptimalThreadsToWeaken(ns, data));\\r\\n}\\r\\nfunction getOptimalThreadsToWeaken(ns, data, cpuCores) {\\r\\n    const { serverSecurity, serverMinSecurity } = data.weaken;\\r\\n    const target = serverSecurity - serverMinSecurity;\\r\\n    let lowerBound = 0, upperBound = 100e3;\\r\\n    let threadCount = 0;\\r\\n    while (lowerBound !== upperBound) {\\r\\n        threadCount = Math.floor((upperBound - lowerBound) / 2 + lowerBound);\\r\\n        const actual = ns.weakenAnalyze(threadCount, cpuCores);\\r\\n        if (actual >= target && actual <= target + 1) {\\r\\n            break;\\r\\n        }\\r\\n        if (actual > target) {\\r\\n            upperBound = threadCount;\\r\\n            continue;\\r\\n        }\\r\\n        if (actual < target) {\\r\\n            lowerBound = threadCount;\\r\\n            continue;\\r\\n        }\\r\\n    }\\r\\n    return threadCount;\\r\\n}\\r\\nfunction growThreads(ns, data) {\\r\\n    const formulasEnabled = hasFormulas(ns);\\r\\n    const cpuCores = getHomeCpuCores(ns);\\r\\n    if (formulasEnabled) {\\r\\n        return new ThreadCounts(ns.formulas.hacking.growThreads(data.server, ns.getPlayer(), data.grow.maxMoney, cpuCores), ns.formulas.hacking.growThreads(data.server, ns.getPlayer(), data.grow.maxMoney));\\r\\n    }\\r\\n    return new ThreadCounts(data.grow.money\\r\\n        ? Math.ceil(ns.growthAnalyze(data.server.hostname, data.grow.maxMoney / data.grow.money, cpuCores))\\r\\n        : 100, data.grow.money\\r\\n        ? Math.ceil(ns.growthAnalyze(data.server.hostname, data.grow.maxMoney / data.grow.money))\\r\\n        : 100);\\r\\n}\\r\\nfunction getHomeCpuCores(ns) {\\r\\n    return ns.getServer(\\\"home\\\").cpuCores;\\r\\n}\\r\\n\",\"filename\":\"bot-hacking.js\",\"server\":\"home\"}}],[\"click.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  document.getElementById('unclickable').style = \\\"display: block;position: absolute;top: 50%;left: 50%;width: 100px;height: 100px;z-index: 10000;background: red;\\\";\\n  document.getElementById('unclickable').parentNode.addEventListener('click', () => {\\n    document.getElementById('unclickable').style = \\\"display: none; visibility: hidden;\\\";\\n  }, true);\\n}\",\"filename\":\"click.js\",\"server\":\"home\"}}],[\"reality-alteration.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  ns.alterReality();\\n}\",\"filename\":\"reality-alteration.js\",\"server\":\"home\"}}],[\"bypass-ram.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  eval(\\\"ns.bypass(document);\\\");\\n}\",\"filename\":\"bypass-ram.js\",\"server\":\"home\"}}],[\"exploits/bypass-ram.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    eval(\\\"ns.bypass(document);\\\");\\r\\n}\\r\\n\",\"filename\":\"exploits/bypass-ram.js\",\"server\":\"home\"}}],[\"exploits/click.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const getEl = () => document.getElementById(\\\"unclickable\\\");\\r\\n    getEl().setAttribute(\\\"style\\\", \\\"display: block;position: absolute;top: 50%;left: 50%;width: 100px;height: 100px;z-index: 10000;background: red;\\\");\\r\\n    getEl().parentNode.addEventListener(\\\"click\\\", () => {\\r\\n        getEl().setAttribute(\\\"style\\\", \\\"display: none; visibility: hidden;\\\");\\r\\n    }, true);\\r\\n}\\r\\n\",\"filename\":\"exploits/click.js\",\"server\":\"home\"}}],[\"exploits/exploit.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.exploit();\\r\\n}\\r\\n\",\"filename\":\"exploits/exploit.js\",\"server\":\"home\"}}],[\"exploits/prototype-tampering.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    Number.prototype.toExponential = () => null;\\r\\n}\\r\\n\",\"filename\":\"exploits/prototype-tampering.js\",\"server\":\"home\"}}],[\"exploits/reality-alteration.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.alterReality();\\r\\n}\\r\\n\",\"filename\":\"exploits/reality-alteration.js\",\"server\":\"home\"}}],[\"exploits/time-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    window.performance.now = function () {\\r\\n        return 0;\\r\\n    };\\r\\n}\\r\\n\",\"filename\":\"exploits/time-compression.js\",\"server\":\"home\"}}],[\"exploits/rainbow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.rainbow(\\\"noodles\\\");\\r\\n}\\r\\n\",\"filename\":\"exploits/rainbow.js\",\"server\":\"home\"}}],[\"exploits/dev-tools.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.openDevMenu();\\r\\n}\\r\\n\",\"filename\":\"exploits/dev-tools.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"bot-hacking.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":390739662.3104499,\"onlineMoneyMade\":6266622711964.052,\"onlineRunningTime\":10293.010000000031,\"ramUsage\":18.15,\"server\":\"home\",\"scriptKey\":\"bot-hacking.js*[]\",\"title\":\"bot-hacking.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"bot-gang.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10293.010000000031,\"ramUsage\":25.2,\"server\":\"home\",\"scriptKey\":\"bot-gang.js*[]\",\"title\":\"bot-gang.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.01000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-weaken.js megacorp\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.01000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"ecorp\\\"]\",\"title\":\"lib/specialized-weaken.js ecorp\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":54.01000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"kuai-gong\\\"]\",\"title\":\"lib/specialized-weaken.js kuai-gong\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"blade\\\"]\",\"title\":\"lib/specialized-weaken.js blade\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"blade\\\"]\",\"title\":\"lib/specialized-hack.js blade\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"omnitek\\\"]\",\"title\":\"lib/specialized-weaken.js omnitek\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"omnitek\\\"]\",\"title\":\"lib/specialized-hack.js omnitek\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"clarkinc\\\"]\",\"title\":\"lib/specialized-weaken.js clarkinc\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"clarkinc\\\"]\",\"title\":\"lib/specialized-grow.js clarkinc\",\"threads\":20,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"clarkinc\\\"]\",\"title\":\"lib/specialized-hack.js clarkinc\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"b-and-a\\\"]\",\"title\":\"lib/specialized-weaken.js b-and-a\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"b-and-a\\\"]\",\"title\":\"lib/specialized-hack.js b-and-a\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"stormtech\\\"]\",\"title\":\"lib/specialized-weaken.js stormtech\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"stormtech\\\"]\",\"title\":\"lib/specialized-hack.js stormtech\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"aerocorp\\\"]\",\"title\":\"lib/specialized-weaken.js aerocorp\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"aerocorp\\\"]\",\"title\":\"lib/specialized-hack.js aerocorp\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"icarus\\\"]\",\"title\":\"lib/specialized-weaken.js icarus\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"icarus\\\"]\",\"title\":\"lib/specialized-hack.js icarus\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-weaken.js omnia\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-hack.js omnia\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"fulcrumassets\\\"]\",\"title\":\"lib/specialized-hack.js fulcrumassets\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-grow.js megacorp\",\"threads\":25,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"megacorp\\\"]\",\"title\":\"lib/specialized-hack.js megacorp\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"blade\\\"]\",\"title\":\"lib/specialized-grow.js blade\",\"threads\":34,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"nwo\\\"]\",\"title\":\"lib/specialized-weaken.js nwo\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"nwo\\\"]\",\"title\":\"lib/specialized-grow.js nwo\",\"threads\":34,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"nwo\\\"]\",\"title\":\"lib/specialized-hack.js nwo\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"ecorp\\\"]\",\"title\":\"lib/specialized-grow.js ecorp\",\"threads\":25,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"ecorp\\\"]\",\"title\":\"lib/specialized-hack.js ecorp\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"kuai-gong\\\"]\",\"title\":\"lib/specialized-grow.js kuai-gong\",\"threads\":20,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"kuai-gong\\\"]\",\"title\":\"lib/specialized-hack.js kuai-gong\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"4sigma\\\"]\",\"title\":\"lib/specialized-weaken.js 4sigma\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"4sigma\\\"]\",\"title\":\"lib/specialized-grow.js 4sigma\",\"threads\":17,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"4sigma\\\"]\",\"title\":\"lib/specialized-hack.js 4sigma\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omnitek\\\"]\",\"title\":\"lib/specialized-grow.js omnitek\",\"threads\":20,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"b-and-a\\\"]\",\"title\":\"lib/specialized-grow.js b-and-a\",\"threads\":25,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"lib/specialized-weaken.js global-pharm\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"global-pharm\\\"]\",\"title\":\"lib/specialized-grow.js global-pharm\",\"threads\":21,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"global-pharm\\\"]\",\"title\":\"lib/specialized-hack.js global-pharm\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"fulcrumtech\\\"]\",\"title\":\"lib/specialized-grow.js fulcrumtech\",\"threads\":19,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"fulcrumtech\\\"]\",\"title\":\"lib/specialized-hack.js fulcrumtech\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"deltaone\\\"]\",\"title\":\"lib/specialized-weaken.js deltaone\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"deltaone\\\"]\",\"title\":\"lib/specialized-grow.js deltaone\",\"threads\":31,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"deltaone\\\"]\",\"title\":\"lib/specialized-hack.js deltaone\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"zeus-med\\\"]\",\"title\":\"lib/specialized-weaken.js zeus-med\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"zeus-med\\\"]\",\"title\":\"lib/specialized-grow.js zeus-med\",\"threads\":27,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"zeus-med\\\"]\",\"title\":\"lib/specialized-hack.js zeus-med\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"nova-med\\\"]\",\"title\":\"lib/specialized-weaken.js nova-med\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"nova-med\\\"]\",\"title\":\"lib/specialized-grow.js nova-med\",\"threads\":21,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"nova-med\\\"]\",\"title\":\"lib/specialized-hack.js nova-med\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"univ-energy\\\"]\",\"title\":\"lib/specialized-weaken.js univ-energy\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"univ-energy\\\"]\",\"title\":\"lib/specialized-grow.js univ-energy\",\"threads\":23,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"univ-energy\\\"]\",\"title\":\"lib/specialized-hack.js univ-energy\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"zb-def\\\"]\",\"title\":\"lib/specialized-weaken.js zb-def\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"zb-def\\\"]\",\"title\":\"lib/specialized-grow.js zb-def\",\"threads\":23,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"zb-def\\\"]\",\"title\":\"lib/specialized-hack.js zb-def\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"stormtech\\\"]\",\"title\":\"lib/specialized-grow.js stormtech\",\"threads\":26,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-weaken.js unitalife\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-grow.js unitalife\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"unitalife\\\"]\",\"title\":\"lib/specialized-hack.js unitalife\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"aerocorp\\\"]\",\"title\":\"lib/specialized-grow.js aerocorp\",\"threads\":32,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"zb-institute\\\"]\",\"title\":\"lib/specialized-weaken.js zb-institute\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"zb-institute\\\"]\",\"title\":\"lib/specialized-grow.js zb-institute\",\"threads\":22,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"zb-institute\\\"]\",\"title\":\"lib/specialized-hack.js zb-institute\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"icarus\\\"]\",\"title\":\"lib/specialized-grow.js icarus\",\"threads\":21,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"omnia\\\"]\",\"title\":\"lib/specialized-grow.js omnia\",\"threads\":31,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"defcomm\\\"]\",\"title\":\"lib/specialized-weaken.js defcomm\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"defcomm\\\"]\",\"title\":\"lib/specialized-grow.js defcomm\",\"threads\":34,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"defcomm\\\"]\",\"title\":\"lib/specialized-hack.js defcomm\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"powerhouse-fitness\\\"]\",\"title\":\"lib/specialized-weaken.js powerhouse-fitness\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"powerhouse-fitness\\\"]\",\"title\":\"lib/specialized-grow.js powerhouse-fitness\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"powerhouse-fitness\\\"]\",\"title\":\"lib/specialized-hack.js powerhouse-fitness\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"taiyang-digital\\\"]\",\"title\":\"lib/specialized-grow.js taiyang-digital\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"taiyang-digital\\\"]\",\"title\":\"lib/specialized-hack.js taiyang-digital\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-grow.js titan-labs\",\"threads\":23,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"titan-labs\\\"]\",\"title\":\"lib/specialized-hack.js titan-labs\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"infocomm\\\"]\",\"title\":\"lib/specialized-grow.js infocomm\",\"threads\":50,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"infocomm\\\"]\",\"title\":\"lib/specialized-hack.js infocomm\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"solaris\\\"]\",\"title\":\"lib/specialized-weaken.js solaris\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"solaris\\\"]\",\"title\":\"lib/specialized-grow.js solaris\",\"threads\":26,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"solaris\\\"]\",\"title\":\"lib/specialized-hack.js solaris\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"galactic-cyber\\\"]\",\"title\":\"lib/specialized-weaken.js galactic-cyber\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"galactic-cyber\\\"]\",\"title\":\"lib/specialized-grow.js galactic-cyber\",\"threads\":19,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"galactic-cyber\\\"]\",\"title\":\"lib/specialized-hack.js galactic-cyber\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"lexo-corp\\\"]\",\"title\":\"lib/specialized-weaken.js lexo-corp\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"lexo-corp\\\"]\",\"title\":\"lib/specialized-grow.js lexo-corp\",\"threads\":30,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"lexo-corp\\\"]\",\"title\":\"lib/specialized-hack.js lexo-corp\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"applied-energetics\\\"]\",\"title\":\"lib/specialized-grow.js applied-energetics\",\"threads\":21,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"applied-energetics\\\"]\",\"title\":\"lib/specialized-hack.js applied-energetics\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"vitalife\\\"]\",\"title\":\"lib/specialized-weaken.js vitalife\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"vitalife\\\"]\",\"title\":\"lib/specialized-grow.js vitalife\",\"threads\":25,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"vitalife\\\"]\",\"title\":\"lib/specialized-hack.js vitalife\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"alpha-ent\\\"]\",\"title\":\"lib/specialized-weaken.js alpha-ent\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"alpha-ent\\\"]\",\"title\":\"lib/specialized-grow.js alpha-ent\",\"threads\":26,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"alpha-ent\\\"]\",\"title\":\"lib/specialized-hack.js alpha-ent\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"rho-construction\\\"]\",\"title\":\"lib/specialized-grow.js rho-construction\",\"threads\":20,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"rho-construction\\\"]\",\"title\":\"lib/specialized-hack.js rho-construction\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"microdyne\\\"]\",\"title\":\"lib/specialized-weaken.js microdyne\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"microdyne\\\"]\",\"title\":\"lib/specialized-grow.js microdyne\",\"threads\":21,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"microdyne\\\"]\",\"title\":\"lib/specialized-hack.js microdyne\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"helios\\\"]\",\"title\":\"lib/specialized-weaken.js helios\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"helios\\\"]\",\"title\":\"lib/specialized-grow.js helios\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"helios\\\"]\",\"title\":\"lib/specialized-hack.js helios\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"syscore\\\"]\",\"title\":\"lib/specialized-weaken.js syscore\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"syscore\\\"]\",\"title\":\"lib/specialized-grow.js syscore\",\"threads\":27,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"syscore\\\"]\",\"title\":\"lib/specialized-hack.js syscore\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"snap-fitness\\\"]\",\"title\":\"lib/specialized-grow.js snap-fitness\",\"threads\":25,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"snap-fitness\\\"]\",\"title\":\"lib/specialized-hack.js snap-fitness\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"catalyst\\\"]\",\"title\":\"lib/specialized-grow.js catalyst\",\"threads\":50,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"catalyst\\\"]\",\"title\":\"lib/specialized-hack.js catalyst\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"aevum-police\\\"]\",\"title\":\"lib/specialized-grow.js aevum-police\",\"threads\":37,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"aevum-police\\\"]\",\"title\":\"lib/specialized-hack.js aevum-police\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"netlink\\\"]\",\"title\":\"lib/specialized-grow.js netlink\",\"threads\":26,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"netlink\\\"]\",\"title\":\"lib/specialized-hack.js netlink\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"millenium-fitness\\\"]\",\"title\":\"lib/specialized-weaken.js millenium-fitness\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"millenium-fitness\\\"]\",\"title\":\"lib/specialized-grow.js millenium-fitness\",\"threads\":21,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"millenium-fitness\\\"]\",\"title\":\"lib/specialized-hack.js millenium-fitness\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"summit-uni\\\"]\",\"title\":\"lib/specialized-weaken.js summit-uni\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"summit-uni\\\"]\",\"title\":\"lib/specialized-grow.js summit-uni\",\"threads\":23,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"summit-uni\\\"]\",\"title\":\"lib/specialized-hack.js summit-uni\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"computek\\\"]\",\"title\":\"lib/specialized-grow.js computek\",\"threads\":29,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"computek\\\"]\",\"title\":\"lib/specialized-hack.js computek\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"rothman-uni\\\"]\",\"title\":\"lib/specialized-weaken.js rothman-uni\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"lib/specialized-grow.js rothman-uni\",\"threads\":21,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"the-hub\\\"]\",\"title\":\"lib/specialized-weaken.js the-hub\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"the-hub\\\"]\",\"title\":\"lib/specialized-grow.js the-hub\",\"threads\":17,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"lib/specialized-grow.js johnson-ortho\",\"threads\":30,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"crush-fitness\\\"]\",\"title\":\"lib/specialized-weaken.js crush-fitness\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"lib/specialized-grow.js crush-fitness\",\"threads\":32,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"fulcrumassets\\\"]\",\"title\":\"lib/specialized-weaken.js fulcrumassets\",\"threads\":328,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"fulcrumassets\\\"]\",\"title\":\"lib/specialized-grow.js fulcrumassets\",\"threads\":3506,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"the-hub\\\"]\",\"title\":\"lib/specialized-hack.js the-hub\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"johnson-ortho\\\"]\",\"title\":\"lib/specialized-weaken.js johnson-ortho\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"lib/specialized-hack.js johnson-ortho\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"omega-net\\\"]\",\"title\":\"lib/specialized-weaken.js omega-net\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"omega-net\\\"]\",\"title\":\"lib/specialized-hack.js omega-net\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-weaken.js silver-helix\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-grow.js silver-helix\",\"threads\":46,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"lib/specialized-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"lib/specialized-hack.js*[\\\"silver-helix\\\"]\",\"title\":\"lib/specialized-hack.js silver-helix\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"iron-gym\\\"]\",\"title\":\"lib/specialized-weaken.js iron-gym\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"iron-gym\\\"]\",\"title\":\"lib/specialized-grow.js iron-gym\",\"threads\":68,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"max-hardware\\\"]\",\"title\":\"lib/specialized-weaken.js max-hardware\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"max-hardware\\\"]\",\"title\":\"lib/specialized-grow.js max-hardware\",\"threads\":21,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"zer0\\\"]\",\"title\":\"lib/specialized-weaken.js zer0\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"zer0\\\"]\",\"title\":\"lib/specialized-grow.js zer0\",\"threads\":15,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"neo-net\\\"]\",\"title\":\"lib/specialized-weaken.js neo-net\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"neo-net\\\"]\",\"title\":\"lib/specialized-grow.js neo-net\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"lib/specialized-grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-grow.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"lib/specialized-grow.js harakiri-sushi\",\"threads\":15,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"lib/specialized-weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"lib/specialized-weaken.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"lib/specialized-weaken.js hong-fang-tea\",\"threads\":12,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"27.1.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"ecorp\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"ecorp\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"ecorp\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"ecorp\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"ecorp\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"ecorp\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"ecorp\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"ecorp\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"ecorp\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"ecorp\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"ecorp\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"ecorp\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"ecorp\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"ecorp\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"ecorp\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"ecorp\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"ecorp\"}}]]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33.22,\"minDifficulty\":33,\"moneyAvailable\":45788724128.15543,\"moneyMax\":60572737000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1181,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"95.8.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"megacorp\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"megacorp\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"megacorp\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"megacorp\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"megacorp\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"megacorp\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"megacorp\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"megacorp\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"megacorp\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"megacorp\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"megacorp\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"megacorp\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"megacorp\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"megacorp\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"megacorp\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"megacorp\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"megacorp\"}}]]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33.22,\"minDifficulty\":33,\"moneyAvailable\":85422142010.61671,\"moneyMax\":112554356150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1278,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-268547.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"SHIFT LOGIN ENTER CACHE MOUSE\",6],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"8.3.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"b-and-a\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"b-and-a\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"b-and-a\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"b-and-a\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"b-and-a\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"b-and-a\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"b-and-a\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"b-and-a\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"b-and-a\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"b-and-a\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"b-and-a\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"b-and-a\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"b-and-a\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"b-and-a\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"b-and-a\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"b-and-a\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"b-and-a\"}}]]},\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":83,\"hackDifficulty\":28.108,\"minDifficulty\":28,\"moneyAvailable\":24679937899.577484,\"moneyMax\":31547686944,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":945,\"serverGrowth\":73,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"35.0.7.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"blade\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"blade\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"blade\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"blade\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"blade\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"blade\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"blade\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"blade\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"blade\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"blade\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"blade\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"blade\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"blade\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"blade\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"blade\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"blade\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\".\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":31.14,\"minDifficulty\":31,\"moneyAvailable\":60966110598.983,\"moneyMax\":77274824248,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":901,\"serverGrowth\":59,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"13.1.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"nwo\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"nwo\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"nwo\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"nwo\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"nwo\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"nwo\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"nwo\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"nwo\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"nwo\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"nwo\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"nwo\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"nwo\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"nwo\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"nwo\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"nwo\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"nwo\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"nwo\"}}]]},\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33.146,\"minDifficulty\":33,\"moneyAvailable\":55206325687.027016,\"moneyMax\":72716079202,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1284,\"serverGrowth\":72,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"44.9.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"clarkinc\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"clarkinc\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"clarkinc\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"clarkinc\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"clarkinc\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"clarkinc\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"clarkinc\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"clarkinc\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"clarkinc\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"clarkinc\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"clarkinc\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"clarkinc\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"clarkinc\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"clarkinc\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"clarkinc\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"clarkinc\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"clarkinc\"}}]]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":15.088,\"minDifficulty\":15,\"moneyAvailable\":29244745751.438858,\"moneyMax\":39234621892,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":968,\"serverGrowth\":59,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"25.4.1.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"omnitek\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"omnitek\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"omnitek\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"omnitek\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"omnitek\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"omnitek\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"omnitek\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"omnitek\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"omnitek\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"omnitek\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"omnitek\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"omnitek\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"omnitek\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"omnitek\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"omnitek\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"omnitek\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":31.087999999999997,\"minDifficulty\":31,\"moneyAvailable\":32038713167.628616,\"moneyMax\":40121276810,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":979,\"serverGrowth\":97,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"50.0.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"4sigma\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"4sigma\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"4sigma\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"4sigma\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"4sigma\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"4sigma\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"4sigma\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"4sigma\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"4sigma\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"4sigma\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"4sigma\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"4sigma\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"4sigma\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"4sigma\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"4sigma\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"4sigma\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"4sigma\"}}]]},\"serversOnNetwork\":[\"helios\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":22.076,\"minDifficulty\":22,\"moneyAvailable\":30700023669.068233,\"moneyMax\":40161785356,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":955,\"serverGrowth\":93,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"9.7.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"kuai-gong\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"kuai-gong\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"kuai-gong\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"kuai-gong\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"kuai-gong\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"kuai-gong\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"kuai-gong\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"kuai-gong\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"kuai-gong\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"kuai-gong\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"kuai-gong\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"kuai-gong\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"kuai-gong\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"kuai-gong\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"kuai-gong\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"kuai-gong\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"kuai-gong\"}}]]},\"serversOnNetwork\":[\"helios\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":32.18000000000001,\"minDifficulty\":32,\"moneyAvailable\":39963724118.69932,\"moneyMax\":49724378840,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1126,\"serverGrowth\":94,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"21.9.7.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"fulcrumtech\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"fulcrumtech\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"fulcrumtech\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"fulcrumtech\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"fulcrumtech\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"fulcrumtech\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"fulcrumtech\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"fulcrumtech\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"fulcrumtech\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"fulcrumtech\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"fulcrumtech\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"fulcrumtech\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"fulcrumtech\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"fulcrumtech\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"fulcrumtech\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"fulcrumtech\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":32,\"minDifficulty\":32,\"moneyAvailable\":2316594669.419326,\"moneyMax\":2882565014,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1039,\"serverGrowth\":99,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"43.2.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"fulcrumassets\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"fulcrumassets\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"fulcrumassets\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"fulcrumassets\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"fulcrumassets\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"fulcrumassets\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"fulcrumassets\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"fulcrumassets\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"fulcrumassets\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"fulcrumassets\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"fulcrumassets\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"fulcrumassets\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"fulcrumassets\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"fulcrumassets\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"fulcrumassets\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"fulcrumassets\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"fulcrumassets\"}}]]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":52.08599999999997,\"minDifficulty\":33,\"moneyAvailable\":1546563.121437529,\"moneyMax\":2000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1375,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"1.5.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"stormtech\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"stormtech\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"stormtech\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"stormtech\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"stormtech\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"stormtech\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"stormtech\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"stormtech\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"stormtech\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"stormtech\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"stormtech\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"stormtech\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"stormtech\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"stormtech\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"stormtech\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"stormtech\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"stormtech\"}}]]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":28.116,\"minDifficulty\":28,\"moneyAvailable\":1667568597.5680318,\"moneyMax\":2114536314,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1064,\"serverGrowth\":68,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"45.5.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"defcomm\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"defcomm\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"defcomm\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"defcomm\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"defcomm\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"defcomm\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"defcomm\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"defcomm\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"defcomm\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"defcomm\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"defcomm\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"defcomm\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"defcomm\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"defcomm\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"defcomm\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"defcomm\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"defcomm\"}}]]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":30.144,\"minDifficulty\":30,\"moneyAvailable\":1452859130.8504193,\"moneyMax\":1843699576,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":874,\"serverGrowth\":57,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"55.3.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"infocomm\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"infocomm\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"infocomm\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"infocomm\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"infocomm\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"infocomm\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"infocomm\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"infocomm\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"infocomm\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"infocomm\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"infocomm\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"infocomm\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"infocomm\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"infocomm\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"infocomm\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"infocomm\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"infocomm\"}}]]},\"serversOnNetwork\":[\"solaris\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":1359794797.2047598,\"moneyMax\":1728962790,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":920,\"serverGrowth\":37,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"66.0.9.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"helios\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"helios\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"helios\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"helios\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"helios\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"helios\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"helios\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"helios\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"helios\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"helios\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"helios\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"helios\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"helios\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"helios\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"helios\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"helios\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":29.104,\"minDifficulty\":29,\"moneyAvailable\":878048001.5613528,\"moneyMax\":1117690730,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":819,\"serverGrowth\":80,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"51.9.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"vitalife\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"vitalife\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"vitalife\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"vitalife\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"vitalife\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"vitalife\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"vitalife\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"vitalife\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"vitalife\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"vitalife\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"vitalife\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"vitalife\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"vitalife\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"vitalife\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"vitalife\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"vitalife\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":27.112,\"minDifficulty\":27,\"moneyAvailable\":1107146478.844985,\"moneyMax\":1418311146,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":791,\"serverGrowth\":73,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"22.2.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"icarus\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"icarus\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"icarus\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"icarus\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"icarus\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"icarus\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"icarus\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"icarus\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"icarus\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"icarus\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"icarus\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"icarus\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"icarus\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"icarus\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"icarus\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"icarus\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"icarus\"}}]]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":30.092,\"minDifficulty\":30,\"moneyAvailable\":1560121489.3326132,\"moneyMax\":1979921298,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":859,\"serverGrowth\":92,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"2.4.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"univ-energy\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"univ-energy\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"univ-energy\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"univ-energy\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"univ-energy\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"univ-energy\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"univ-energy\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"univ-energy\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"univ-energy\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"univ-energy\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"univ-energy\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"univ-energy\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"univ-energy\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"univ-energy\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"univ-energy\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"univ-energy\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":29.099999999999998,\"minDifficulty\":29,\"moneyAvailable\":1838531894.392595,\"moneyMax\":2341850760,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":83,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"28.3.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"titan-labs\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"titan-labs\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"titan-labs\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"titan-labs\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"titan-labs\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"titan-labs\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"titan-labs\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"titan-labs\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"titan-labs\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"titan-labs\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"titan-labs\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"titan-labs\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"titan-labs\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"titan-labs\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"titan-labs\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"titan-labs\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":1368413045.257696,\"moneyMax\":1755718960,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":870,\"serverGrowth\":76,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"8.9.7.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"microdyne\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"microdyne\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"microdyne\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"microdyne\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"microdyne\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"microdyne\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"microdyne\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"microdyne\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"microdyne\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"microdyne\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"microdyne\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"microdyne\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"microdyne\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"microdyne\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"microdyne\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"microdyne\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":23.092,\"minDifficulty\":23,\"moneyAvailable\":930564800.8929657,\"moneyMax\":1208872318,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":858,\"serverGrowth\":78,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"98.8.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"taiyang-digital\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"taiyang-digital\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"taiyang-digital\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"taiyang-digital\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"taiyang-digital\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"taiyang-digital\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"taiyang-digital\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"taiyang-digital\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"taiyang-digital\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"taiyang-digital\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"taiyang-digital\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"taiyang-digital\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"taiyang-digital\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"taiyang-digital\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"taiyang-digital\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"taiyang-digital\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"taiyang-digital\"}}]]},\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":1372815907.9091315,\"moneyMax\":1769837614,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":75,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"7.4.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"galactic-cyber\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"galactic-cyber\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"galactic-cyber\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"galactic-cyber\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"galactic-cyber\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"galactic-cyber\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"galactic-cyber\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"galactic-cyber\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"galactic-cyber\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"galactic-cyber\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"galactic-cyber\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"galactic-cyber\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"galactic-cyber\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"galactic-cyber\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"galactic-cyber\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"galactic-cyber\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"galactic-cyber\"}}]]},\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":21.084,\"minDifficulty\":21,\"moneyAvailable\":1284003394.2942367,\"moneyMax\":1688007322,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":825,\"serverGrowth\":81,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"38.5.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"aerocorp\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"aerocorp\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"aerocorp\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"aerocorp\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"aerocorp\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"aerocorp\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"aerocorp\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"aerocorp\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"aerocorp\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"aerocorp\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"aerocorp\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"aerocorp\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"aerocorp\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"aerocorp\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"aerocorp\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"aerocorp\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"aerocorp\"}}]]},\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":27.136,\"minDifficulty\":27,\"moneyAvailable\":1587072336.585606,\"moneyMax\":2032933916,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":902,\"serverGrowth\":57,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"60.1.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"omnia\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"omnia\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"omnia\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"omnia\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"omnia\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"omnia\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"omnia\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"omnia\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"omnia\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"omnia\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"omnia\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"omnia\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"omnia\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"omnia\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"omnia\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"omnia\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":32.132000000000005,\"minDifficulty\":32,\"moneyAvailable\":1470029114.258207,\"moneyMax\":1849077232,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":941,\"serverGrowth\":64,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"94.5.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"zb-def\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"zb-def\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"zb-def\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"zb-def\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"zb-def\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"zb-def\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"zb-def\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"zb-def\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"zb-def\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"zb-def\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"zb-def\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"zb-def\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"zb-def\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"zb-def\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"zb-def\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"zb-def\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":21.099999999999998,\"minDifficulty\":21,\"moneyAvailable\":1610201749.035697,\"moneyMax\":2122537696,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":819,\"serverGrowth\":67,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"30.1.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"applied-energetics\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"applied-energetics\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"applied-energetics\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"applied-energetics\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"applied-energetics\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"applied-energetics\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"applied-energetics\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"applied-energetics\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"applied-energetics\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"applied-energetics\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"applied-energetics\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"applied-energetics\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"applied-energetics\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"applied-energetics\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"applied-energetics\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"applied-energetics\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"applied-energetics\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":1095056792.862988,\"moneyMax\":1456463990,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":75,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"9.9.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"solaris\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"solaris\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"solaris\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"solaris\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"solaris\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"solaris\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"solaris\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"solaris\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"solaris\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"solaris\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"solaris\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"solaris\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"solaris\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"solaris\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"solaris\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"solaris\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26.108,\"minDifficulty\":26,\"moneyAvailable\":1308126832.502706,\"moneyMax\":1692865860,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":756,\"serverGrowth\":71,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"34.6.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"deltaone\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"deltaone\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"deltaone\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"deltaone\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"deltaone\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"deltaone\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"deltaone\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"deltaone\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"deltaone\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"deltaone\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"deltaone\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"deltaone\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"deltaone\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"deltaone\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"deltaone\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"deltaone\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"deltaone\"}}]]},\"serversOnNetwork\":[\"global-pharm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26.136,\"minDifficulty\":26,\"moneyAvailable\":2218176846.1915755,\"moneyMax\":2857033120,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":824,\"serverGrowth\":57,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"72.1.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"global-pharm\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"global-pharm\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"global-pharm\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"global-pharm\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"global-pharm\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"global-pharm\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"global-pharm\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"global-pharm\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"global-pharm\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"global-pharm\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"global-pharm\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"global-pharm\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"global-pharm\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"global-pharm\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"global-pharm\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"global-pharm\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":28.092,\"minDifficulty\":28,\"moneyAvailable\":2601781334.777754,\"moneyMax\":3336293304,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":831,\"serverGrowth\":88,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-885391.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"VZWWdd33333777777777ss22TJJRRJGGGGGPPPPPPPPPPNuuuuuuuuBX\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"16.8.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"nova-med\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"nova-med\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"nova-med\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"nova-med\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"nova-med\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"nova-med\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"nova-med\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"nova-med\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"nova-med\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"nova-med\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"nova-med\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"nova-med\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"nova-med\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"nova-med\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"nova-med\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"nova-med\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":26.096,\"minDifficulty\":26,\"moneyAvailable\":1839033334.2650566,\"moneyMax\":2360098082,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":841,\"serverGrowth\":82,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"38.8.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"zeus-med\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"zeus-med\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"zeus-med\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"zeus-med\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"zeus-med\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"zeus-med\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"zeus-med\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"zeus-med\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"zeus-med\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"zeus-med\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"zeus-med\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"zeus-med\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"zeus-med\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"zeus-med\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"zeus-med\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"zeus-med\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"zeus-med\"}}]]},\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":29.112,\"minDifficulty\":29,\"moneyAvailable\":2101164820.9604144,\"moneyMax\":2690315644,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":830,\"serverGrowth\":73,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"85.7.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"unitalife\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"unitalife\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"unitalife\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"unitalife\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"unitalife\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"unitalife\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"unitalife\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"unitalife\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"unitalife\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"unitalife\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"unitalife\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"unitalife\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"unitalife\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"unitalife\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"unitalife\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"unitalife\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":26.099999999999998,\"minDifficulty\":26,\"moneyAvailable\":1588191090.3831403,\"moneyMax\":2054096914,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":806,\"serverGrowth\":76,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"0.6.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"lexo-corp\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"lexo-corp\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"lexo-corp\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"lexo-corp\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"lexo-corp\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"lexo-corp\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"lexo-corp\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"lexo-corp\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"lexo-corp\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"lexo-corp\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"lexo-corp\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"lexo-corp\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"lexo-corp\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"lexo-corp\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"lexo-corp\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"lexo-corp\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":25.128,\"minDifficulty\":25,\"moneyAvailable\":1198114970.532741,\"moneyMax\":1558071668,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":727,\"serverGrowth\":59,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"63.6.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"rho-construction\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"rho-construction\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"rho-construction\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"rho-construction\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"rho-construction\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"rho-construction\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"rho-construction\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"rho-construction\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"rho-construction\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"rho-construction\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"rho-construction\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"rho-construction\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"rho-construction\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"rho-construction\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"rho-construction\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"rho-construction\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":16,\"minDifficulty\":16,\"moneyAvailable\":1060155325.0509616,\"moneyMax\":1328372028,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":522,\"serverGrowth\":48,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"93.2.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"alpha-ent\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"alpha-ent\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"alpha-ent\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"alpha-ent\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"alpha-ent\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"alpha-ent\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"alpha-ent\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"alpha-ent\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"alpha-ent\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"alpha-ent\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"alpha-ent\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"alpha-ent\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"alpha-ent\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"alpha-ent\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"alpha-ent\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"alpha-ent\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":19.108,\"minDifficulty\":19,\"moneyAvailable\":1036445509.4845763,\"moneyMax\":1397197508,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":504,\"serverGrowth\":60,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"37.2.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"aevum-police\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"aevum-police\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"aevum-police\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"aevum-police\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"aevum-police\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"aevum-police\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"aevum-police\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"aevum-police\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"aevum-police\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"aevum-police\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"aevum-police\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"aevum-police\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"aevum-police\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"aevum-police\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"aevum-police\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"aevum-police\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"catalyst\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":539760593.3664228,\"moneyMax\":713312584,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":433,\"serverGrowth\":49,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"51.8.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"rothman-uni\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"rothman-uni\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"rothman-uni\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"rothman-uni\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"rothman-uni\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"rothman-uni\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"rothman-uni\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"rothman-uni\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"rothman-uni\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"rothman-uni\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"rothman-uni\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"rothman-uni\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"rothman-uni\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"rothman-uni\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"rothman-uni\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"rothman-uni\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":15.092,\"minDifficulty\":15,\"moneyAvailable\":285039673.1394678,\"moneyMax\":451070800,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":409,\"serverGrowth\":45,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"81.1.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"zb-institute\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"zb-institute\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"zb-institute\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"zb-institute\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"zb-institute\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"zb-institute\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"zb-institute\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"zb-institute\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"zb-institute\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"zb-institute\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"zb-institute\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"zb-institute\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"zb-institute\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"zb-institute\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"zb-institute\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"zb-institute\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":27.096,\"minDifficulty\":27,\"moneyAvailable\":1569754387.1526132,\"moneyMax\":2020227542,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":761,\"serverGrowth\":84,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"87.9.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"summit-uni\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"summit-uni\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"summit-uni\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"summit-uni\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"summit-uni\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"summit-uni\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"summit-uni\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"summit-uni\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"summit-uni\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"summit-uni\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"summit-uni\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"summit-uni\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"summit-uni\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"summit-uni\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"summit-uni\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"summit-uni\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":16.094,\"minDifficulty\":16,\"moneyAvailable\":366337854.7921255,\"moneyMax\":457951820,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":466,\"serverGrowth\":43,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"85.4.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"syscore\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"syscore\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"syscore\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"syscore\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"syscore\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"syscore\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"syscore\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"syscore\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"syscore\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"syscore\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"syscore\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"syscore\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"syscore\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"syscore\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"syscore\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"syscore\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":22.116,\"minDifficulty\":22,\"moneyAvailable\":749605216.6489468,\"moneyMax\":992280576,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":594,\"serverGrowth\":62,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"27.1.3.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"catalyst\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"catalyst\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"catalyst\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"catalyst\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"catalyst\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"catalyst\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"catalyst\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"catalyst\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"catalyst\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"catalyst\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"catalyst\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"catalyst\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"catalyst\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"catalyst\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"catalyst\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"catalyst\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"netlink\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":613142832.2847902,\"moneyMax\":815471936,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":440,\"serverGrowth\":35,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"70.8.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"the-hub\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"the-hub\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"the-hub\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"the-hub\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"the-hub\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"the-hub\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"the-hub\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"the-hub\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"the-hub\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"the-hub\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"the-hub\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"the-hub\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"the-hub\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"the-hub\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"the-hub\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"the-hub\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":14.078,\"minDifficulty\":14,\"moneyAvailable\":195301775.572796,\"moneyMax\":311173658,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":320,\"serverGrowth\":50,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"23.0.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"computek\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"computek\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"computek\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"computek\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"computek\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"computek\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"computek\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"computek\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"computek\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"computek\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"computek\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"computek\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"computek\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"computek\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"computek\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"computek\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":333727800.4993448,\"moneyMax\":451454826,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":380,\"serverGrowth\":57,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"67.3.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"netlink\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"netlink\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"netlink\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"netlink\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"netlink\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"netlink\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"netlink\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"netlink\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"netlink\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"netlink\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"netlink\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"netlink\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"netlink\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"netlink\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"netlink\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"netlink\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":421629760.8913725,\"moneyMax\":550000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":396,\"serverGrowth\":71,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"12.1.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"johnson-ortho\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"johnson-ortho\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"johnson-ortho\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"johnson-ortho\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"johnson-ortho\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"johnson-ortho\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"johnson-ortho\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"johnson-ortho\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"johnson-ortho\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"johnson-ortho\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"johnson-ortho\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"johnson-ortho\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"johnson-ortho\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"johnson-ortho\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"johnson-ortho\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"johnson-ortho\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":21.008,\"minDifficulty\":21,\"moneyAvailable\":85681733.10614154,\"moneyMax\":156834586,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":257,\"serverGrowth\":57,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"77.4.8.0\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"n00dles\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"n00dles\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"n00dles\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"n00dles\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"n00dles\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"n00dles\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"n00dles\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"n00dles\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"n00dles\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"n00dles\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"n00dles\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"n00dles\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"n00dles\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"n00dles\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"n00dles\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"n00dles\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":104595.90004174705,\"moneyMax\":140000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"38.1.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"foodnstuff\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"foodnstuff\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"foodnstuff\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"foodnstuff\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"foodnstuff\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"foodnstuff\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"foodnstuff\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"foodnstuff\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"foodnstuff\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"foodnstuff\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"foodnstuff\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"foodnstuff\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"foodnstuff\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"foodnstuff\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"foodnstuff\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"foodnstuff\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.522,\"minDifficulty\":3,\"moneyAvailable\":3014412.7675262736,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"79.5.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"sigma-cosmetics\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":3464857.5377610093,\"moneyMax\":4600000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"67.7.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"joesguns\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"joesguns\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"joesguns\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"joesguns\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"joesguns\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"joesguns\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"joesguns\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"joesguns\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"joesguns\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"joesguns\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"joesguns\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"joesguns\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"joesguns\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"joesguns\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"joesguns\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"joesguns\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":3790023.899124336,\"moneyMax\":5000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"50.2.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"zer0\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"zer0\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"zer0\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"zer0\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"zer0\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"zer0\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"zer0\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"zer0\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"zer0\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"zer0\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"zer0\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"zer0\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"zer0\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"zer0\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"zer0\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"zer0\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.072000000000001,\"minDifficulty\":8,\"moneyAvailable\":8956426.872066282,\"moneyMax\":15000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"91.8.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"nectar-net\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"nectar-net\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"nectar-net\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"nectar-net\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"nectar-net\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"nectar-net\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"nectar-net\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"nectar-net\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"nectar-net\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"nectar-net\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"nectar-net\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"nectar-net\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"nectar-net\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"nectar-net\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"nectar-net\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"nectar-net\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.106,\"minDifficulty\":7,\"moneyAvailable\":4232639.88553045,\"moneyMax\":5500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"93.0.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"neo-net\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"neo-net\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"neo-net\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"neo-net\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"neo-net\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"neo-net\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"neo-net\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"neo-net\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"neo-net\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"neo-net\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"neo-net\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"neo-net\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"neo-net\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"neo-net\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"neo-net\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"neo-net\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.108,\"minDifficulty\":8,\"moneyAvailable\":5887000.899254575,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"93.6.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"silver-helix\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"silver-helix\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"silver-helix\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"silver-helix\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"silver-helix\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"silver-helix\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"silver-helix\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"silver-helix\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"silver-helix\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"silver-helix\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"silver-helix\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"silver-helix\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"silver-helix\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"silver-helix\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"silver-helix\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"silver-helix\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"netlink\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.186,\"minDifficulty\":10,\"moneyAvailable\":54499552.54706898,\"moneyMax\":90000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"1.5.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"hong-fang-tea\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.26,\"minDifficulty\":5,\"moneyAvailable\":4557991.02296635,\"moneyMax\":6000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"98.5.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"harakiri-sushi\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.006,\"minDifficulty\":5,\"moneyAvailable\":4666662.001850078,\"moneyMax\":8000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"58.0.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"phantasy\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"phantasy\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"phantasy\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"phantasy\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"phantasy\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"phantasy\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"phantasy\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"phantasy\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"phantasy\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"phantasy\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"phantasy\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"phantasy\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"phantasy\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"phantasy\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"phantasy\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"phantasy\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.006,\"minDifficulty\":7,\"moneyAvailable\":28142294.339000806,\"moneyMax\":48000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"63.7.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"max-hardware\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"max-hardware\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"max-hardware\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"max-hardware\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"max-hardware\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"max-hardware\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"max-hardware\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"max-hardware\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"max-hardware\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"max-hardware\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"max-hardware\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"max-hardware\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"max-hardware\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"max-hardware\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"max-hardware\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"max-hardware\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.096,\"minDifficulty\":5,\"moneyAvailable\":11579896.381404914,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"80.9.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"omega-net\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"omega-net\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"omega-net\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"omega-net\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"omega-net\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"omega-net\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"omega-net\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"omega-net\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"omega-net\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"omega-net\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"omega-net\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"omega-net\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"omega-net\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"omega-net\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"omega-net\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"omega-net\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":27,\"hackDifficulty\":9.134,\"minDifficulty\":9,\"moneyAvailable\":83409911.62394246,\"moneyMax\":137436926,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":183,\"serverGrowth\":39,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"86.0.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"crush-fitness\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"crush-fitness\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"crush-fitness\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"crush-fitness\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"crush-fitness\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"crush-fitness\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"crush-fitness\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"crush-fitness\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"crush-fitness\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"crush-fitness\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"crush-fitness\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"crush-fitness\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"crush-fitness\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"crush-fitness\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"crush-fitness\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"crush-fitness\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":15.144,\"minDifficulty\":15,\"moneyAvailable\":54366385.2979985,\"moneyMax\":109932712,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":256,\"serverGrowth\":29,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-70075.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,5,2,3,2,3,0,3,2],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"64.7.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"iron-gym\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"iron-gym\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"iron-gym\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"iron-gym\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"iron-gym\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"iron-gym\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"iron-gym\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"iron-gym\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"iron-gym\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"iron-gym\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"iron-gym\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"iron-gym\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"iron-gym\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"iron-gym\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"iron-gym\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"iron-gym\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.284,\"minDifficulty\":10,\"moneyAvailable\":18817436.607919034,\"moneyMax\":40000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"76.2.7.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"millenium-fitness\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"millenium-fitness\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"millenium-fitness\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"millenium-fitness\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"millenium-fitness\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"millenium-fitness\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"millenium-fitness\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"millenium-fitness\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"millenium-fitness\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"millenium-fitness\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"millenium-fitness\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"millenium-fitness\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"millenium-fitness\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"millenium-fitness\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"millenium-fitness\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"millenium-fitness\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15.09,\"minDifficulty\":15,\"moneyAvailable\":399391027.51485044,\"moneyMax\":500000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":519,\"serverGrowth\":44,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"7.9.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"powerhouse-fitness\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":19.099999999999998,\"minDifficulty\":19,\"moneyAvailable\":1369129487.0981054,\"moneyMax\":1800000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1094,\"serverGrowth\":60,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"74.9.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"snap-fitness\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"snap-fitness\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"snap-fitness\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"snap-fitness\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"snap-fitness\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"snap-fitness\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"snap-fitness\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"snap-fitness\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"snap-fitness\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"snap-fitness\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"snap-fitness\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"snap-fitness\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"snap-fitness\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"snap-fitness\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"snap-fitness\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"snap-fitness\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":669183066.9057983,\"moneyMax\":900000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":794,\"serverGrowth\":47,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"48.2.6.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"run4theh111z\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"run4theh111z\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"run4theh111z\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"run4theh111z\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"run4theh111z\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"run4theh111z\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"run4theh111z\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"run4theh111z\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"run4theh111z\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"run4theh111z\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"run4theh111z\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"run4theh111z\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"run4theh111z\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"run4theh111z\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"run4theh111z\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"run4theh111z\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"nova-med\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":539,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"61.5.7.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"I.I.I.I\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"I.I.I.I\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"I.I.I.I\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"I.I.I.I\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"I.I.I.I\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"I.I.I.I\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"I.I.I.I\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"I.I.I.I\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"I.I.I.I\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"I.I.I.I\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"I.I.I.I\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"I.I.I.I\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"I.I.I.I\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"I.I.I.I\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"I.I.I.I\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"I.I.I.I\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":354,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"22.3.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"avmnite-02h\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"avmnite-02h\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"avmnite-02h\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"avmnite-02h\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"avmnite-02h\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"avmnite-02h\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"avmnite-02h\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"avmnite-02h\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"avmnite-02h\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"avmnite-02h\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"avmnite-02h\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"avmnite-02h\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"avmnite-02h\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"avmnite-02h\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"avmnite-02h\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"avmnite-02h\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":213,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"9.9.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\".\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\".\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\".\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\".\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\".\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\".\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\".\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\".\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\".\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\".\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\".\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\".\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\".\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\".\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\".\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\".\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":542,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"16.0.3.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"CSEC\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"CSEC\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"CSEC\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"CSEC\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"CSEC\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"CSEC\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"CSEC\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"CSEC\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"CSEC\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"CSEC\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"CSEC\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"CSEC\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"CSEC\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"CSEC\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"CSEC\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"CSEC\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":55,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"16.1.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"The-Cave\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"The-Cave\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"The-Cave\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"The-Cave\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"The-Cave\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"The-Cave\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"The-Cave\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"The-Cave\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"The-Cave\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"The-Cave\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"The-Cave\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"The-Cave\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"The-Cave\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"The-Cave\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"The-Cave\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"The-Cave\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"The-Cave\"}}]]},\"serversOnNetwork\":[\"blade\",\"w0r1d_d43m0n\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":true,\"ip\":\"68.2.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"w0r1d_d43m0n\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"w0r1d_d43m0n\"}}]]},\"serversOnNetwork\":[\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":15000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"80.6.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"lib/IAccumulatorData.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n\",\"filename\":\"lib/IAccumulatorData.js\",\"server\":\"darkweb\"}}],[\"lib/analyze.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { lineHeader, newLine } from \\\"/lib/misc\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    h: \\\"\\\",\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    const host = args.host;\\r\\n    const header = flags.h;\\r\\n    analyze(ns, header, host);\\r\\n}\\r\\nexport function analyze(ns, header, host) {\\r\\n    ns.tprintf(lineHeader);\\r\\n    ns.tprintf(header || host);\\r\\n    ns.tprintf(lineHeader);\\r\\n    const server = ns.getServer(host);\\r\\n    const money = server.moneyAvailable || 0;\\r\\n    const maxMoney = server.moneyMax || 0;\\r\\n    ns.tprintf(\\\"root:\\\\t\\\\t\\\\t%s\\\", server.hasAdminRights);\\r\\n    ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.backdoorInstalled);\\r\\n    ns.tprintf(\\\"cpu_cores:\\\\t\\\\t%s\\\", server.cpuCores);\\r\\n    ns.tprintf(\\\"max_ram:\\\\t\\\\t%s\\\", server.maxRam);\\r\\n    ns.tprintf(\\\"org:\\\\t\\\\t\\\\t%s\\\", server.organizationName);\\r\\n    // ns.tprintf(\\\"backdoor:\\\\t\\\\t%s\\\", server.);\\r\\n    if (!server.hasAdminRights) {\\r\\n        ns.tprintf(\\\"ports_required:\\\\t%s\\\", server.numOpenPortsRequired);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprintf(newLine);\\r\\n        if (maxMoney)\\r\\n            ns.tprintf(\\\"money:\\\\t\\\\t\\\\t%s / %s (%s)\\\", ns.formatNumber(money, 3), ns.formatNumber(maxMoney, 3), ns.formatPercent(money / maxMoney));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"min_security:\\\\t\\\\t%s\\\", server.minDifficulty);\\r\\n        ns.tprintf(\\\"current_security:\\\\t%s\\\", server.hackDifficulty);\\r\\n        ns.tprintf(\\\"min_hacking:\\\\t\\\\t%s\\\", server.requiredHackingSkill);\\r\\n        ns.tprintf(\\\"weaken_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getWeakenTime(host)));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"hack_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getHackTime(host)));\\r\\n        ns.tprintf(\\\"hack_chance:\\\\t\\\\t%s\\\", ns.formatPercent(ns.hackAnalyzeChance(host)));\\r\\n        ns.tprintf(\\\"hack_security:\\\\t\\\\t%s / thread\\\", ns.formatPercent(ns.hackAnalyzeSecurity(1, host)));\\r\\n        ns.tprintf(\\\"hack_threads:\\\\t\\\\t%s for %s$\\\", Math.ceil(ns.hackAnalyzeThreads(host, money)), ns.formatNumber(money, 3));\\r\\n        ns.tprintf(newLine);\\r\\n        ns.tprintf(\\\"growth:\\\\t\\\\t\\\\t%s\\\", server.serverGrowth);\\r\\n        ns.tprintf(\\\"grow_time:\\\\t\\\\t%s\\\", ns.tFormat(ns.getGrowTime(host)));\\r\\n        if (money && maxMoney)\\r\\n            ns.tprintf(\\\"grow_analyze:\\\\t\\\\t%s to %s$\\\", Math.ceil(ns.growthAnalyze(host, maxMoney / money)), ns.formatNumber(maxMoney, 3));\\r\\n        ns.tprintf(\\\"grow_security:\\\\t\\\\t%s / thread\\\", ns.growthAnalyzeSecurity(1, host));\\r\\n        ns.tprintf(newLine);\\r\\n        // can't give host parameter\\r\\n        // ns.tprintf(\\\"weaken_analyze:\\\\t\\\\t%s / thread\\\", ns.weakenAnalyze(1));\\r\\n    }\\r\\n    ns.tprintf(\\\"files:\\\\t\\\\t\\\\t%s\\\", ns\\r\\n        .ls(host)\\r\\n        .filter((file) => !file.endsWith(\\\".js\\\"))\\r\\n        .join(\\\", \\\"));\\r\\n    ns.tprintf(newLine);\\r\\n    ns.tprintf(newLine);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/analyze.js\",\"server\":\"darkweb\"}}],[\"lib/defaultDepth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultDepth = 20;\\r\\n\",\"filename\":\"lib/defaultDepth.js\",\"server\":\"darkweb\"}}],[\"lib/defaultMaxThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultMaxThreads = 10000000;\\r\\n\",\"filename\":\"lib/defaultMaxThreads.js\",\"server\":\"darkweb\"}}],[\"lib/deploy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultMaxThreads } from \\\"/lib/defaultMaxThreads\\\";\\r\\nimport { uploadLib } from \\\"/lib/uploadLib\\\";\\r\\nimport { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n    target: \\\"n00dles\\\",\\r\\n    script: \\\"lib/hack.js\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    // with home\\r\\n    w: false,\\r\\n    // max threads\\r\\n    x: defaultMaxThreads,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await deploy(ns, args, flags);\\r\\n}\\r\\nexport async function deploy(ns, { host, target, script: file }, { w: withHome, x: maxThreads }, ...args) {\\r\\n    if (!ns.hasRootAccess(host))\\r\\n        return 0;\\r\\n    uploadLib(ns, file, host);\\r\\n    const margin = host === \\\"home\\\" && !withHome ? 32 : 0;\\r\\n    const threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host) - margin) /\\r\\n        ns.getScriptRam(file));\\r\\n    if (threads > 0) {\\r\\n        const limitedThreads = Math.ceil(Math.min(threads, maxThreads));\\r\\n        ns.exec(file, host, limitedThreads, target, ...args);\\r\\n        return limitedThreads;\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/deploy.js\",\"server\":\"darkweb\"}}],[\"lib/getAvailableExes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const getAvailableExes = (ns) => [\\r\\n    {\\r\\n        name: \\\"brutessh\\\",\\r\\n        fn: ns.brutessh,\\r\\n        available: ns.fileExists(\\\"BruteSSH.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"ftpcrack\\\",\\r\\n        fn: ns.ftpcrack,\\r\\n        available: ns.fileExists(\\\"FTPCrack.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"relaysmtp\\\",\\r\\n        fn: ns.relaysmtp,\\r\\n        available: ns.fileExists(\\\"relaySMTP.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"httpworm\\\",\\r\\n        fn: ns.httpworm,\\r\\n        available: ns.fileExists(\\\"HTTPWorm.exe\\\"),\\r\\n    },\\r\\n    {\\r\\n        name: \\\"sqlinject\\\",\\r\\n        fn: ns.sqlinject,\\r\\n        available: ns.fileExists(\\\"SQLInject.exe\\\"),\\r\\n    },\\r\\n    { name: \\\"nuke\\\", fn: ns.nuke, available: true },\\r\\n].filter((exe) => exe.available);\\r\\n\",\"filename\":\"lib/getAvailableExes.js\",\"server\":\"darkweb\"}}],[\"lib/maxServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const maxServers = 25;\\r\\n\",\"filename\":\"lib/maxServers.js\",\"server\":\"darkweb\"}}],[\"lib/misc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const newLine = \\\"\\\\n\\\";\\r\\n/** scp: Only works for scripts, .lit and .txt files. */\\r\\nexport const scpExtensions = [\\\".lit\\\", \\\".txt\\\", \\\".js\\\"];\\r\\nexport const lineHeader = \\\"########################\\\";\\r\\nexport class ThreadCounts {\\r\\n    homeThreads;\\r\\n    threads;\\r\\n    ratio;\\r\\n    constructor(homeThreads, threads) {\\r\\n        this.homeThreads = homeThreads;\\r\\n        this.threads = threads;\\r\\n        this.ratio = (homeThreads || 1) / (threads || 1);\\r\\n    }\\r\\n    removeThreads(threads, host) {\\r\\n        if (host === \\\"home\\\") {\\r\\n            this._removeHomeThreads(threads);\\r\\n        }\\r\\n        else {\\r\\n            this._removeThreads(threads);\\r\\n        }\\r\\n    }\\r\\n    _removeHomeThreads(homeThreads) {\\r\\n        this.homeThreads -= homeThreads;\\r\\n        if (this.homeThreads > 0) {\\r\\n            this.threads = Math.ceil(this.threads - homeThreads * this.ratio);\\r\\n        }\\r\\n        else if (this.homeThreads === 0) {\\r\\n            this.threads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    _removeThreads(threads) {\\r\\n        this.threads -= threads;\\r\\n        if (this.threads > 0) {\\r\\n            this.homeThreads = Math.ceil(this.homeThreads - threads / this.ratio);\\r\\n        }\\r\\n        else if (this.threads === 0) {\\r\\n            this.homeThreads = 0;\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Tried to remove more threads than it has\\\");\\r\\n        }\\r\\n    }\\r\\n    isEmpty() {\\r\\n        return !this.threads;\\r\\n    }\\r\\n    getThreadCount(host) {\\r\\n        return host === \\\"home\\\" ? this.homeThreads : this.threads;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"lib/misc.js\",\"server\":\"darkweb\"}}],[\"lib/pwn.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHduLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wd24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIiJdfQ==\",\"filename\":\"lib/pwn.js\",\"server\":\"darkweb\"}}],[\"lib/specialized-backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nimport { walkDeepFirst } from \\\"/lib/walkDeepFirst\\\";\\r\\nimport { defaultDepth } from \\\"/lib/defaultDepth\\\";\\r\\nconst argsTemplate = {\\r\\n    target: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    d: defaultDepth,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await backdoor(ns, args, flags);\\r\\n}\\r\\nexport async function backdoor(ns, { target }, { d: depth }) {\\r\\n    await walkDeepFirst(ns, depth, async (host, acc) => {\\r\\n        if (host === target) {\\r\\n            acc.nodes.forEach(ns.singularity.connect);\\r\\n            ns.singularity.connect(host);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n    });\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-backdoor.js\",\"server\":\"darkweb\"}}],[\"lib/specialized-grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.grow(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-grow.js\",\"server\":\"darkweb\"}}],[\"lib/specialized-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.hack(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-hack.js\",\"server\":\"darkweb\"}}],[\"lib/specialized-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args } = validationReport;\\r\\n    await template(ns, args);\\r\\n}\\r\\nexport async function template(ns, { host }) {\\r\\n    await ns.weaken(host);\\r\\n}\\r\\nexport function autocomplete(data, \\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\n_args) {\\r\\n    return data.servers;\\r\\n}\\r\\n\",\"filename\":\"lib/specialized-weaken.js\",\"server\":\"darkweb\"}}],[\"lib/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { validateScriptInput } from \\\"/lib/utilities\\\";\\r\\nconst argsTemplate = {\\r\\n    host: \\\"n00dles\\\",\\r\\n};\\r\\nconst flagsTemplate = {\\r\\n    //budget\\r\\n    b: Number.MAX_SAFE_INTEGER,\\r\\n    //Prompt\\r\\n    p: false,\\r\\n};\\r\\nexport async function main(ns) {\\r\\n    const validationReport = validateScriptInput(ns, flagsTemplate, argsTemplate);\\r\\n    if (validationReport === false) {\\r\\n        return;\\r\\n    }\\r\\n    const { args, flags } = validationReport;\\r\\n    await upgrade(ns, args, flags);\\r\\n}\\r\\nexport async function upgrade(ns, { host }, { b: budget, p: prompt }) {\\r\\n    const ram = ns.getServerMaxRam(host);\\r\\n    const newRam = ram * 2;\\r\\n    const price = ns.getPurchasedServerUpgradeCost(host, newRam);\\r\\n    if (budget >= price) {\\r\\n        const message = ns.sprintf(\\\"Upgrade %s with %sGB\\\", host, newRam);\\r\\n        const doIt = !prompt || (await ns.prompt(message + \\\"?\\\", { type: \\\"boolean\\\" }));\\r\\n        if (doIt && ns.upgradePurchasedServer(host, newRam)) {\\r\\n            ns.toast(message, \\\"success\\\");\\r\\n            return price;\\r\\n        }\\r\\n        else {\\r\\n            ns.toast(`Failed to ${message}`, \\\"error\\\");\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n\",\"filename\":\"lib/upgrade.js\",\"server\":\"darkweb\"}}],[\"lib/uploadLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scpExtensions } from \\\"/lib/misc\\\";\\r\\nexport function uploadLib(ns, file, host) {\\r\\n    const filesToUpload = ns\\r\\n        .ls(\\\"home\\\", \\\"lib/\\\")\\r\\n        .filter((file) => !!scpExtensions.filter((extension) => file.endsWith(extension)).length)\\r\\n        .concat([file]);\\r\\n    ns.scp(filesToUpload, host, \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/uploadLib.js\",\"server\":\"darkweb\"}}],[\"lib/utilities.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const space = \\\" \\\";\\r\\nexport function validateScriptInput(ns, flagsTemplate, argsTemplate) {\\r\\n    const { flags, args } = getArgs(ns, flagsTemplate, argsTemplate);\\r\\n    if (flags.help ||\\r\\n        !validateFlags(flags, { ...flagsTemplate, help: false }) ||\\r\\n        !validateArgs(args, argsTemplate)) {\\r\\n        ns.tprintf(\\\"USAGE: run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${typeof value}`)\\r\\n            .join(space), Object.keys(argsTemplate)\\r\\n            .map((key) => `<${key}>`)\\r\\n            .join(space));\\r\\n        ns.tprint(\\\"Example:\\\");\\r\\n        ns.tprintf(\\\"> run %s %s %s\\\", ns.getScriptName(), Object.entries(flagsTemplate)\\r\\n            .map(([name, value]) => `-${name.length > 1 ? \\\"-\\\" : \\\"\\\"}${name} ${value}`)\\r\\n            .join(space), Object.values(argsTemplate).join(space));\\r\\n        return false;\\r\\n    }\\r\\n    return { flags, args };\\r\\n}\\r\\nfunction validateArgs(args, argsTemplate) {\\r\\n    const argsValues = Object.values(args);\\r\\n    const argsTemplateValues = Object.values(argsTemplate);\\r\\n    if (argsValues.length !== argsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < argsValues.length; i++) {\\r\\n        if (typeof argsValues[i] !== typeof argsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nfunction validateFlags(flags, flagsTemplate) {\\r\\n    const flagsValues = Object.values(flags);\\r\\n    const flagsTemplateValues = Object.values(flagsTemplate);\\r\\n    if (flagsValues.length !== flagsTemplateValues.length)\\r\\n        return false;\\r\\n    for (let i = 0; i < flagsValues.length; i++) {\\r\\n        if (typeof flagsValues[i] !== typeof flagsTemplateValues[i])\\r\\n            return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\nexport function getArgs(ns, flagsTemplate, argsTemplate) {\\r\\n    const tmp = Object.entries(flagsTemplate);\\r\\n    tmp.push([\\\"help\\\", false]);\\r\\n    let nsFlags = {};\\r\\n    try {\\r\\n        nsFlags = ns.flags(tmp);\\r\\n        // eslint-disable-next-line no-empty\\r\\n    }\\r\\n    catch (e) { }\\r\\n    const { _, ...flags } = nsFlags;\\r\\n    return {\\r\\n        flags: flags,\\r\\n        args: Object.keys(argsTemplate).reduce((acc, _value, index) => {\\r\\n            const value = _value;\\r\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n            acc[value] = _[index];\\r\\n            return acc;\\r\\n        }, {}),\\r\\n    };\\r\\n}\\r\\nexport function hasFormulas(ns) {\\r\\n    return ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\");\\r\\n}\\r\\n\",\"filename\":\"lib/utilities.js\",\"server\":\"darkweb\"}}],[\"lib/walkDeepFirst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const defaultIAccumulatorData = {\\r\\n    depth: 0,\\r\\n    nodes: [],\\r\\n};\\r\\nexport async function walkDeepFirst(ns, depth = 1, callback, options) {\\r\\n    const excludes = options?.excludes || [];\\r\\n    const rootHost = options?.rootHost || ns.getHostname();\\r\\n    const walk = async (host, acc) => {\\r\\n        if (acc.depth > depth) {\\r\\n            return;\\r\\n        }\\r\\n        const customAcc = await callback(host, acc);\\r\\n        const scannedHosts = ns\\r\\n            .scan(host)\\r\\n            .filter((scannedHost) => acc.nodes.indexOf(scannedHost) < 0 &&\\r\\n            excludes.indexOf(scannedHost) < 0);\\r\\n        for (const scannedHost of scannedHosts) {\\r\\n            await walk(scannedHost, {\\r\\n                ...acc,\\r\\n                ...customAcc,\\r\\n                depth: acc.depth + 1,\\r\\n                nodes: [...acc.nodes, host],\\r\\n            });\\r\\n        }\\r\\n    };\\r\\n    const initialValue = {\\r\\n        ...defaultIAccumulatorData,\\r\\n        ...options?.initValue,\\r\\n    };\\r\\n    await walk(rootHost, initialValue);\\r\\n}\\r\\n\",\"filename\":\"lib/walkDeepFirst.js\",\"server\":\"darkweb\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":9.1446,\"discovery\":\"known\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":9.1446,\"discovery\":\"known\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":53.4076,\"discovery\":\"known\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":186.9383,\"discovery\":\"known\",\"playerReputation\":3662.9704926801287}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":151.4159,\"discovery\":\"known\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":386.4753,\"discovery\":\"known\",\"playerReputation\":7009028.220687994}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":91.6907,\"discovery\":\"known\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":47.2704,\"discovery\":\"known\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":40,\"MaxPortCapacity\":60,\"MaxTerminalCapacity\":250,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.2,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"36","AllGangsSave":"{\"Slum Snakes\":{\"power\":1,\"territory\":0.14285714285714587},\"Tetrads\":{\"power\":1000.3149677952722,\"territory\":0},\"The Syndicate\":{\"power\":909.9381935349546,\"territory\":0},\"The Dark Army\":{\"power\":894.7433446231993,\"territory\":0},\"Speakers for the Dead\":{\"power\":2903.1168198652867,\"territory\":0.8571428571428541},\"NiteSec\":{\"power\":959.2636540952494,\"territory\":0},\"The Black Hand\":{\"power\":14.730935383136485,\"territory\":0}}","LastExportBonus":"1702635425125","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}